// Generated from /Users/luogaiyu/code/spark/sql/api/src/main/antlr4/org/apache/spark/sql/catalyst/parser/SqlBaseParser.g4 by ANTLR 4.13.1
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class SqlBaseParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SEMICOLON=1, LEFT_PAREN=2, RIGHT_PAREN=3, COMMA=4, DOT=5, LEFT_BRACKET=6, 
		RIGHT_BRACKET=7, BANG=8, ADD=9, AFTER=10, AGGREGATE=11, ALL=12, ALTER=13, 
		ALWAYS=14, ANALYZE=15, AND=16, ANTI=17, ANY=18, ANY_VALUE=19, ARCHIVE=20, 
		ARRAY=21, AS=22, ASC=23, AT=24, AUTHORIZATION=25, BEGIN=26, BETWEEN=27, 
		BIGINT=28, BINARY=29, BINDING=30, BOOLEAN=31, BOTH=32, BUCKET=33, BUCKETS=34, 
		BY=35, BYTE=36, CACHE=37, CALL=38, CALLED=39, CASCADE=40, CASE=41, CAST=42, 
		CATALOG=43, CATALOGS=44, CHANGE=45, CHAR=46, CHARACTER=47, CHECK=48, CLEAR=49, 
		CLUSTER=50, CLUSTERED=51, CODEGEN=52, COLLATE=53, COLLATION=54, COLLECTION=55, 
		COLUMN=56, COLUMNS=57, COMMENT=58, COMMIT=59, COMPACT=60, COMPACTIONS=61, 
		COMPENSATION=62, COMPUTE=63, CONCATENATE=64, CONDITION=65, CONSTRAINT=66, 
		CONTAINS=67, CONTINUE=68, COST=69, CREATE=70, CROSS=71, CUBE=72, CURRENT=73, 
		CURRENT_DATE=74, CURRENT_TIME=75, CURRENT_TIMESTAMP=76, CURRENT_USER=77, 
		DAY=78, DAYS=79, DAYOFYEAR=80, DATA=81, DATE=82, DATABASE=83, DATABASES=84, 
		DATEADD=85, DATE_ADD=86, DATEDIFF=87, DATE_DIFF=88, DBPROPERTIES=89, DEC=90, 
		DECIMAL=91, DECLARE=92, DEFAULT=93, DEFINED=94, DEFINER=95, DELETE=96, 
		DELIMITED=97, DESC=98, DESCRIBE=99, DETERMINISTIC=100, DFS=101, DIRECTORIES=102, 
		DIRECTORY=103, DISTINCT=104, DISTRIBUTE=105, DIV=106, DO=107, DOUBLE=108, 
		DROP=109, ELSE=110, ELSEIF=111, END=112, ESCAPE=113, ESCAPED=114, EVOLUTION=115, 
		EXCEPT=116, EXCHANGE=117, EXCLUDE=118, EXISTS=119, EXIT=120, EXPLAIN=121, 
		EXPORT=122, EXTEND=123, EXTENDED=124, EXTERNAL=125, EXTRACT=126, FALSE=127, 
		FETCH=128, FIELDS=129, FILTER=130, FILEFORMAT=131, FIRST=132, FLOAT=133, 
		FOLLOWING=134, FOR=135, FOREIGN=136, FORMAT=137, FORMATTED=138, FOUND=139, 
		FROM=140, FULL=141, FUNCTION=142, FUNCTIONS=143, GENERATED=144, GLOBAL=145, 
		GRANT=146, GROUP=147, GROUPING=148, HANDLER=149, HAVING=150, BINARY_HEX=151, 
		HOUR=152, HOURS=153, IDENTIFIER_KW=154, IDENTITY=155, IF=156, IGNORE=157, 
		IMMEDIATE=158, IMPORT=159, IN=160, INCLUDE=161, INCREMENT=162, INDEX=163, 
		INDEXES=164, INNER=165, INPATH=166, INPUT=167, INPUTFORMAT=168, INSERT=169, 
		INTERSECT=170, INTERVAL=171, INT=172, INTEGER=173, INTO=174, INVOKER=175, 
		IS=176, ITEMS=177, ITERATE=178, JOIN=179, JSON=180, KEYS=181, LANGUAGE=182, 
		LAST=183, LATERAL=184, LAZY=185, LEADING=186, LEAVE=187, LEFT=188, LIKE=189, 
		ILIKE=190, LIMIT=191, LINES=192, LIST=193, LOAD=194, LOCAL=195, LOCATION=196, 
		LOCK=197, LOCKS=198, LOGICAL=199, LONG=200, LOOP=201, MACRO=202, MAP=203, 
		MATCHED=204, MERGE=205, MICROSECOND=206, MICROSECONDS=207, MILLISECOND=208, 
		MILLISECONDS=209, MINUTE=210, MINUTES=211, MODIFIES=212, MONTH=213, MONTHS=214, 
		MSCK=215, NAME=216, NAMESPACE=217, NAMESPACES=218, NANOSECOND=219, NANOSECONDS=220, 
		NATURAL=221, NO=222, NONE=223, NOT=224, NULL=225, NULLS=226, NUMERIC=227, 
		OF=228, OFFSET=229, ON=230, ONLY=231, OPTION=232, OPTIONS=233, OR=234, 
		ORDER=235, OUT=236, OUTER=237, OUTPUTFORMAT=238, OVER=239, OVERLAPS=240, 
		OVERLAY=241, OVERWRITE=242, PARTITION=243, PARTITIONED=244, PARTITIONS=245, 
		PERCENTLIT=246, PIVOT=247, PLACING=248, POSITION=249, PRECEDING=250, PRIMARY=251, 
		PRINCIPALS=252, PROPERTIES=253, PURGE=254, QUARTER=255, QUERY=256, RANGE=257, 
		READS=258, REAL=259, RECORDREADER=260, RECORDWRITER=261, RECOVER=262, 
		RECURSIVE=263, REDUCE=264, REFERENCES=265, REFRESH=266, RENAME=267, REPAIR=268, 
		REPEAT=269, REPEATABLE=270, REPLACE=271, RESET=272, RESPECT=273, RESTRICT=274, 
		RETURN=275, RETURNS=276, REVOKE=277, RIGHT=278, RLIKE=279, ROLE=280, ROLES=281, 
		ROLLBACK=282, ROLLUP=283, ROW=284, ROWS=285, SECOND=286, SECONDS=287, 
		SCHEMA=288, SCHEMAS=289, SECURITY=290, SELECT=291, SEMI=292, SEPARATED=293, 
		SERDE=294, SERDEPROPERTIES=295, SESSION_USER=296, SET=297, SETMINUS=298, 
		SETS=299, SHORT=300, SHOW=301, SINGLE=302, SKEWED=303, SMALLINT=304, SOME=305, 
		SORT=306, SORTED=307, SOURCE=308, SPECIFIC=309, SQL=310, SQLEXCEPTION=311, 
		SQLSTATE=312, START=313, STATISTICS=314, STORED=315, STRATIFY=316, STRING=317, 
		STRUCT=318, SUBSTR=319, SUBSTRING=320, SYNC=321, SYSTEM_TIME=322, SYSTEM_VERSION=323, 
		TABLE=324, TABLES=325, TABLESAMPLE=326, TARGET=327, TBLPROPERTIES=328, 
		TEMPORARY=329, TERMINATED=330, THEN=331, TIME=332, TIMEDIFF=333, TIMESTAMP=334, 
		TIMESTAMP_LTZ=335, TIMESTAMP_NTZ=336, TIMESTAMPADD=337, TIMESTAMPDIFF=338, 
		TINYINT=339, TO=340, EXECUTE=341, TOUCH=342, TRAILING=343, TRANSACTION=344, 
		TRANSACTIONS=345, TRANSFORM=346, TRIM=347, TRUE=348, TRUNCATE=349, TRY_CAST=350, 
		TYPE=351, UNARCHIVE=352, UNBOUNDED=353, UNCACHE=354, UNION=355, UNIQUE=356, 
		UNKNOWN=357, UNLOCK=358, UNPIVOT=359, UNSET=360, UNTIL=361, UPDATE=362, 
		USE=363, USER=364, USING=365, VALUE=366, VALUES=367, VARCHAR=368, VAR=369, 
		VARIABLE=370, VARIANT=371, VERSION=372, VIEW=373, VIEWS=374, VOID=375, 
		WEEK=376, WEEKS=377, WHEN=378, WHERE=379, WHILE=380, WINDOW=381, WITH=382, 
		WITHIN=383, YEAR=384, YEARS=385, ZONE=386, EQ=387, NSEQ=388, NEQ=389, 
		NEQJ=390, LT=391, LTE=392, GT=393, GTE=394, SHIFT_LEFT=395, SHIFT_RIGHT=396, 
		SHIFT_RIGHT_UNSIGNED=397, PLUS=398, MINUS=399, ASTERISK=400, SLASH=401, 
		PERCENT=402, TILDE=403, AMPERSAND=404, PIPE=405, CONCAT_PIPE=406, OPERATOR_PIPE=407, 
		HAT=408, COLON=409, DOUBLE_COLON=410, ARROW=411, FAT_ARROW=412, HENT_START=413, 
		HENT_END=414, QUESTION=415, STRING_LITERAL=416, DOUBLEQUOTED_STRING=417, 
		BIGINT_LITERAL=418, SMALLINT_LITERAL=419, TINYINT_LITERAL=420, INTEGER_VALUE=421, 
		EXPONENT_VALUE=422, DECIMAL_VALUE=423, FLOAT_LITERAL=424, DOUBLE_LITERAL=425, 
		BIGDECIMAL_LITERAL=426, IDENTIFIER=427, BACKQUOTED_IDENTIFIER=428, SIMPLE_COMMENT=429, 
		BRACKETED_COMMENT=430, WS=431, UNRECOGNIZED=432;
	public static final int
		RULE_compoundOrSingleStatement = 0, RULE_singleCompoundStatement = 1, 
		RULE_beginEndCompoundBlock = 2, RULE_compoundBody = 3, RULE_compoundStatement = 4, 
		RULE_setStatementWithOptionalVarKeyword = 5, RULE_sqlStateValue = 6, RULE_declareConditionStatement = 7, 
		RULE_conditionValue = 8, RULE_conditionValues = 9, RULE_declareHandlerStatement = 10, 
		RULE_whileStatement = 11, RULE_ifElseStatement = 12, RULE_repeatStatement = 13, 
		RULE_leaveStatement = 14, RULE_iterateStatement = 15, RULE_caseStatement = 16, 
		RULE_loopStatement = 17, RULE_forStatement = 18, RULE_singleStatement = 19, 
		RULE_beginLabel = 20, RULE_endLabel = 21, RULE_singleExpression = 22, 
		RULE_singleTableIdentifier = 23, RULE_singleMultipartIdentifier = 24, 
		RULE_singleFunctionIdentifier = 25, RULE_singleDataType = 26, RULE_singleTableSchema = 27, 
		RULE_statement = 28, RULE_setResetStatement = 29, RULE_executeImmediate = 30, 
		RULE_executeImmediateUsing = 31, RULE_executeImmediateQueryParam = 32, 
		RULE_executeImmediateArgument = 33, RULE_executeImmediateArgumentSeq = 34, 
		RULE_timezone = 35, RULE_configKey = 36, RULE_configValue = 37, RULE_unsupportedHiveNativeCommands = 38, 
		RULE_createTableHeader = 39, RULE_replaceTableHeader = 40, RULE_clusterBySpec = 41, 
		RULE_bucketSpec = 42, RULE_skewSpec = 43, RULE_locationSpec = 44, RULE_schemaBinding = 45, 
		RULE_commentSpec = 46, RULE_singleQuery = 47, RULE_query = 48, RULE_insertInto = 49, 
		RULE_partitionSpecLocation = 50, RULE_partitionSpec = 51, RULE_partitionVal = 52, 
		RULE_namespace = 53, RULE_namespaces = 54, RULE_variable = 55, RULE_describeFuncName = 56, 
		RULE_describeColName = 57, RULE_ctes = 58, RULE_namedQuery = 59, RULE_tableProvider = 60, 
		RULE_createTableClauses = 61, RULE_propertyList = 62, RULE_property = 63, 
		RULE_propertyKey = 64, RULE_propertyValue = 65, RULE_expressionPropertyList = 66, 
		RULE_expressionProperty = 67, RULE_constantList = 68, RULE_nestedConstantList = 69, 
		RULE_createFileFormat = 70, RULE_fileFormat = 71, RULE_storageHandler = 72, 
		RULE_resource = 73, RULE_dmlStatementNoWith = 74, RULE_identifierReference = 75, 
		RULE_catalogIdentifierReference = 76, RULE_queryOrganization = 77, RULE_multiInsertQueryBody = 78, 
		RULE_queryTerm = 79, RULE_queryPrimary = 80, RULE_sortItem = 81, RULE_fromStatement = 82, 
		RULE_fromStatementBody = 83, RULE_querySpecification = 84, RULE_transformClause = 85, 
		RULE_selectClause = 86, RULE_setClause = 87, RULE_matchedClause = 88, 
		RULE_notMatchedClause = 89, RULE_notMatchedBySourceClause = 90, RULE_matchedAction = 91, 
		RULE_notMatchedAction = 92, RULE_notMatchedBySourceAction = 93, RULE_exceptClause = 94, 
		RULE_assignmentList = 95, RULE_assignment = 96, RULE_whereClause = 97, 
		RULE_havingClause = 98, RULE_hint = 99, RULE_hintStatement = 100, RULE_fromClause = 101, 
		RULE_temporalClause = 102, RULE_aggregationClause = 103, RULE_groupByClause = 104, 
		RULE_groupingAnalytics = 105, RULE_groupingElement = 106, RULE_groupingSet = 107, 
		RULE_pivotClause = 108, RULE_pivotColumn = 109, RULE_pivotValue = 110, 
		RULE_unpivotClause = 111, RULE_unpivotNullClause = 112, RULE_unpivotOperator = 113, 
		RULE_unpivotSingleValueColumnClause = 114, RULE_unpivotMultiValueColumnClause = 115, 
		RULE_unpivotColumnSet = 116, RULE_unpivotValueColumn = 117, RULE_unpivotNameColumn = 118, 
		RULE_unpivotColumnAndAlias = 119, RULE_unpivotColumn = 120, RULE_unpivotAlias = 121, 
		RULE_lateralView = 122, RULE_setQuantifier = 123, RULE_relation = 124, 
		RULE_relationExtension = 125, RULE_joinRelation = 126, RULE_joinType = 127, 
		RULE_joinCriteria = 128, RULE_sample = 129, RULE_sampleMethod = 130, RULE_identifierList = 131, 
		RULE_identifierSeq = 132, RULE_orderedIdentifierList = 133, RULE_orderedIdentifier = 134, 
		RULE_identifierCommentList = 135, RULE_identifierComment = 136, RULE_relationPrimary = 137, 
		RULE_optionsClause = 138, RULE_inlineTable = 139, RULE_functionTableSubqueryArgument = 140, 
		RULE_tableArgumentPartitioning = 141, RULE_functionTableNamedArgumentExpression = 142, 
		RULE_functionTableReferenceArgument = 143, RULE_functionTableArgument = 144, 
		RULE_functionTable = 145, RULE_tableAlias = 146, RULE_rowFormat = 147, 
		RULE_multipartIdentifierList = 148, RULE_multipartIdentifier = 149, RULE_multipartIdentifierPropertyList = 150, 
		RULE_multipartIdentifierProperty = 151, RULE_tableIdentifier = 152, RULE_functionIdentifier = 153, 
		RULE_namedExpression = 154, RULE_namedExpressionSeq = 155, RULE_partitionFieldList = 156, 
		RULE_partitionField = 157, RULE_transform = 158, RULE_transformArgument = 159, 
		RULE_expression = 160, RULE_namedArgumentExpression = 161, RULE_functionArgument = 162, 
		RULE_expressionSeq = 163, RULE_booleanExpression = 164, RULE_predicate = 165, 
		RULE_errorCapturingNot = 166, RULE_valueExpression = 167, RULE_shiftOperator = 168, 
		RULE_datetimeUnit = 169, RULE_primaryExpression = 170, RULE_literalType = 171, 
		RULE_constant = 172, RULE_comparisonOperator = 173, RULE_arithmeticOperator = 174, 
		RULE_predicateOperator = 175, RULE_booleanValue = 176, RULE_interval = 177, 
		RULE_errorCapturingMultiUnitsInterval = 178, RULE_multiUnitsInterval = 179, 
		RULE_errorCapturingUnitToUnitInterval = 180, RULE_unitToUnitInterval = 181, 
		RULE_intervalValue = 182, RULE_unitInMultiUnits = 183, RULE_unitInUnitToUnit = 184, 
		RULE_colPosition = 185, RULE_collationSpec = 186, RULE_collateClause = 187, 
		RULE_type = 188, RULE_dataType = 189, RULE_qualifiedColTypeWithPositionList = 190, 
		RULE_qualifiedColTypeWithPosition = 191, RULE_colDefinitionDescriptorWithPosition = 192, 
		RULE_defaultExpression = 193, RULE_variableDefaultExpression = 194, RULE_colTypeList = 195, 
		RULE_colType = 196, RULE_colDefinitionList = 197, RULE_colDefinition = 198, 
		RULE_colDefinitionOption = 199, RULE_generationExpression = 200, RULE_identityColSpec = 201, 
		RULE_sequenceGeneratorOption = 202, RULE_sequenceGeneratorStartOrStep = 203, 
		RULE_complexColTypeList = 204, RULE_complexColType = 205, RULE_routineCharacteristics = 206, 
		RULE_routineLanguage = 207, RULE_specificName = 208, RULE_deterministic = 209, 
		RULE_sqlDataAccess = 210, RULE_nullCall = 211, RULE_rightsClause = 212, 
		RULE_whenClause = 213, RULE_windowClause = 214, RULE_namedWindow = 215, 
		RULE_windowSpec = 216, RULE_windowFrame = 217, RULE_frameBound = 218, 
		RULE_qualifiedNameList = 219, RULE_functionName = 220, RULE_qualifiedName = 221, 
		RULE_errorCapturingIdentifier = 222, RULE_errorCapturingIdentifierExtra = 223, 
		RULE_identifier = 224, RULE_strictIdentifier = 225, RULE_quotedIdentifier = 226, 
		RULE_backQuotedIdentifier = 227, RULE_number = 228, RULE_alterColumnSpecList = 229, 
		RULE_alterColumnSpec = 230, RULE_alterColumnAction = 231, RULE_stringLit = 232, 
		RULE_comment = 233, RULE_version = 234, RULE_operatorPipeRightSide = 235, 
		RULE_operatorPipeSetAssignmentSeq = 236, RULE_ansiNonReserved = 237, RULE_strictNonReserved = 238, 
		RULE_nonReserved = 239;
	private static String[] makeRuleNames() {
		return new String[] {
			"compoundOrSingleStatement", "singleCompoundStatement", "beginEndCompoundBlock", 
			"compoundBody", "compoundStatement", "setStatementWithOptionalVarKeyword", 
			"sqlStateValue", "declareConditionStatement", "conditionValue", "conditionValues", 
			"declareHandlerStatement", "whileStatement", "ifElseStatement", "repeatStatement", 
			"leaveStatement", "iterateStatement", "caseStatement", "loopStatement", 
			"forStatement", "singleStatement", "beginLabel", "endLabel", "singleExpression", 
			"singleTableIdentifier", "singleMultipartIdentifier", "singleFunctionIdentifier", 
			"singleDataType", "singleTableSchema", "statement", "setResetStatement", 
			"executeImmediate", "executeImmediateUsing", "executeImmediateQueryParam", 
			"executeImmediateArgument", "executeImmediateArgumentSeq", "timezone", 
			"configKey", "configValue", "unsupportedHiveNativeCommands", "createTableHeader", 
			"replaceTableHeader", "clusterBySpec", "bucketSpec", "skewSpec", "locationSpec", 
			"schemaBinding", "commentSpec", "singleQuery", "query", "insertInto", 
			"partitionSpecLocation", "partitionSpec", "partitionVal", "namespace", 
			"namespaces", "variable", "describeFuncName", "describeColName", "ctes", 
			"namedQuery", "tableProvider", "createTableClauses", "propertyList", 
			"property", "propertyKey", "propertyValue", "expressionPropertyList", 
			"expressionProperty", "constantList", "nestedConstantList", "createFileFormat", 
			"fileFormat", "storageHandler", "resource", "dmlStatementNoWith", "identifierReference", 
			"catalogIdentifierReference", "queryOrganization", "multiInsertQueryBody", 
			"queryTerm", "queryPrimary", "sortItem", "fromStatement", "fromStatementBody", 
			"querySpecification", "transformClause", "selectClause", "setClause", 
			"matchedClause", "notMatchedClause", "notMatchedBySourceClause", "matchedAction", 
			"notMatchedAction", "notMatchedBySourceAction", "exceptClause", "assignmentList", 
			"assignment", "whereClause", "havingClause", "hint", "hintStatement", 
			"fromClause", "temporalClause", "aggregationClause", "groupByClause", 
			"groupingAnalytics", "groupingElement", "groupingSet", "pivotClause", 
			"pivotColumn", "pivotValue", "unpivotClause", "unpivotNullClause", "unpivotOperator", 
			"unpivotSingleValueColumnClause", "unpivotMultiValueColumnClause", "unpivotColumnSet", 
			"unpivotValueColumn", "unpivotNameColumn", "unpivotColumnAndAlias", "unpivotColumn", 
			"unpivotAlias", "lateralView", "setQuantifier", "relation", "relationExtension", 
			"joinRelation", "joinType", "joinCriteria", "sample", "sampleMethod", 
			"identifierList", "identifierSeq", "orderedIdentifierList", "orderedIdentifier", 
			"identifierCommentList", "identifierComment", "relationPrimary", "optionsClause", 
			"inlineTable", "functionTableSubqueryArgument", "tableArgumentPartitioning", 
			"functionTableNamedArgumentExpression", "functionTableReferenceArgument", 
			"functionTableArgument", "functionTable", "tableAlias", "rowFormat", 
			"multipartIdentifierList", "multipartIdentifier", "multipartIdentifierPropertyList", 
			"multipartIdentifierProperty", "tableIdentifier", "functionIdentifier", 
			"namedExpression", "namedExpressionSeq", "partitionFieldList", "partitionField", 
			"transform", "transformArgument", "expression", "namedArgumentExpression", 
			"functionArgument", "expressionSeq", "booleanExpression", "predicate", 
			"errorCapturingNot", "valueExpression", "shiftOperator", "datetimeUnit", 
			"primaryExpression", "literalType", "constant", "comparisonOperator", 
			"arithmeticOperator", "predicateOperator", "booleanValue", "interval", 
			"errorCapturingMultiUnitsInterval", "multiUnitsInterval", "errorCapturingUnitToUnitInterval", 
			"unitToUnitInterval", "intervalValue", "unitInMultiUnits", "unitInUnitToUnit", 
			"colPosition", "collationSpec", "collateClause", "type", "dataType", 
			"qualifiedColTypeWithPositionList", "qualifiedColTypeWithPosition", "colDefinitionDescriptorWithPosition", 
			"defaultExpression", "variableDefaultExpression", "colTypeList", "colType", 
			"colDefinitionList", "colDefinition", "colDefinitionOption", "generationExpression", 
			"identityColSpec", "sequenceGeneratorOption", "sequenceGeneratorStartOrStep", 
			"complexColTypeList", "complexColType", "routineCharacteristics", "routineLanguage", 
			"specificName", "deterministic", "sqlDataAccess", "nullCall", "rightsClause", 
			"whenClause", "windowClause", "namedWindow", "windowSpec", "windowFrame", 
			"frameBound", "qualifiedNameList", "functionName", "qualifiedName", "errorCapturingIdentifier", 
			"errorCapturingIdentifierExtra", "identifier", "strictIdentifier", "quotedIdentifier", 
			"backQuotedIdentifier", "number", "alterColumnSpecList", "alterColumnSpec", 
			"alterColumnAction", "stringLit", "comment", "version", "operatorPipeRightSide", 
			"operatorPipeSetAssignmentSeq", "ansiNonReserved", "strictNonReserved", 
			"nonReserved"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "';'", "'('", "')'", "','", "'.'", "'['", "']'", "'!'", "'ADD'", 
			"'AFTER'", "'AGGREGATE'", "'ALL'", "'ALTER'", "'ALWAYS'", "'ANALYZE'", 
			"'AND'", "'ANTI'", "'ANY'", "'ANY_VALUE'", "'ARCHIVE'", "'ARRAY'", "'AS'", 
			"'ASC'", "'AT'", "'AUTHORIZATION'", "'BEGIN'", "'BETWEEN'", "'BIGINT'", 
			"'BINARY'", "'BINDING'", "'BOOLEAN'", "'BOTH'", "'BUCKET'", "'BUCKETS'", 
			"'BY'", "'BYTE'", "'CACHE'", "'CALL'", "'CALLED'", "'CASCADE'", "'CASE'", 
			"'CAST'", "'CATALOG'", "'CATALOGS'", "'CHANGE'", "'CHAR'", "'CHARACTER'", 
			"'CHECK'", "'CLEAR'", "'CLUSTER'", "'CLUSTERED'", "'CODEGEN'", "'COLLATE'", 
			"'COLLATION'", "'COLLECTION'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", 
			"'COMMIT'", "'COMPACT'", "'COMPACTIONS'", "'COMPENSATION'", "'COMPUTE'", 
			"'CONCATENATE'", "'CONDITION'", "'CONSTRAINT'", "'CONTAINS'", "'CONTINUE'", 
			"'COST'", "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", 
			"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DAY'", "'DAYS'", 
			"'DAYOFYEAR'", "'DATA'", "'DATE'", "'DATABASE'", "'DATABASES'", "'DATEADD'", 
			"'DATE_ADD'", "'DATEDIFF'", "'DATE_DIFF'", "'DBPROPERTIES'", "'DEC'", 
			"'DECIMAL'", "'DECLARE'", "'DEFAULT'", "'DEFINED'", "'DEFINER'", "'DELETE'", 
			"'DELIMITED'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", "'DFS'", "'DIRECTORIES'", 
			"'DIRECTORY'", "'DISTINCT'", "'DISTRIBUTE'", "'DIV'", "'DO'", "'DOUBLE'", 
			"'DROP'", "'ELSE'", "'ELSEIF'", "'END'", "'ESCAPE'", "'ESCAPED'", "'EVOLUTION'", 
			"'EXCEPT'", "'EXCHANGE'", "'EXCLUDE'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", 
			"'EXPORT'", "'EXTEND'", "'EXTENDED'", "'EXTERNAL'", "'EXTRACT'", "'FALSE'", 
			"'FETCH'", "'FIELDS'", "'FILTER'", "'FILEFORMAT'", "'FIRST'", "'FLOAT'", 
			"'FOLLOWING'", "'FOR'", "'FOREIGN'", "'FORMAT'", "'FORMATTED'", "'FOUND'", 
			"'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONS'", "'GENERATED'", "'GLOBAL'", 
			"'GRANT'", "'GROUP'", "'GROUPING'", "'HANDLER'", "'HAVING'", "'X'", "'HOUR'", 
			"'HOURS'", "'IDENTIFIER'", "'IDENTITY'", "'IF'", "'IGNORE'", "'IMMEDIATE'", 
			"'IMPORT'", "'IN'", "'INCLUDE'", "'INCREMENT'", "'INDEX'", "'INDEXES'", 
			"'INNER'", "'INPATH'", "'INPUT'", "'INPUTFORMAT'", "'INSERT'", "'INTERSECT'", 
			"'INTERVAL'", "'INT'", "'INTEGER'", "'INTO'", "'INVOKER'", "'IS'", "'ITEMS'", 
			"'ITERATE'", "'JOIN'", "'JSON'", "'KEYS'", "'LANGUAGE'", "'LAST'", "'LATERAL'", 
			"'LAZY'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'ILIKE'", "'LIMIT'", 
			"'LINES'", "'LIST'", "'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCKS'", 
			"'LOGICAL'", "'LONG'", "'LOOP'", "'MACRO'", "'MAP'", "'MATCHED'", "'MERGE'", 
			"'MICROSECOND'", "'MICROSECONDS'", "'MILLISECOND'", "'MILLISECONDS'", 
			"'MINUTE'", "'MINUTES'", "'MODIFIES'", "'MONTH'", "'MONTHS'", "'MSCK'", 
			"'NAME'", "'NAMESPACE'", "'NAMESPACES'", "'NANOSECOND'", "'NANOSECONDS'", 
			"'NATURAL'", "'NO'", "'NONE'", "'NOT'", "'NULL'", "'NULLS'", "'NUMERIC'", 
			"'OF'", "'OFFSET'", "'ON'", "'ONLY'", "'OPTION'", "'OPTIONS'", "'OR'", 
			"'ORDER'", "'OUT'", "'OUTER'", "'OUTPUTFORMAT'", "'OVER'", "'OVERLAPS'", 
			"'OVERLAY'", "'OVERWRITE'", "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", 
			"'PERCENT'", "'PIVOT'", "'PLACING'", "'POSITION'", "'PRECEDING'", "'PRIMARY'", 
			"'PRINCIPALS'", "'PROPERTIES'", "'PURGE'", "'QUARTER'", "'QUERY'", "'RANGE'", 
			"'READS'", "'REAL'", "'RECORDREADER'", "'RECORDWRITER'", "'RECOVER'", 
			"'RECURSIVE'", "'REDUCE'", "'REFERENCES'", "'REFRESH'", "'RENAME'", "'REPAIR'", 
			"'REPEAT'", "'REPEATABLE'", "'REPLACE'", "'RESET'", "'RESPECT'", "'RESTRICT'", 
			"'RETURN'", "'RETURNS'", "'REVOKE'", "'RIGHT'", null, "'ROLE'", "'ROLES'", 
			"'ROLLBACK'", "'ROLLUP'", "'ROW'", "'ROWS'", "'SECOND'", "'SECONDS'", 
			"'SCHEMA'", "'SCHEMAS'", "'SECURITY'", "'SELECT'", "'SEMI'", "'SEPARATED'", 
			"'SERDE'", "'SERDEPROPERTIES'", "'SESSION_USER'", "'SET'", "'MINUS'", 
			"'SETS'", "'SHORT'", "'SHOW'", "'SINGLE'", "'SKEWED'", "'SMALLINT'", 
			"'SOME'", "'SORT'", "'SORTED'", "'SOURCE'", "'SPECIFIC'", "'SQL'", "'SQLEXCEPTION'", 
			"'SQLSTATE'", "'START'", "'STATISTICS'", "'STORED'", "'STRATIFY'", "'STRING'", 
			"'STRUCT'", "'SUBSTR'", "'SUBSTRING'", "'SYNC'", "'SYSTEM_TIME'", "'SYSTEM_VERSION'", 
			"'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'TARGET'", "'TBLPROPERTIES'", 
			null, "'TERMINATED'", "'THEN'", "'TIME'", "'TIMEDIFF'", "'TIMESTAMP'", 
			"'TIMESTAMP_LTZ'", "'TIMESTAMP_NTZ'", "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", 
			"'TINYINT'", "'TO'", "'EXECUTE'", "'TOUCH'", "'TRAILING'", "'TRANSACTION'", 
			"'TRANSACTIONS'", "'TRANSFORM'", "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TRY_CAST'", 
			"'TYPE'", "'UNARCHIVE'", "'UNBOUNDED'", "'UNCACHE'", "'UNION'", "'UNIQUE'", 
			"'UNKNOWN'", "'UNLOCK'", "'UNPIVOT'", "'UNSET'", "'UNTIL'", "'UPDATE'", 
			"'USE'", "'USER'", "'USING'", "'VALUE'", "'VALUES'", "'VARCHAR'", "'VAR'", 
			"'VARIABLE'", "'VARIANT'", "'VERSION'", "'VIEW'", "'VIEWS'", "'VOID'", 
			"'WEEK'", "'WEEKS'", "'WHEN'", "'WHERE'", "'WHILE'", "'WINDOW'", "'WITH'", 
			"'WITHIN'", "'YEAR'", "'YEARS'", "'ZONE'", null, "'<=>'", "'<>'", "'!='", 
			"'<'", null, "'>'", null, "'<<'", "'>>'", "'>>>'", "'+'", "'-'", "'*'", 
			"'/'", "'%'", "'~'", "'&'", "'|'", "'||'", "'|>'", "'^'", "':'", "'::'", 
			"'->'", "'=>'", "'/*+'", "'*/'", "'?'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "SEMICOLON", "LEFT_PAREN", "RIGHT_PAREN", "COMMA", "DOT", "LEFT_BRACKET", 
			"RIGHT_BRACKET", "BANG", "ADD", "AFTER", "AGGREGATE", "ALL", "ALTER", 
			"ALWAYS", "ANALYZE", "AND", "ANTI", "ANY", "ANY_VALUE", "ARCHIVE", "ARRAY", 
			"AS", "ASC", "AT", "AUTHORIZATION", "BEGIN", "BETWEEN", "BIGINT", "BINARY", 
			"BINDING", "BOOLEAN", "BOTH", "BUCKET", "BUCKETS", "BY", "BYTE", "CACHE", 
			"CALL", "CALLED", "CASCADE", "CASE", "CAST", "CATALOG", "CATALOGS", "CHANGE", 
			"CHAR", "CHARACTER", "CHECK", "CLEAR", "CLUSTER", "CLUSTERED", "CODEGEN", 
			"COLLATE", "COLLATION", "COLLECTION", "COLUMN", "COLUMNS", "COMMENT", 
			"COMMIT", "COMPACT", "COMPACTIONS", "COMPENSATION", "COMPUTE", "CONCATENATE", 
			"CONDITION", "CONSTRAINT", "CONTAINS", "CONTINUE", "COST", "CREATE", 
			"CROSS", "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
			"CURRENT_USER", "DAY", "DAYS", "DAYOFYEAR", "DATA", "DATE", "DATABASE", 
			"DATABASES", "DATEADD", "DATE_ADD", "DATEDIFF", "DATE_DIFF", "DBPROPERTIES", 
			"DEC", "DECIMAL", "DECLARE", "DEFAULT", "DEFINED", "DEFINER", "DELETE", 
			"DELIMITED", "DESC", "DESCRIBE", "DETERMINISTIC", "DFS", "DIRECTORIES", 
			"DIRECTORY", "DISTINCT", "DISTRIBUTE", "DIV", "DO", "DOUBLE", "DROP", 
			"ELSE", "ELSEIF", "END", "ESCAPE", "ESCAPED", "EVOLUTION", "EXCEPT", 
			"EXCHANGE", "EXCLUDE", "EXISTS", "EXIT", "EXPLAIN", "EXPORT", "EXTEND", 
			"EXTENDED", "EXTERNAL", "EXTRACT", "FALSE", "FETCH", "FIELDS", "FILTER", 
			"FILEFORMAT", "FIRST", "FLOAT", "FOLLOWING", "FOR", "FOREIGN", "FORMAT", 
			"FORMATTED", "FOUND", "FROM", "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", 
			"GLOBAL", "GRANT", "GROUP", "GROUPING", "HANDLER", "HAVING", "BINARY_HEX", 
			"HOUR", "HOURS", "IDENTIFIER_KW", "IDENTITY", "IF", "IGNORE", "IMMEDIATE", 
			"IMPORT", "IN", "INCLUDE", "INCREMENT", "INDEX", "INDEXES", "INNER", 
			"INPATH", "INPUT", "INPUTFORMAT", "INSERT", "INTERSECT", "INTERVAL", 
			"INT", "INTEGER", "INTO", "INVOKER", "IS", "ITEMS", "ITERATE", "JOIN", 
			"JSON", "KEYS", "LANGUAGE", "LAST", "LATERAL", "LAZY", "LEADING", "LEAVE", 
			"LEFT", "LIKE", "ILIKE", "LIMIT", "LINES", "LIST", "LOAD", "LOCAL", "LOCATION", 
			"LOCK", "LOCKS", "LOGICAL", "LONG", "LOOP", "MACRO", "MAP", "MATCHED", 
			"MERGE", "MICROSECOND", "MICROSECONDS", "MILLISECOND", "MILLISECONDS", 
			"MINUTE", "MINUTES", "MODIFIES", "MONTH", "MONTHS", "MSCK", "NAME", "NAMESPACE", 
			"NAMESPACES", "NANOSECOND", "NANOSECONDS", "NATURAL", "NO", "NONE", "NOT", 
			"NULL", "NULLS", "NUMERIC", "OF", "OFFSET", "ON", "ONLY", "OPTION", "OPTIONS", 
			"OR", "ORDER", "OUT", "OUTER", "OUTPUTFORMAT", "OVER", "OVERLAPS", "OVERLAY", 
			"OVERWRITE", "PARTITION", "PARTITIONED", "PARTITIONS", "PERCENTLIT", 
			"PIVOT", "PLACING", "POSITION", "PRECEDING", "PRIMARY", "PRINCIPALS", 
			"PROPERTIES", "PURGE", "QUARTER", "QUERY", "RANGE", "READS", "REAL", 
			"RECORDREADER", "RECORDWRITER", "RECOVER", "RECURSIVE", "REDUCE", "REFERENCES", 
			"REFRESH", "RENAME", "REPAIR", "REPEAT", "REPEATABLE", "REPLACE", "RESET", 
			"RESPECT", "RESTRICT", "RETURN", "RETURNS", "REVOKE", "RIGHT", "RLIKE", 
			"ROLE", "ROLES", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "SECOND", "SECONDS", 
			"SCHEMA", "SCHEMAS", "SECURITY", "SELECT", "SEMI", "SEPARATED", "SERDE", 
			"SERDEPROPERTIES", "SESSION_USER", "SET", "SETMINUS", "SETS", "SHORT", 
			"SHOW", "SINGLE", "SKEWED", "SMALLINT", "SOME", "SORT", "SORTED", "SOURCE", 
			"SPECIFIC", "SQL", "SQLEXCEPTION", "SQLSTATE", "START", "STATISTICS", 
			"STORED", "STRATIFY", "STRING", "STRUCT", "SUBSTR", "SUBSTRING", "SYNC", 
			"SYSTEM_TIME", "SYSTEM_VERSION", "TABLE", "TABLES", "TABLESAMPLE", "TARGET", 
			"TBLPROPERTIES", "TEMPORARY", "TERMINATED", "THEN", "TIME", "TIMEDIFF", 
			"TIMESTAMP", "TIMESTAMP_LTZ", "TIMESTAMP_NTZ", "TIMESTAMPADD", "TIMESTAMPDIFF", 
			"TINYINT", "TO", "EXECUTE", "TOUCH", "TRAILING", "TRANSACTION", "TRANSACTIONS", 
			"TRANSFORM", "TRIM", "TRUE", "TRUNCATE", "TRY_CAST", "TYPE", "UNARCHIVE", 
			"UNBOUNDED", "UNCACHE", "UNION", "UNIQUE", "UNKNOWN", "UNLOCK", "UNPIVOT", 
			"UNSET", "UNTIL", "UPDATE", "USE", "USER", "USING", "VALUE", "VALUES", 
			"VARCHAR", "VAR", "VARIABLE", "VARIANT", "VERSION", "VIEW", "VIEWS", 
			"VOID", "WEEK", "WEEKS", "WHEN", "WHERE", "WHILE", "WINDOW", "WITH", 
			"WITHIN", "YEAR", "YEARS", "ZONE", "EQ", "NSEQ", "NEQ", "NEQJ", "LT", 
			"LTE", "GT", "GTE", "SHIFT_LEFT", "SHIFT_RIGHT", "SHIFT_RIGHT_UNSIGNED", 
			"PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT", "TILDE", "AMPERSAND", 
			"PIPE", "CONCAT_PIPE", "OPERATOR_PIPE", "HAT", "COLON", "DOUBLE_COLON", 
			"ARROW", "FAT_ARROW", "HENT_START", "HENT_END", "QUESTION", "STRING_LITERAL", 
			"DOUBLEQUOTED_STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", "TINYINT_LITERAL", 
			"INTEGER_VALUE", "EXPONENT_VALUE", "DECIMAL_VALUE", "FLOAT_LITERAL", 
			"DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", "IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
			"SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", "UNRECOGNIZED"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "SqlBaseParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }


	  /**
	   * When false, INTERSECT is given the greater precedence over the other set
	   * operations (UNION, EXCEPT and MINUS) as per the SQL standard.
	   */
	  public boolean legacy_setops_precedence_enabled = false;// 控制

	  /**
	   * When false, a literal with an exponent would be converted into
	   * double type rather than decimal type.
	   */
	  public boolean legacy_exponent_literal_as_decimal_enabled = false;

	  /**
	   * When true, the behavior of keywords follows ANSI SQL standard.
	   */
	  public boolean SQL_standard_keyword_behavior = false;

	  /**
	   * When true, double quoted literals are identifiers rather than STRINGs.
	   */
	  public boolean double_quoted_identifiers = false;

	public SqlBaseParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompoundOrSingleStatementContext extends ParserRuleContext {
		public SingleStatementContext singleStatement() {
			return getRuleContext(SingleStatementContext.class,0);
		}
		public SingleCompoundStatementContext singleCompoundStatement() {
			return getRuleContext(SingleCompoundStatementContext.class,0);
		}
		public CompoundOrSingleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundOrSingleStatement; }
	}

	public final CompoundOrSingleStatementContext compoundOrSingleStatement() throws RecognitionException {
		CompoundOrSingleStatementContext _localctx = new CompoundOrSingleStatementContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_compoundOrSingleStatement);
		try {
			setState(482);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
			case ADD:
			case ALTER:
			case ANALYZE:
			case CACHE:
			case CALL:
			case CLEAR:
			case COMMENT:
			case COMMIT:
			case CREATE:
			case DECLARE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DFS:
			case DROP:
			case EXPLAIN:
			case EXPORT:
			case FROM:
			case GRANT:
			case IMPORT:
			case INSERT:
			case LIST:
			case LOAD:
			case LOCK:
			case MAP:
			case MERGE:
			case MSCK:
			case REDUCE:
			case REFRESH:
			case REPAIR:
			case REPLACE:
			case RESET:
			case REVOKE:
			case ROLLBACK:
			case SELECT:
			case SET:
			case SHOW:
			case START:
			case TABLE:
			case EXECUTE:
			case TRUNCATE:
			case UNCACHE:
			case UNLOCK:
			case UPDATE:
			case USE:
			case VALUES:
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(480);
				singleStatement();
				}
				break;
			case BEGIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(481);
				singleCompoundStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleCompoundStatementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(SqlBaseParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public CompoundBodyContext compoundBody() {
			return getRuleContext(CompoundBodyContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(SqlBaseParser.SEMICOLON, 0); }
		public SingleCompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleCompoundStatement; }
	}

	public final SingleCompoundStatementContext singleCompoundStatement() throws RecognitionException {
		SingleCompoundStatementContext _localctx = new SingleCompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_singleCompoundStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(484);
			match(BEGIN);
			setState(486);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				setState(485);
				compoundBody();
				}
				break;
			}
			setState(488);
			match(END);
			setState(490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(489);
				match(SEMICOLON);
				}
			}

			setState(492);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BeginEndCompoundBlockContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(SqlBaseParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public BeginLabelContext beginLabel() {
			return getRuleContext(BeginLabelContext.class,0);
		}
		public CompoundBodyContext compoundBody() {
			return getRuleContext(CompoundBodyContext.class,0);
		}
		public EndLabelContext endLabel() {
			return getRuleContext(EndLabelContext.class,0);
		}
		public BeginEndCompoundBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginEndCompoundBlock; }
	}

	public final BeginEndCompoundBlockContext beginEndCompoundBlock() throws RecognitionException {
		BeginEndCompoundBlockContext _localctx = new BeginEndCompoundBlockContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_beginEndCompoundBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(495);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				setState(494);
				beginLabel();
				}
				break;
			}
			setState(497);
			match(BEGIN);
			setState(499);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				setState(498);
				compoundBody();
				}
				break;
			}
			setState(501);
			match(END);
			setState(503);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				setState(502);
				endLabel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompoundBodyContext extends ParserRuleContext {
		public CompoundStatementContext compoundStatement;
		public List<CompoundStatementContext> compoundStatements = new ArrayList<CompoundStatementContext>();
		public List<TerminalNode> SEMICOLON() { return getTokens(SqlBaseParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(SqlBaseParser.SEMICOLON, i);
		}
		public List<CompoundStatementContext> compoundStatement() {
			return getRuleContexts(CompoundStatementContext.class);
		}
		public CompoundStatementContext compoundStatement(int i) {
			return getRuleContext(CompoundStatementContext.class,i);
		}
		public CompoundBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundBody; }
	}

	public final CompoundBodyContext compoundBody() throws RecognitionException {
		CompoundBodyContext _localctx = new CompoundBodyContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_compoundBody);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(508); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(505);
					((CompoundBodyContext)_localctx).compoundStatement = compoundStatement();
					((CompoundBodyContext)_localctx).compoundStatements.add(((CompoundBodyContext)_localctx).compoundStatement);
					setState(506);
					match(SEMICOLON);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(510); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompoundStatementContext extends ParserRuleContext {
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public SetStatementWithOptionalVarKeywordContext setStatementWithOptionalVarKeyword() {
			return getRuleContext(SetStatementWithOptionalVarKeywordContext.class,0);
		}
		public BeginEndCompoundBlockContext beginEndCompoundBlock() {
			return getRuleContext(BeginEndCompoundBlockContext.class,0);
		}
		public DeclareConditionStatementContext declareConditionStatement() {
			return getRuleContext(DeclareConditionStatementContext.class,0);
		}
		public DeclareHandlerStatementContext declareHandlerStatement() {
			return getRuleContext(DeclareHandlerStatementContext.class,0);
		}
		public IfElseStatementContext ifElseStatement() {
			return getRuleContext(IfElseStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public WhileStatementContext whileStatement() {
			return getRuleContext(WhileStatementContext.class,0);
		}
		public RepeatStatementContext repeatStatement() {
			return getRuleContext(RepeatStatementContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public LoopStatementContext loopStatement() {
			return getRuleContext(LoopStatementContext.class,0);
		}
		public ForStatementContext forStatement() {
			return getRuleContext(ForStatementContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_compoundStatement);
		try {
			setState(525);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(512);
				statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(513);
				setStatementWithOptionalVarKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(514);
				beginEndCompoundBlock();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(515);
				declareConditionStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(516);
				declareHandlerStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(517);
				ifElseStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(518);
				caseStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(519);
				whileStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(520);
				repeatStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(521);
				leaveStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(522);
				iterateStatement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(523);
				loopStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(524);
				forStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetStatementWithOptionalVarKeywordContext extends ParserRuleContext {
		public SetStatementWithOptionalVarKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatementWithOptionalVarKeyword; }
	 
		public SetStatementWithOptionalVarKeywordContext() { }
		public void copyFrom(SetStatementWithOptionalVarKeywordContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetVariableWithOptionalKeywordContext extends SetStatementWithOptionalVarKeywordContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public AssignmentListContext assignmentList() {
			return getRuleContext(AssignmentListContext.class,0);
		}
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public MultipartIdentifierListContext multipartIdentifierList() {
			return getRuleContext(MultipartIdentifierListContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public SetVariableWithOptionalKeywordContext(SetStatementWithOptionalVarKeywordContext ctx) { copyFrom(ctx); }
	}

	public final SetStatementWithOptionalVarKeywordContext setStatementWithOptionalVarKeyword() throws RecognitionException {
		SetStatementWithOptionalVarKeywordContext _localctx = new SetStatementWithOptionalVarKeywordContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_setStatementWithOptionalVarKeyword);
		int _la;
		try {
			setState(544);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				_localctx = new SetVariableWithOptionalKeywordContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(527);
				match(SET);
				setState(529);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
				case 1:
					{
					setState(528);
					variable();
					}
					break;
				}
				setState(531);
				assignmentList();
				}
				break;
			case 2:
				_localctx = new SetVariableWithOptionalKeywordContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(532);
				match(SET);
				setState(534);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VAR || _la==VARIABLE) {
					{
					setState(533);
					variable();
					}
				}

				setState(536);
				match(LEFT_PAREN);
				setState(537);
				multipartIdentifierList();
				setState(538);
				match(RIGHT_PAREN);
				setState(539);
				match(EQ);
				setState(540);
				match(LEFT_PAREN);
				setState(541);
				query();
				setState(542);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SqlStateValueContext extends ParserRuleContext {
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public SqlStateValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStateValue; }
	}

	public final SqlStateValueContext sqlStateValue() throws RecognitionException {
		SqlStateValueContext _localctx = new SqlStateValueContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_sqlStateValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(546);
			stringLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeclareConditionStatementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(SqlBaseParser.DECLARE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode CONDITION() { return getToken(SqlBaseParser.CONDITION, 0); }
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public TerminalNode SQLSTATE() { return getToken(SqlBaseParser.SQLSTATE, 0); }
		public SqlStateValueContext sqlStateValue() {
			return getRuleContext(SqlStateValueContext.class,0);
		}
		public TerminalNode VALUE() { return getToken(SqlBaseParser.VALUE, 0); }
		public DeclareConditionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareConditionStatement; }
	}

	public final DeclareConditionStatementContext declareConditionStatement() throws RecognitionException {
		DeclareConditionStatementContext _localctx = new DeclareConditionStatementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_declareConditionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(548);
			match(DECLARE);
			setState(549);
			multipartIdentifier();
			setState(550);
			match(CONDITION);
			setState(557);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(551);
				match(FOR);
				setState(552);
				match(SQLSTATE);
				setState(554);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
				case 1:
					{
					setState(553);
					match(VALUE);
					}
					break;
				}
				setState(556);
				sqlStateValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConditionValueContext extends ParserRuleContext {
		public TerminalNode SQLSTATE() { return getToken(SqlBaseParser.SQLSTATE, 0); }
		public SqlStateValueContext sqlStateValue() {
			return getRuleContext(SqlStateValueContext.class,0);
		}
		public TerminalNode VALUE() { return getToken(SqlBaseParser.VALUE, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(SqlBaseParser.SQLEXCEPTION, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode FOUND() { return getToken(SqlBaseParser.FOUND, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ConditionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionValue; }
	}

	public final ConditionValueContext conditionValue() throws RecognitionException {
		ConditionValueContext _localctx = new ConditionValueContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_conditionValue);
		try {
			setState(568);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(559);
				match(SQLSTATE);
				setState(561);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					setState(560);
					match(VALUE);
					}
					break;
				}
				setState(563);
				sqlStateValue();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(564);
				match(SQLEXCEPTION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(565);
				match(NOT);
				setState(566);
				match(FOUND);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(567);
				multipartIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConditionValuesContext extends ParserRuleContext {
		public ConditionValueContext conditionValue;
		public List<ConditionValueContext> cvList = new ArrayList<ConditionValueContext>();
		public List<ConditionValueContext> conditionValue() {
			return getRuleContexts(ConditionValueContext.class);
		}
		public ConditionValueContext conditionValue(int i) {
			return getRuleContext(ConditionValueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ConditionValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionValues; }
	}

	public final ConditionValuesContext conditionValues() throws RecognitionException {
		ConditionValuesContext _localctx = new ConditionValuesContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_conditionValues);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(570);
			((ConditionValuesContext)_localctx).conditionValue = conditionValue();
			((ConditionValuesContext)_localctx).cvList.add(((ConditionValuesContext)_localctx).conditionValue);
			setState(575);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(571);
					match(COMMA);
					setState(572);
					((ConditionValuesContext)_localctx).conditionValue = conditionValue();
					((ConditionValuesContext)_localctx).cvList.add(((ConditionValuesContext)_localctx).conditionValue);
					}
					} 
				}
				setState(577);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,15,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeclareHandlerStatementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(SqlBaseParser.DECLARE, 0); }
		public TerminalNode HANDLER() { return getToken(SqlBaseParser.HANDLER, 0); }
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public ConditionValuesContext conditionValues() {
			return getRuleContext(ConditionValuesContext.class,0);
		}
		public TerminalNode CONTINUE() { return getToken(SqlBaseParser.CONTINUE, 0); }
		public TerminalNode EXIT() { return getToken(SqlBaseParser.EXIT, 0); }
		public BeginEndCompoundBlockContext beginEndCompoundBlock() {
			return getRuleContext(BeginEndCompoundBlockContext.class,0);
		}
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public SetStatementWithOptionalVarKeywordContext setStatementWithOptionalVarKeyword() {
			return getRuleContext(SetStatementWithOptionalVarKeywordContext.class,0);
		}
		public DeclareHandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareHandlerStatement; }
	}

	public final DeclareHandlerStatementContext declareHandlerStatement() throws RecognitionException {
		DeclareHandlerStatementContext _localctx = new DeclareHandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_declareHandlerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(578);
			match(DECLARE);
			setState(579);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(580);
			match(HANDLER);
			setState(581);
			match(FOR);
			setState(582);
			conditionValues();
			setState(586);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				{
				setState(583);
				beginEndCompoundBlock();
				}
				break;
			case 2:
				{
				setState(584);
				statement();
				}
				break;
			case 3:
				{
				setState(585);
				setStatementWithOptionalVarKeyword();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhileStatementContext extends ParserRuleContext {
		public List<TerminalNode> WHILE() { return getTokens(SqlBaseParser.WHILE); }
		public TerminalNode WHILE(int i) {
			return getToken(SqlBaseParser.WHILE, i);
		}
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode DO() { return getToken(SqlBaseParser.DO, 0); }
		public CompoundBodyContext compoundBody() {
			return getRuleContext(CompoundBodyContext.class,0);
		}
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public BeginLabelContext beginLabel() {
			return getRuleContext(BeginLabelContext.class,0);
		}
		public EndLabelContext endLabel() {
			return getRuleContext(EndLabelContext.class,0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileStatement; }
	}

	public final WhileStatementContext whileStatement() throws RecognitionException {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_whileStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(589);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				setState(588);
				beginLabel();
				}
				break;
			}
			setState(591);
			match(WHILE);
			setState(592);
			booleanExpression(0);
			setState(593);
			match(DO);
			setState(594);
			compoundBody();
			setState(595);
			match(END);
			setState(596);
			match(WHILE);
			setState(598);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				setState(597);
				endLabel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IfElseStatementContext extends ParserRuleContext {
		public CompoundBodyContext compoundBody;
		public List<CompoundBodyContext> conditionalBodies = new ArrayList<CompoundBodyContext>();
		public CompoundBodyContext elseBody;
		public List<TerminalNode> IF() { return getTokens(SqlBaseParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(SqlBaseParser.IF, i);
		}
		public List<BooleanExpressionContext> booleanExpression() {
			return getRuleContexts(BooleanExpressionContext.class);
		}
		public BooleanExpressionContext booleanExpression(int i) {
			return getRuleContext(BooleanExpressionContext.class,i);
		}
		public List<TerminalNode> THEN() { return getTokens(SqlBaseParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(SqlBaseParser.THEN, i);
		}
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public List<CompoundBodyContext> compoundBody() {
			return getRuleContexts(CompoundBodyContext.class);
		}
		public CompoundBodyContext compoundBody(int i) {
			return getRuleContext(CompoundBodyContext.class,i);
		}
		public List<TerminalNode> ELSEIF() { return getTokens(SqlBaseParser.ELSEIF); }
		public TerminalNode ELSEIF(int i) {
			return getToken(SqlBaseParser.ELSEIF, i);
		}
		public TerminalNode ELSE() { return getToken(SqlBaseParser.ELSE, 0); }
		public IfElseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifElseStatement; }
	}

	public final IfElseStatementContext ifElseStatement() throws RecognitionException {
		IfElseStatementContext _localctx = new IfElseStatementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_ifElseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(600);
			match(IF);
			setState(601);
			booleanExpression(0);
			setState(602);
			match(THEN);
			setState(603);
			((IfElseStatementContext)_localctx).compoundBody = compoundBody();
			((IfElseStatementContext)_localctx).conditionalBodies.add(((IfElseStatementContext)_localctx).compoundBody);
			setState(611);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF) {
				{
				{
				setState(604);
				match(ELSEIF);
				setState(605);
				booleanExpression(0);
				setState(606);
				match(THEN);
				setState(607);
				((IfElseStatementContext)_localctx).compoundBody = compoundBody();
				((IfElseStatementContext)_localctx).conditionalBodies.add(((IfElseStatementContext)_localctx).compoundBody);
				}
				}
				setState(613);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(616);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(614);
				match(ELSE);
				setState(615);
				((IfElseStatementContext)_localctx).elseBody = compoundBody();
				}
			}

			setState(618);
			match(END);
			setState(619);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RepeatStatementContext extends ParserRuleContext {
		public List<TerminalNode> REPEAT() { return getTokens(SqlBaseParser.REPEAT); }
		public TerminalNode REPEAT(int i) {
			return getToken(SqlBaseParser.REPEAT, i);
		}
		public CompoundBodyContext compoundBody() {
			return getRuleContext(CompoundBodyContext.class,0);
		}
		public TerminalNode UNTIL() { return getToken(SqlBaseParser.UNTIL, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public BeginLabelContext beginLabel() {
			return getRuleContext(BeginLabelContext.class,0);
		}
		public EndLabelContext endLabel() {
			return getRuleContext(EndLabelContext.class,0);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatStatement; }
	}

	public final RepeatStatementContext repeatStatement() throws RecognitionException {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_repeatStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(622);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				setState(621);
				beginLabel();
				}
				break;
			}
			setState(624);
			match(REPEAT);
			setState(625);
			compoundBody();
			setState(626);
			match(UNTIL);
			setState(627);
			booleanExpression(0);
			setState(628);
			match(END);
			setState(629);
			match(REPEAT);
			setState(631);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				setState(630);
				endLabel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE() { return getToken(SqlBaseParser.LEAVE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(633);
			match(LEAVE);
			setState(634);
			multipartIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(SqlBaseParser.ITERATE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(636);
			match(ITERATE);
			setState(637);
			multipartIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CaseStatementContext extends ParserRuleContext {
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
	 
		public CaseStatementContext() { }
		public void copyFrom(CaseStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleCaseStatementContext extends CaseStatementContext {
		public ExpressionContext caseVariable;
		public ExpressionContext expression;
		public List<ExpressionContext> conditionExpressions = new ArrayList<ExpressionContext>();
		public CompoundBodyContext compoundBody;
		public List<CompoundBodyContext> conditionalBodies = new ArrayList<CompoundBodyContext>();
		public CompoundBodyContext elseBody;
		public List<TerminalNode> CASE() { return getTokens(SqlBaseParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(SqlBaseParser.CASE, i);
		}
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> WHEN() { return getTokens(SqlBaseParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(SqlBaseParser.WHEN, i);
		}
		public List<TerminalNode> THEN() { return getTokens(SqlBaseParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(SqlBaseParser.THEN, i);
		}
		public TerminalNode ELSE() { return getToken(SqlBaseParser.ELSE, 0); }
		public List<CompoundBodyContext> compoundBody() {
			return getRuleContexts(CompoundBodyContext.class);
		}
		public CompoundBodyContext compoundBody(int i) {
			return getRuleContext(CompoundBodyContext.class,i);
		}
		public SimpleCaseStatementContext(CaseStatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SearchedCaseStatementContext extends CaseStatementContext {
		public BooleanExpressionContext booleanExpression;
		public List<BooleanExpressionContext> conditions = new ArrayList<BooleanExpressionContext>();
		public CompoundBodyContext compoundBody;
		public List<CompoundBodyContext> conditionalBodies = new ArrayList<CompoundBodyContext>();
		public CompoundBodyContext elseBody;
		public List<TerminalNode> CASE() { return getTokens(SqlBaseParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(SqlBaseParser.CASE, i);
		}
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public List<TerminalNode> WHEN() { return getTokens(SqlBaseParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(SqlBaseParser.WHEN, i);
		}
		public List<TerminalNode> THEN() { return getTokens(SqlBaseParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(SqlBaseParser.THEN, i);
		}
		public TerminalNode ELSE() { return getToken(SqlBaseParser.ELSE, 0); }
		public List<BooleanExpressionContext> booleanExpression() {
			return getRuleContexts(BooleanExpressionContext.class);
		}
		public BooleanExpressionContext booleanExpression(int i) {
			return getRuleContext(BooleanExpressionContext.class,i);
		}
		public List<CompoundBodyContext> compoundBody() {
			return getRuleContexts(CompoundBodyContext.class);
		}
		public CompoundBodyContext compoundBody(int i) {
			return getRuleContext(CompoundBodyContext.class,i);
		}
		public SearchedCaseStatementContext(CaseStatementContext ctx) { copyFrom(ctx); }
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_caseStatement);
		int _la;
		try {
			setState(674);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				_localctx = new SearchedCaseStatementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(639);
				match(CASE);
				setState(645); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(640);
					match(WHEN);
					setState(641);
					((SearchedCaseStatementContext)_localctx).booleanExpression = booleanExpression(0);
					((SearchedCaseStatementContext)_localctx).conditions.add(((SearchedCaseStatementContext)_localctx).booleanExpression);
					setState(642);
					match(THEN);
					setState(643);
					((SearchedCaseStatementContext)_localctx).compoundBody = compoundBody();
					((SearchedCaseStatementContext)_localctx).conditionalBodies.add(((SearchedCaseStatementContext)_localctx).compoundBody);
					}
					}
					setState(647); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(649);
					match(ELSE);
					setState(650);
					((SearchedCaseStatementContext)_localctx).elseBody = compoundBody();
					}
				}

				setState(653);
				match(END);
				setState(654);
				match(CASE);
				}
				break;
			case 2:
				_localctx = new SimpleCaseStatementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(656);
				match(CASE);
				setState(657);
				((SimpleCaseStatementContext)_localctx).caseVariable = expression();
				setState(663); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(658);
					match(WHEN);
					setState(659);
					((SimpleCaseStatementContext)_localctx).expression = expression();
					((SimpleCaseStatementContext)_localctx).conditionExpressions.add(((SimpleCaseStatementContext)_localctx).expression);
					setState(660);
					match(THEN);
					setState(661);
					((SimpleCaseStatementContext)_localctx).compoundBody = compoundBody();
					((SimpleCaseStatementContext)_localctx).conditionalBodies.add(((SimpleCaseStatementContext)_localctx).compoundBody);
					}
					}
					setState(665); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(669);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(667);
					match(ELSE);
					setState(668);
					((SimpleCaseStatementContext)_localctx).elseBody = compoundBody();
					}
				}

				setState(671);
				match(END);
				setState(672);
				match(CASE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LoopStatementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(SqlBaseParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(SqlBaseParser.LOOP, i);
		}
		public CompoundBodyContext compoundBody() {
			return getRuleContext(CompoundBodyContext.class,0);
		}
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public BeginLabelContext beginLabel() {
			return getRuleContext(BeginLabelContext.class,0);
		}
		public EndLabelContext endLabel() {
			return getRuleContext(EndLabelContext.class,0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopStatement; }
	}

	public final LoopStatementContext loopStatement() throws RecognitionException {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_loopStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(677);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				setState(676);
				beginLabel();
				}
				break;
			}
			setState(679);
			match(LOOP);
			setState(680);
			compoundBody();
			setState(681);
			match(END);
			setState(682);
			match(LOOP);
			setState(684);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				setState(683);
				endLabel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForStatementContext extends ParserRuleContext {
		public List<TerminalNode> FOR() { return getTokens(SqlBaseParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(SqlBaseParser.FOR, i);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode DO() { return getToken(SqlBaseParser.DO, 0); }
		public CompoundBodyContext compoundBody() {
			return getRuleContext(CompoundBodyContext.class,0);
		}
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public BeginLabelContext beginLabel() {
			return getRuleContext(BeginLabelContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public EndLabelContext endLabel() {
			return getRuleContext(EndLabelContext.class,0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forStatement; }
	}

	public final ForStatementContext forStatement() throws RecognitionException {
		ForStatementContext _localctx = new ForStatementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_forStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(687);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				setState(686);
				beginLabel();
				}
				break;
			}
			setState(689);
			match(FOR);
			setState(693);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				setState(690);
				multipartIdentifier();
				setState(691);
				match(AS);
				}
				break;
			}
			setState(695);
			query();
			setState(696);
			match(DO);
			setState(697);
			compoundBody();
			setState(698);
			match(END);
			setState(699);
			match(FOR);
			setState(701);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				setState(700);
				endLabel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleStatementContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public SetResetStatementContext setResetStatement() {
			return getRuleContext(SetResetStatementContext.class,0);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(SqlBaseParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(SqlBaseParser.SEMICOLON, i);
		}
		public SingleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleStatement; }
	}

	public final SingleStatementContext singleStatement() throws RecognitionException {
		SingleStatementContext _localctx = new SingleStatementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_singleStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				setState(703);
				statement();
				}
				break;
			case 2:
				{
				setState(704);
				setResetStatement();
				}
				break;
			}
			setState(710);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				setState(707);
				match(SEMICOLON);
				}
				}
				setState(712);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(713);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BeginLabelContext extends ParserRuleContext {
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode COLON() { return getToken(SqlBaseParser.COLON, 0); }
		public BeginLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginLabel; }
	}

	public final BeginLabelContext beginLabel() throws RecognitionException {
		BeginLabelContext _localctx = new BeginLabelContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_beginLabel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(715);
			multipartIdentifier();
			setState(716);
			match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EndLabelContext extends ParserRuleContext {
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public EndLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endLabel; }
	}

	public final EndLabelContext endLabel() throws RecognitionException {
		EndLabelContext _localctx = new EndLabelContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_endLabel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(718);
			multipartIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleExpressionContext extends ParserRuleContext {
		public NamedExpressionContext namedExpression() {
			return getRuleContext(NamedExpressionContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleExpression; }
	}

	public final SingleExpressionContext singleExpression() throws RecognitionException {
		SingleExpressionContext _localctx = new SingleExpressionContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_singleExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(720);
			namedExpression();
			setState(721);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleTableIdentifierContext extends ParserRuleContext {
		public TableIdentifierContext tableIdentifier() {
			return getRuleContext(TableIdentifierContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleTableIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTableIdentifier; }
	}

	public final SingleTableIdentifierContext singleTableIdentifier() throws RecognitionException {
		SingleTableIdentifierContext _localctx = new SingleTableIdentifierContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_singleTableIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(723);
			tableIdentifier();
			setState(724);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleMultipartIdentifierContext extends ParserRuleContext {
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleMultipartIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleMultipartIdentifier; }
	}

	public final SingleMultipartIdentifierContext singleMultipartIdentifier() throws RecognitionException {
		SingleMultipartIdentifierContext _localctx = new SingleMultipartIdentifierContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_singleMultipartIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(726);
			multipartIdentifier();
			setState(727);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleFunctionIdentifierContext extends ParserRuleContext {
		public FunctionIdentifierContext functionIdentifier() {
			return getRuleContext(FunctionIdentifierContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleFunctionIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleFunctionIdentifier; }
	}

	public final SingleFunctionIdentifierContext singleFunctionIdentifier() throws RecognitionException {
		SingleFunctionIdentifierContext _localctx = new SingleFunctionIdentifierContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_singleFunctionIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(729);
			functionIdentifier();
			setState(730);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleDataTypeContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleDataType; }
	}

	public final SingleDataTypeContext singleDataType() throws RecognitionException {
		SingleDataTypeContext _localctx = new SingleDataTypeContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_singleDataType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(732);
			dataType();
			setState(733);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleTableSchemaContext extends ParserRuleContext {
		public ColTypeListContext colTypeList() {
			return getRuleContext(ColTypeListContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleTableSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTableSchema; }
	}

	public final SingleTableSchemaContext singleTableSchema() throws RecognitionException {
		SingleTableSchemaContext _localctx = new SingleTableSchemaContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_singleTableSchema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(735);
			colTypeList();
			setState(736);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StatementContext extends ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
	 
		public StatementContext() { }
		public void copyFrom(StatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ExplainContext extends StatementContext {
		public TerminalNode EXPLAIN() { return getToken(SqlBaseParser.EXPLAIN, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public SetResetStatementContext setResetStatement() {
			return getRuleContext(SetResetStatementContext.class,0);
		}
		public TerminalNode LOGICAL() { return getToken(SqlBaseParser.LOGICAL, 0); }
		public TerminalNode FORMATTED() { return getToken(SqlBaseParser.FORMATTED, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public TerminalNode CODEGEN() { return getToken(SqlBaseParser.CODEGEN, 0); }
		public TerminalNode COST() { return getToken(SqlBaseParser.COST, 0); }
		public ExplainContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterViewQueryContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public AlterViewQueryContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UseContext extends StatementContext {
		public TerminalNode USE() { return getToken(SqlBaseParser.USE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public UseContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DropNamespaceContext extends StatementContext {
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode RESTRICT() { return getToken(SqlBaseParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(SqlBaseParser.CASCADE, 0); }
		public DropNamespaceContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CreateTempViewUsingContext extends StatementContext {
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public TableIdentifierContext tableIdentifier() {
			return getRuleContext(TableIdentifierContext.class,0);
		}
		public TableProviderContext tableProvider() {
			return getRuleContext(TableProviderContext.class,0);
		}
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode GLOBAL() { return getToken(SqlBaseParser.GLOBAL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ColTypeListContext colTypeList() {
			return getRuleContext(ColTypeListContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public CreateTempViewUsingContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RenameTableContext extends StatementContext {
		public IdentifierReferenceContext from;
		public MultipartIdentifierContext to;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode RENAME() { return getToken(SqlBaseParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public RenameTableContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FailNativeCommandContext extends StatementContext {
		public UnsupportedHiveNativeCommandsContext unsupportedHiveNativeCommands() {
			return getRuleContext(UnsupportedHiveNativeCommandsContext.class,0);
		}
		public FailNativeCommandContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetCatalogContext extends StatementContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode CATALOG() { return getToken(SqlBaseParser.CATALOG, 0); }
		public CatalogIdentifierReferenceContext catalogIdentifierReference() {
			return getRuleContext(CatalogIdentifierReferenceContext.class,0);
		}
		public SetCatalogContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ClearCacheContext extends StatementContext {
		public TerminalNode CLEAR() { return getToken(SqlBaseParser.CLEAR, 0); }
		public TerminalNode CACHE() { return getToken(SqlBaseParser.CACHE, 0); }
		public ClearCacheContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DropViewContext extends StatementContext {
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public DropViewContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowTablesContext extends StatementContext {
		public StringLitContext pattern;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode TABLES() { return getToken(SqlBaseParser.TABLES, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public ShowTablesContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RecoverPartitionsContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode RECOVER() { return getToken(SqlBaseParser.RECOVER, 0); }
		public TerminalNode PARTITIONS() { return getToken(SqlBaseParser.PARTITIONS, 0); }
		public RecoverPartitionsContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DropIndexContext extends StatementContext {
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(SqlBaseParser.INDEX, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public DropIndexContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowCatalogsContext extends StatementContext {
		public StringLitContext pattern;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode CATALOGS() { return getToken(SqlBaseParser.CATALOGS, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public ShowCatalogsContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowCurrentNamespaceContext extends StatementContext {
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode CURRENT() { return getToken(SqlBaseParser.CURRENT, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public ShowCurrentNamespaceContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RenameTablePartitionContext extends StatementContext {
		public PartitionSpecContext from;
		public PartitionSpecContext to;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(SqlBaseParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public List<PartitionSpecContext> partitionSpec() {
			return getRuleContexts(PartitionSpecContext.class);
		}
		public PartitionSpecContext partitionSpec(int i) {
			return getRuleContext(PartitionSpecContext.class,i);
		}
		public RenameTablePartitionContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RepairTableContext extends StatementContext {
		public Token option;
		public TerminalNode REPAIR() { return getToken(SqlBaseParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode MSCK() { return getToken(SqlBaseParser.MSCK, 0); }
		public TerminalNode PARTITIONS() { return getToken(SqlBaseParser.PARTITIONS, 0); }
		public TerminalNode ADD() { return getToken(SqlBaseParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode SYNC() { return getToken(SqlBaseParser.SYNC, 0); }
		public RepairTableContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RefreshResourceContext extends StatementContext {
		public TerminalNode REFRESH() { return getToken(SqlBaseParser.REFRESH, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public RefreshResourceContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterViewSchemaBindingContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public SchemaBindingContext schemaBinding() {
			return getRuleContext(SchemaBindingContext.class,0);
		}
		public AlterViewSchemaBindingContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CreateVariableContext extends StatementContext {
		public TerminalNode DECLARE() { return getToken(SqlBaseParser.DECLARE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public VariableDefaultExpressionContext variableDefaultExpression() {
			return getRuleContext(VariableDefaultExpressionContext.class,0);
		}
		public CreateVariableContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowCreateTableContext extends StatementContext {
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode SERDE() { return getToken(SqlBaseParser.SERDE, 0); }
		public ShowCreateTableContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowNamespacesContext extends StatementContext {
		public StringLitContext pattern;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public NamespacesContext namespaces() {
			return getRuleContext(NamespacesContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public ShowNamespacesContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowColumnsContext extends StatementContext {
		public IdentifierReferenceContext table;
		public MultipartIdentifierContext ns;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public List<TerminalNode> FROM() { return getTokens(SqlBaseParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(SqlBaseParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(SqlBaseParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(SqlBaseParser.IN, i);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ShowColumnsContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ReplaceTableContext extends StatementContext {
		public ReplaceTableHeaderContext replaceTableHeader() {
			return getRuleContext(ReplaceTableHeaderContext.class,0);
		}
		public CreateTableClausesContext createTableClauses() {
			return getRuleContext(CreateTableClausesContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ColDefinitionListContext colDefinitionList() {
			return getRuleContext(ColDefinitionListContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TableProviderContext tableProvider() {
			return getRuleContext(TableProviderContext.class,0);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public ReplaceTableContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AnalyzeTablesContext extends StatementContext {
		public TerminalNode ANALYZE() { return getToken(SqlBaseParser.ANALYZE, 0); }
		public TerminalNode TABLES() { return getToken(SqlBaseParser.TABLES, 0); }
		public TerminalNode COMPUTE() { return getToken(SqlBaseParser.COMPUTE, 0); }
		public TerminalNode STATISTICS() { return getToken(SqlBaseParser.STATISTICS, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public AnalyzeTablesContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UnsetNamespacePropertiesContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SqlBaseParser.UNSET, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public TerminalNode DBPROPERTIES() { return getToken(SqlBaseParser.DBPROPERTIES, 0); }
		public TerminalNode PROPERTIES() { return getToken(SqlBaseParser.PROPERTIES, 0); }
		public UnsetNamespacePropertiesContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AddTablePartitionContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SqlBaseParser.ADD, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public List<PartitionSpecLocationContext> partitionSpecLocation() {
			return getRuleContexts(PartitionSpecLocationContext.class);
		}
		public PartitionSpecLocationContext partitionSpecLocation(int i) {
			return getRuleContext(PartitionSpecLocationContext.class,i);
		}
		public AddTablePartitionContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetNamespaceLocationContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public LocationSpecContext locationSpec() {
			return getRuleContext(LocationSpecContext.class,0);
		}
		public SetNamespaceLocationContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RefreshTableContext extends StatementContext {
		public TerminalNode REFRESH() { return getToken(SqlBaseParser.REFRESH, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public RefreshTableContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterTableCollationContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public CollationSpecContext collationSpec() {
			return getRuleContext(CollationSpecContext.class,0);
		}
		public AlterTableCollationContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetNamespacePropertiesContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public TerminalNode DBPROPERTIES() { return getToken(SqlBaseParser.DBPROPERTIES, 0); }
		public TerminalNode PROPERTIES() { return getToken(SqlBaseParser.PROPERTIES, 0); }
		public SetNamespacePropertiesContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ManageResourceContext extends StatementContext {
		public Token op;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SqlBaseParser.ADD, 0); }
		public TerminalNode LIST() { return getToken(SqlBaseParser.LIST, 0); }
		public ManageResourceContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AnalyzeContext extends StatementContext {
		public TerminalNode ANALYZE() { return getToken(SqlBaseParser.ANALYZE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode COMPUTE() { return getToken(SqlBaseParser.COMPUTE, 0); }
		public TerminalNode STATISTICS() { return getToken(SqlBaseParser.STATISTICS, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public IdentifierSeqContext identifierSeq() {
			return getRuleContext(IdentifierSeqContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SqlBaseParser.ALL, 0); }
		public AnalyzeContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CreateFunctionContext extends StatementContext {
		public StringLitContext className;
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public List<ResourceContext> resource() {
			return getRuleContexts(ResourceContext.class);
		}
		public ResourceContext resource(int i) {
			return getRuleContext(ResourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public CreateFunctionContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class HiveReplaceColumnsContext extends StatementContext {
		public IdentifierReferenceContext table;
		public QualifiedColTypeWithPositionListContext columns;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public QualifiedColTypeWithPositionListContext qualifiedColTypeWithPositionList() {
			return getRuleContext(QualifiedColTypeWithPositionListContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public HiveReplaceColumnsContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CommentNamespaceContext extends StatementContext {
		public TerminalNode COMMENT() { return getToken(SqlBaseParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode IS() { return getToken(SqlBaseParser.IS, 0); }
		public CommentContext comment() {
			return getRuleContext(CommentContext.class,0);
		}
		public CommentNamespaceContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableContext extends StatementContext {
		public CreateTableHeaderContext createTableHeader() {
			return getRuleContext(CreateTableHeaderContext.class,0);
		}
		public CreateTableClausesContext createTableClauses() {
			return getRuleContext(CreateTableClausesContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ColDefinitionListContext colDefinitionList() {
			return getRuleContext(ColDefinitionListContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TableProviderContext tableProvider() {
			return getRuleContext(TableProviderContext.class,0);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public CreateTableContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DmlStatementContext extends StatementContext {
		public DmlStatementNoWithContext dmlStatementNoWith() {
			return getRuleContext(DmlStatementNoWithContext.class,0);
		}
		public CtesContext ctes() {
			return getRuleContext(CtesContext.class,0);
		}
		public DmlStatementContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableLikeContext extends StatementContext {
		public TableIdentifierContext target;
		public TableIdentifierContext source;
		public PropertyListContext tableProps;
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public List<TableIdentifierContext> tableIdentifier() {
			return getRuleContexts(TableIdentifierContext.class);
		}
		public TableIdentifierContext tableIdentifier(int i) {
			return getRuleContext(TableIdentifierContext.class,i);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public List<TableProviderContext> tableProvider() {
			return getRuleContexts(TableProviderContext.class);
		}
		public TableProviderContext tableProvider(int i) {
			return getRuleContext(TableProviderContext.class,i);
		}
		public List<RowFormatContext> rowFormat() {
			return getRuleContexts(RowFormatContext.class);
		}
		public RowFormatContext rowFormat(int i) {
			return getRuleContext(RowFormatContext.class,i);
		}
		public List<CreateFileFormatContext> createFileFormat() {
			return getRuleContexts(CreateFileFormatContext.class);
		}
		public CreateFileFormatContext createFileFormat(int i) {
			return getRuleContext(CreateFileFormatContext.class,i);
		}
		public List<LocationSpecContext> locationSpec() {
			return getRuleContexts(LocationSpecContext.class);
		}
		public LocationSpecContext locationSpec(int i) {
			return getRuleContext(LocationSpecContext.class,i);
		}
		public List<TerminalNode> TBLPROPERTIES() { return getTokens(SqlBaseParser.TBLPROPERTIES); }
		public TerminalNode TBLPROPERTIES(int i) {
			return getToken(SqlBaseParser.TBLPROPERTIES, i);
		}
		public List<PropertyListContext> propertyList() {
			return getRuleContexts(PropertyListContext.class);
		}
		public PropertyListContext propertyList(int i) {
			return getRuleContext(PropertyListContext.class,i);
		}
		public CreateTableLikeContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UncacheTableContext extends StatementContext {
		public TerminalNode UNCACHE() { return getToken(SqlBaseParser.UNCACHE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public UncacheTableContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DropFunctionContext extends StatementContext {
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public DropFunctionContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DescribeRelationContext extends StatementContext {
		public Token option;
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SqlBaseParser.DESCRIBE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public DescribeColNameContext describeColName() {
			return getRuleContext(DescribeColNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode JSON() { return getToken(SqlBaseParser.JSON, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public TerminalNode FORMATTED() { return getToken(SqlBaseParser.FORMATTED, 0); }
		public DescribeRelationContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LoadDataContext extends StatementContext {
		public StringLitContext path;
		public TerminalNode LOAD() { return getToken(SqlBaseParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(SqlBaseParser.DATA, 0); }
		public TerminalNode INPATH() { return getToken(SqlBaseParser.INPATH, 0); }
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(SqlBaseParser.LOCAL, 0); }
		public TerminalNode OVERWRITE() { return getToken(SqlBaseParser.OVERWRITE, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public LoadDataContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowPartitionsContext extends StatementContext {
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode PARTITIONS() { return getToken(SqlBaseParser.PARTITIONS, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public ShowPartitionsContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DescribeFunctionContext extends StatementContext {
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public DescribeFuncNameContext describeFuncName() {
			return getRuleContext(DescribeFuncNameContext.class,0);
		}
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SqlBaseParser.DESCRIBE, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public DescribeFunctionContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RenameTableColumnContext extends StatementContext {
		public IdentifierReferenceContext table;
		public MultipartIdentifierContext from;
		public ErrorCapturingIdentifierContext to;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode RENAME() { return getToken(SqlBaseParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(SqlBaseParser.COLUMN, 0); }
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public RenameTableColumnContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CreateUserDefinedFunctionContext extends StatementContext {
		public ColDefinitionListContext parameters;
		public ColTypeListContext returnParams;
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public RoutineCharacteristicsContext routineCharacteristics() {
			return getRuleContext(RoutineCharacteristicsContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(SqlBaseParser.RETURN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode RETURNS() { return getToken(SqlBaseParser.RETURNS, 0); }
		public ColDefinitionListContext colDefinitionList() {
			return getRuleContext(ColDefinitionListContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public ColTypeListContext colTypeList() {
			return getRuleContext(ColTypeListContext.class,0);
		}
		public CreateUserDefinedFunctionContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class StatementDefaultContext extends StatementContext {
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public StatementDefaultContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterClusterByContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public ClusterBySpecContext clusterBySpec() {
			return getRuleContext(ClusterBySpecContext.class,0);
		}
		public TerminalNode CLUSTER() { return getToken(SqlBaseParser.CLUSTER, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode NONE() { return getToken(SqlBaseParser.NONE, 0); }
		public AlterClusterByContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class HiveChangeColumnContext extends StatementContext {
		public IdentifierReferenceContext table;
		public MultipartIdentifierContext colName;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode CHANGE() { return getToken(SqlBaseParser.CHANGE, 0); }
		public ColTypeContext colType() {
			return getRuleContext(ColTypeContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(SqlBaseParser.COLUMN, 0); }
		public ColPositionContext colPosition() {
			return getRuleContext(ColPositionContext.class,0);
		}
		public HiveChangeColumnContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DescribeQueryContext extends StatementContext {
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SqlBaseParser.DESCRIBE, 0); }
		public TerminalNode QUERY() { return getToken(SqlBaseParser.QUERY, 0); }
		public DescribeQueryContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TruncateTableContext extends StatementContext {
		public TerminalNode TRUNCATE() { return getToken(SqlBaseParser.TRUNCATE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TruncateTableContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetTableSerDeContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode SERDE() { return getToken(SqlBaseParser.SERDE, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode SERDEPROPERTIES() { return getToken(SqlBaseParser.SERDEPROPERTIES, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public SetTableSerDeContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CreateViewContext extends StatementContext {
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public IdentifierCommentListContext identifierCommentList() {
			return getRuleContext(IdentifierCommentListContext.class,0);
		}
		public List<CommentSpecContext> commentSpec() {
			return getRuleContexts(CommentSpecContext.class);
		}
		public CommentSpecContext commentSpec(int i) {
			return getRuleContext(CommentSpecContext.class,i);
		}
		public List<SchemaBindingContext> schemaBinding() {
			return getRuleContexts(SchemaBindingContext.class);
		}
		public SchemaBindingContext schemaBinding(int i) {
			return getRuleContext(SchemaBindingContext.class,i);
		}
		public List<CollationSpecContext> collationSpec() {
			return getRuleContexts(CollationSpecContext.class);
		}
		public CollationSpecContext collationSpec(int i) {
			return getRuleContext(CollationSpecContext.class,i);
		}
		public List<TerminalNode> PARTITIONED() { return getTokens(SqlBaseParser.PARTITIONED); }
		public TerminalNode PARTITIONED(int i) {
			return getToken(SqlBaseParser.PARTITIONED, i);
		}
		public List<TerminalNode> ON() { return getTokens(SqlBaseParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(SqlBaseParser.ON, i);
		}
		public List<IdentifierListContext> identifierList() {
			return getRuleContexts(IdentifierListContext.class);
		}
		public IdentifierListContext identifierList(int i) {
			return getRuleContext(IdentifierListContext.class,i);
		}
		public List<TerminalNode> TBLPROPERTIES() { return getTokens(SqlBaseParser.TBLPROPERTIES); }
		public TerminalNode TBLPROPERTIES(int i) {
			return getToken(SqlBaseParser.TBLPROPERTIES, i);
		}
		public List<PropertyListContext> propertyList() {
			return getRuleContexts(PropertyListContext.class);
		}
		public PropertyListContext propertyList(int i) {
			return getRuleContext(PropertyListContext.class,i);
		}
		public TerminalNode GLOBAL() { return getToken(SqlBaseParser.GLOBAL, 0); }
		public CreateViewContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DropTablePartitionsContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public List<PartitionSpecContext> partitionSpec() {
			return getRuleContexts(PartitionSpecContext.class);
		}
		public PartitionSpecContext partitionSpec(int i) {
			return getRuleContext(PartitionSpecContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TerminalNode PURGE() { return getToken(SqlBaseParser.PURGE, 0); }
		public DropTablePartitionsContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DropTableContext extends StatementContext {
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode PURGE() { return getToken(SqlBaseParser.PURGE, 0); }
		public DropTableContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowTableExtendedContext extends StatementContext {
		public IdentifierReferenceContext ns;
		public StringLitContext pattern;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public ShowTableExtendedContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DescribeNamespaceContext extends StatementContext {
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SqlBaseParser.DESCRIBE, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public DescribeNamespaceContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AlterTableAlterColumnContext extends StatementContext {
		public IdentifierReferenceContext table;
		public AlterColumnSpecListContext columns;
		public List<TerminalNode> ALTER() { return getTokens(SqlBaseParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(SqlBaseParser.ALTER, i);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode CHANGE() { return getToken(SqlBaseParser.CHANGE, 0); }
		public AlterColumnSpecListContext alterColumnSpecList() {
			return getRuleContext(AlterColumnSpecListContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(SqlBaseParser.COLUMN, 0); }
		public AlterTableAlterColumnContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RefreshFunctionContext extends StatementContext {
		public TerminalNode REFRESH() { return getToken(SqlBaseParser.REFRESH, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public RefreshFunctionContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CommentTableContext extends StatementContext {
		public TerminalNode COMMENT() { return getToken(SqlBaseParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode IS() { return getToken(SqlBaseParser.IS, 0); }
		public CommentContext comment() {
			return getRuleContext(CommentContext.class,0);
		}
		public CommentTableContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CreateIndexContext extends StatementContext {
		public IdentifierContext indexType;
		public MultipartIdentifierPropertyListContext columns;
		public PropertyListContext options;
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(SqlBaseParser.INDEX, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public MultipartIdentifierPropertyListContext multipartIdentifierPropertyList() {
			return getRuleContext(MultipartIdentifierPropertyListContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public CreateIndexContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UseNamespaceContext extends StatementContext {
		public TerminalNode USE() { return getToken(SqlBaseParser.USE, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public UseNamespaceContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DropVariableContext extends StatementContext {
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public DropVariableContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CreateNamespaceContext extends StatementContext {
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public NamespaceContext namespace() {
			return getRuleContext(NamespaceContext.class,0);
		}
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public List<CommentSpecContext> commentSpec() {
			return getRuleContexts(CommentSpecContext.class);
		}
		public CommentSpecContext commentSpec(int i) {
			return getRuleContext(CommentSpecContext.class,i);
		}
		public List<LocationSpecContext> locationSpec() {
			return getRuleContexts(LocationSpecContext.class);
		}
		public LocationSpecContext locationSpec(int i) {
			return getRuleContext(LocationSpecContext.class,i);
		}
		public List<TerminalNode> WITH() { return getTokens(SqlBaseParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(SqlBaseParser.WITH, i);
		}
		public List<PropertyListContext> propertyList() {
			return getRuleContexts(PropertyListContext.class);
		}
		public PropertyListContext propertyList(int i) {
			return getRuleContext(PropertyListContext.class,i);
		}
		public List<TerminalNode> DBPROPERTIES() { return getTokens(SqlBaseParser.DBPROPERTIES); }
		public TerminalNode DBPROPERTIES(int i) {
			return getToken(SqlBaseParser.DBPROPERTIES, i);
		}
		public List<TerminalNode> PROPERTIES() { return getTokens(SqlBaseParser.PROPERTIES); }
		public TerminalNode PROPERTIES(int i) {
			return getToken(SqlBaseParser.PROPERTIES, i);
		}
		public CreateNamespaceContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CallContext extends StatementContext {
		public TerminalNode CALL() { return getToken(SqlBaseParser.CALL, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<FunctionArgumentContext> functionArgument() {
			return getRuleContexts(FunctionArgumentContext.class);
		}
		public FunctionArgumentContext functionArgument(int i) {
			return getRuleContext(FunctionArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public CallContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowTblPropertiesContext extends StatementContext {
		public IdentifierReferenceContext table;
		public PropertyKeyContext key;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(SqlBaseParser.TBLPROPERTIES, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public PropertyKeyContext propertyKey() {
			return getRuleContext(PropertyKeyContext.class,0);
		}
		public ShowTblPropertiesContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class VisitExecuteImmediateContext extends StatementContext {
		public ExecuteImmediateContext executeImmediate() {
			return getRuleContext(ExecuteImmediateContext.class,0);
		}
		public VisitExecuteImmediateContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UnsetTablePropertiesContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SqlBaseParser.UNSET, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(SqlBaseParser.TBLPROPERTIES, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public UnsetTablePropertiesContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetTableLocationContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public LocationSpecContext locationSpec() {
			return getRuleContext(LocationSpecContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public SetTableLocationContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DropTableColumnsContext extends StatementContext {
		public MultipartIdentifierListContext columns;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode COLUMN() { return getToken(SqlBaseParser.COLUMN, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public MultipartIdentifierListContext multipartIdentifierList() {
			return getRuleContext(MultipartIdentifierListContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public DropTableColumnsContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowViewsContext extends StatementContext {
		public StringLitContext pattern;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode VIEWS() { return getToken(SqlBaseParser.VIEWS, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public ShowViewsContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShowFunctionsContext extends StatementContext {
		public IdentifierReferenceContext ns;
		public MultipartIdentifierContext legacy;
		public StringLitContext pattern;
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SqlBaseParser.FUNCTIONS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public ShowFunctionsContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CacheTableContext extends StatementContext {
		public PropertyListContext options;
		public TerminalNode CACHE() { return getToken(SqlBaseParser.CACHE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode LAZY() { return getToken(SqlBaseParser.LAZY, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public CacheTableContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AddTableColumnsContext extends StatementContext {
		public QualifiedColTypeWithPositionListContext columns;
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SqlBaseParser.ADD, 0); }
		public TerminalNode COLUMN() { return getToken(SqlBaseParser.COLUMN, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public QualifiedColTypeWithPositionListContext qualifiedColTypeWithPositionList() {
			return getRuleContext(QualifiedColTypeWithPositionListContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public AddTableColumnsContext(StatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetTablePropertiesContext extends StatementContext {
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(SqlBaseParser.TBLPROPERTIES, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public SetTablePropertiesContext(StatementContext ctx) { copyFrom(ctx); }
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_statement);
		int _la;
		try {
			int _alt;
			setState(1589);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				_localctx = new StatementDefaultContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(738);
				query();
				}
				break;
			case 2:
				_localctx = new VisitExecuteImmediateContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(739);
				executeImmediate();
				}
				break;
			case 3:
				_localctx = new DmlStatementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(740);
					ctes();
					}
				}

				setState(743);
				dmlStatementNoWith();
				}
				break;
			case 4:
				_localctx = new UseContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(744);
				match(USE);
				setState(745);
				identifierReference();
				}
				break;
			case 5:
				_localctx = new UseNamespaceContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(746);
				match(USE);
				setState(747);
				namespace();
				setState(748);
				identifierReference();
				}
				break;
			case 6:
				_localctx = new SetCatalogContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(750);
				match(SET);
				setState(751);
				match(CATALOG);
				setState(752);
				catalogIdentifierReference();
				}
				break;
			case 7:
				_localctx = new CreateNamespaceContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(753);
				match(CREATE);
				setState(754);
				namespace();
				setState(759);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					setState(755);
					match(IF);
					setState(756);
					errorCapturingNot();
					setState(757);
					match(EXISTS);
					}
					break;
				}
				setState(761);
				identifierReference();
				setState(769);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMENT || _la==LOCATION || _la==WITH) {
					{
					setState(767);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case COMMENT:
						{
						setState(762);
						commentSpec();
						}
						break;
					case LOCATION:
						{
						setState(763);
						locationSpec();
						}
						break;
					case WITH:
						{
						{
						setState(764);
						match(WITH);
						setState(765);
						_la = _input.LA(1);
						if ( !(_la==DBPROPERTIES || _la==PROPERTIES) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(766);
						propertyList();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(771);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new SetNamespacePropertiesContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(772);
				match(ALTER);
				setState(773);
				namespace();
				setState(774);
				identifierReference();
				setState(775);
				match(SET);
				setState(776);
				_la = _input.LA(1);
				if ( !(_la==DBPROPERTIES || _la==PROPERTIES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(777);
				propertyList();
				}
				break;
			case 9:
				_localctx = new UnsetNamespacePropertiesContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(779);
				match(ALTER);
				setState(780);
				namespace();
				setState(781);
				identifierReference();
				setState(782);
				match(UNSET);
				setState(783);
				_la = _input.LA(1);
				if ( !(_la==DBPROPERTIES || _la==PROPERTIES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(784);
				propertyList();
				}
				break;
			case 10:
				_localctx = new SetNamespaceLocationContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(786);
				match(ALTER);
				setState(787);
				namespace();
				setState(788);
				identifierReference();
				setState(789);
				match(SET);
				setState(790);
				locationSpec();
				}
				break;
			case 11:
				_localctx = new DropNamespaceContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(792);
				match(DROP);
				setState(793);
				namespace();
				setState(796);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					setState(794);
					match(IF);
					setState(795);
					match(EXISTS);
					}
					break;
				}
				setState(798);
				identifierReference();
				setState(800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(799);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 12:
				_localctx = new ShowNamespacesContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(802);
				match(SHOW);
				setState(803);
				namespaces();
				setState(806);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					setState(804);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(805);
					multipartIdentifier();
					}
					break;
				}
				setState(812);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					setState(809);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
					case 1:
						{
						setState(808);
						match(LIKE);
						}
						break;
					}
					setState(811);
					((ShowNamespacesContext)_localctx).pattern = stringLit();
					}
					break;
				}
				}
				break;
			case 13:
				_localctx = new CreateTableContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(814);
				createTableHeader();
				setState(819);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					setState(815);
					match(LEFT_PAREN);
					setState(816);
					colDefinitionList();
					setState(817);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(822);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(821);
					tableProvider();
					}
				}

				setState(824);
				createTableClauses();
				setState(829);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN || _la==AS || _la==FROM || _la==MAP || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & 1152921504741064705L) != 0) || _la==VALUES || _la==WITH) {
					{
					setState(826);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(825);
						match(AS);
						}
					}

					setState(828);
					query();
					}
				}

				}
				break;
			case 14:
				_localctx = new CreateTableLikeContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(831);
				match(CREATE);
				setState(832);
				match(TABLE);
				setState(837);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					setState(833);
					match(IF);
					setState(834);
					errorCapturingNot();
					setState(835);
					match(EXISTS);
					}
					break;
				}
				setState(839);
				((CreateTableLikeContext)_localctx).target = tableIdentifier();
				setState(840);
				match(LIKE);
				setState(841);
				((CreateTableLikeContext)_localctx).source = tableIdentifier();
				setState(850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==LOCATION || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & 17594333528065L) != 0) || _la==USING) {
					{
					setState(848);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case USING:
						{
						setState(842);
						tableProvider();
						}
						break;
					case ROW:
						{
						setState(843);
						rowFormat();
						}
						break;
					case STORED:
						{
						setState(844);
						createFileFormat();
						}
						break;
					case LOCATION:
						{
						setState(845);
						locationSpec();
						}
						break;
					case TBLPROPERTIES:
						{
						{
						setState(846);
						match(TBLPROPERTIES);
						setState(847);
						((CreateTableLikeContext)_localctx).tableProps = propertyList();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(852);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 15:
				_localctx = new ReplaceTableContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(853);
				replaceTableHeader();
				setState(858);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
				case 1:
					{
					setState(854);
					match(LEFT_PAREN);
					setState(855);
					colDefinitionList();
					setState(856);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(861);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(860);
					tableProvider();
					}
				}

				setState(863);
				createTableClauses();
				setState(868);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN || _la==AS || _la==FROM || _la==MAP || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & 1152921504741064705L) != 0) || _la==VALUES || _la==WITH) {
					{
					setState(865);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(864);
						match(AS);
						}
					}

					setState(867);
					query();
					}
				}

				}
				break;
			case 16:
				_localctx = new AnalyzeContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(870);
				match(ANALYZE);
				setState(871);
				match(TABLE);
				setState(872);
				identifierReference();
				setState(874);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(873);
					partitionSpec();
					}
				}

				setState(876);
				match(COMPUTE);
				setState(877);
				match(STATISTICS);
				setState(885);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,56,_ctx) ) {
				case 1:
					{
					setState(878);
					identifier();
					}
					break;
				case 2:
					{
					setState(879);
					match(FOR);
					setState(880);
					match(COLUMNS);
					setState(881);
					identifierSeq();
					}
					break;
				case 3:
					{
					setState(882);
					match(FOR);
					setState(883);
					match(ALL);
					setState(884);
					match(COLUMNS);
					}
					break;
				}
				}
				break;
			case 17:
				_localctx = new AnalyzeTablesContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(887);
				match(ANALYZE);
				setState(888);
				match(TABLES);
				setState(891);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(889);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(890);
					identifierReference();
					}
				}

				setState(893);
				match(COMPUTE);
				setState(894);
				match(STATISTICS);
				setState(896);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					setState(895);
					identifier();
					}
					break;
				}
				}
				break;
			case 18:
				_localctx = new AddTableColumnsContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(898);
				match(ALTER);
				setState(899);
				match(TABLE);
				setState(900);
				identifierReference();
				setState(901);
				match(ADD);
				setState(902);
				_la = _input.LA(1);
				if ( !(_la==COLUMN || _la==COLUMNS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(903);
				((AddTableColumnsContext)_localctx).columns = qualifiedColTypeWithPositionList();
				}
				break;
			case 19:
				_localctx = new AddTableColumnsContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(905);
				match(ALTER);
				setState(906);
				match(TABLE);
				setState(907);
				identifierReference();
				setState(908);
				match(ADD);
				setState(909);
				_la = _input.LA(1);
				if ( !(_la==COLUMN || _la==COLUMNS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(910);
				match(LEFT_PAREN);
				setState(911);
				((AddTableColumnsContext)_localctx).columns = qualifiedColTypeWithPositionList();
				setState(912);
				match(RIGHT_PAREN);
				}
				break;
			case 20:
				_localctx = new RenameTableColumnContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(914);
				match(ALTER);
				setState(915);
				match(TABLE);
				setState(916);
				((RenameTableColumnContext)_localctx).table = identifierReference();
				setState(917);
				match(RENAME);
				setState(918);
				match(COLUMN);
				setState(919);
				((RenameTableColumnContext)_localctx).from = multipartIdentifier();
				setState(920);
				match(TO);
				setState(921);
				((RenameTableColumnContext)_localctx).to = errorCapturingIdentifier();
				}
				break;
			case 21:
				_localctx = new DropTableColumnsContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(923);
				match(ALTER);
				setState(924);
				match(TABLE);
				setState(925);
				identifierReference();
				setState(926);
				match(DROP);
				setState(927);
				_la = _input.LA(1);
				if ( !(_la==COLUMN || _la==COLUMNS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(928);
					match(IF);
					setState(929);
					match(EXISTS);
					}
				}

				setState(932);
				match(LEFT_PAREN);
				setState(933);
				((DropTableColumnsContext)_localctx).columns = multipartIdentifierList();
				setState(934);
				match(RIGHT_PAREN);
				}
				break;
			case 22:
				_localctx = new DropTableColumnsContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(936);
				match(ALTER);
				setState(937);
				match(TABLE);
				setState(938);
				identifierReference();
				setState(939);
				match(DROP);
				setState(940);
				_la = _input.LA(1);
				if ( !(_la==COLUMN || _la==COLUMNS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(943);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
				case 1:
					{
					setState(941);
					match(IF);
					setState(942);
					match(EXISTS);
					}
					break;
				}
				setState(945);
				((DropTableColumnsContext)_localctx).columns = multipartIdentifierList();
				}
				break;
			case 23:
				_localctx = new RenameTableContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(947);
				match(ALTER);
				setState(948);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(949);
				((RenameTableContext)_localctx).from = identifierReference();
				setState(950);
				match(RENAME);
				setState(951);
				match(TO);
				setState(952);
				((RenameTableContext)_localctx).to = multipartIdentifier();
				}
				break;
			case 24:
				_localctx = new SetTablePropertiesContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(954);
				match(ALTER);
				setState(955);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(956);
				identifierReference();
				setState(957);
				match(SET);
				setState(958);
				match(TBLPROPERTIES);
				setState(959);
				propertyList();
				}
				break;
			case 25:
				_localctx = new UnsetTablePropertiesContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(961);
				match(ALTER);
				setState(962);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(963);
				identifierReference();
				setState(964);
				match(UNSET);
				setState(965);
				match(TBLPROPERTIES);
				setState(968);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(966);
					match(IF);
					setState(967);
					match(EXISTS);
					}
				}

				setState(970);
				propertyList();
				}
				break;
			case 26:
				_localctx = new AlterTableAlterColumnContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(972);
				match(ALTER);
				setState(973);
				match(TABLE);
				setState(974);
				((AlterTableAlterColumnContext)_localctx).table = identifierReference();
				setState(975);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CHANGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(977);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
				case 1:
					{
					setState(976);
					match(COLUMN);
					}
					break;
				}
				setState(979);
				((AlterTableAlterColumnContext)_localctx).columns = alterColumnSpecList();
				}
				break;
			case 27:
				_localctx = new HiveChangeColumnContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(981);
				match(ALTER);
				setState(982);
				match(TABLE);
				setState(983);
				((HiveChangeColumnContext)_localctx).table = identifierReference();
				setState(985);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(984);
					partitionSpec();
					}
				}

				setState(987);
				match(CHANGE);
				setState(989);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
				case 1:
					{
					setState(988);
					match(COLUMN);
					}
					break;
				}
				setState(991);
				((HiveChangeColumnContext)_localctx).colName = multipartIdentifier();
				setState(992);
				colType();
				setState(994);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AFTER || _la==FIRST) {
					{
					setState(993);
					colPosition();
					}
				}

				}
				break;
			case 28:
				_localctx = new HiveReplaceColumnsContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(996);
				match(ALTER);
				setState(997);
				match(TABLE);
				setState(998);
				((HiveReplaceColumnsContext)_localctx).table = identifierReference();
				setState(1000);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(999);
					partitionSpec();
					}
				}

				setState(1002);
				match(REPLACE);
				setState(1003);
				match(COLUMNS);
				setState(1004);
				match(LEFT_PAREN);
				setState(1005);
				((HiveReplaceColumnsContext)_localctx).columns = qualifiedColTypeWithPositionList();
				setState(1006);
				match(RIGHT_PAREN);
				}
				break;
			case 29:
				_localctx = new SetTableSerDeContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(1008);
				match(ALTER);
				setState(1009);
				match(TABLE);
				setState(1010);
				identifierReference();
				setState(1012);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1011);
					partitionSpec();
					}
				}

				setState(1014);
				match(SET);
				setState(1015);
				match(SERDE);
				setState(1016);
				stringLit();
				setState(1020);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1017);
					match(WITH);
					setState(1018);
					match(SERDEPROPERTIES);
					setState(1019);
					propertyList();
					}
				}

				}
				break;
			case 30:
				_localctx = new SetTableSerDeContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(1022);
				match(ALTER);
				setState(1023);
				match(TABLE);
				setState(1024);
				identifierReference();
				setState(1026);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1025);
					partitionSpec();
					}
				}

				setState(1028);
				match(SET);
				setState(1029);
				match(SERDEPROPERTIES);
				setState(1030);
				propertyList();
				}
				break;
			case 31:
				_localctx = new AddTablePartitionContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(1032);
				match(ALTER);
				setState(1033);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1034);
				identifierReference();
				setState(1035);
				match(ADD);
				setState(1040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1036);
					match(IF);
					setState(1037);
					errorCapturingNot();
					setState(1038);
					match(EXISTS);
					}
				}

				setState(1043); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1042);
					partitionSpecLocation();
					}
					}
					setState(1045); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==PARTITION );
				}
				break;
			case 32:
				_localctx = new RenameTablePartitionContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(1047);
				match(ALTER);
				setState(1048);
				match(TABLE);
				setState(1049);
				identifierReference();
				setState(1050);
				((RenameTablePartitionContext)_localctx).from = partitionSpec();
				setState(1051);
				match(RENAME);
				setState(1052);
				match(TO);
				setState(1053);
				((RenameTablePartitionContext)_localctx).to = partitionSpec();
				}
				break;
			case 33:
				_localctx = new DropTablePartitionsContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(1055);
				match(ALTER);
				setState(1056);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1057);
				identifierReference();
				setState(1058);
				match(DROP);
				setState(1061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1059);
					match(IF);
					setState(1060);
					match(EXISTS);
					}
				}

				setState(1063);
				partitionSpec();
				setState(1068);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1064);
					match(COMMA);
					setState(1065);
					partitionSpec();
					}
					}
					setState(1070);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1072);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PURGE) {
					{
					setState(1071);
					match(PURGE);
					}
				}

				}
				break;
			case 34:
				_localctx = new SetTableLocationContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(1074);
				match(ALTER);
				setState(1075);
				match(TABLE);
				setState(1076);
				identifierReference();
				setState(1078);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1077);
					partitionSpec();
					}
				}

				setState(1080);
				match(SET);
				setState(1081);
				locationSpec();
				}
				break;
			case 35:
				_localctx = new RecoverPartitionsContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(1083);
				match(ALTER);
				setState(1084);
				match(TABLE);
				setState(1085);
				identifierReference();
				setState(1086);
				match(RECOVER);
				setState(1087);
				match(PARTITIONS);
				}
				break;
			case 36:
				_localctx = new AlterClusterByContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(1089);
				match(ALTER);
				setState(1090);
				match(TABLE);
				setState(1091);
				identifierReference();
				setState(1096);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
				case 1:
					{
					setState(1092);
					clusterBySpec();
					}
					break;
				case 2:
					{
					setState(1093);
					match(CLUSTER);
					setState(1094);
					match(BY);
					setState(1095);
					match(NONE);
					}
					break;
				}
				}
				break;
			case 37:
				_localctx = new AlterTableCollationContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(1098);
				match(ALTER);
				setState(1099);
				match(TABLE);
				setState(1100);
				identifierReference();
				setState(1101);
				collationSpec();
				}
				break;
			case 38:
				_localctx = new DropTableContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(1103);
				match(DROP);
				setState(1104);
				match(TABLE);
				setState(1107);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
				case 1:
					{
					setState(1105);
					match(IF);
					setState(1106);
					match(EXISTS);
					}
					break;
				}
				setState(1109);
				identifierReference();
				setState(1111);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PURGE) {
					{
					setState(1110);
					match(PURGE);
					}
				}

				}
				break;
			case 39:
				_localctx = new DropViewContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(1113);
				match(DROP);
				setState(1114);
				match(VIEW);
				setState(1117);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
				case 1:
					{
					setState(1115);
					match(IF);
					setState(1116);
					match(EXISTS);
					}
					break;
				}
				setState(1119);
				identifierReference();
				}
				break;
			case 40:
				_localctx = new CreateViewContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(1120);
				match(CREATE);
				setState(1123);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1121);
					match(OR);
					setState(1122);
					match(REPLACE);
					}
				}

				setState(1129);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==TEMPORARY) {
					{
					setState(1126);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==GLOBAL) {
						{
						setState(1125);
						match(GLOBAL);
						}
					}

					setState(1128);
					match(TEMPORARY);
					}
				}

				setState(1131);
				match(VIEW);
				setState(1136);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
				case 1:
					{
					setState(1132);
					match(IF);
					setState(1133);
					errorCapturingNot();
					setState(1134);
					match(EXISTS);
					}
					break;
				}
				setState(1138);
				identifierReference();
				setState(1140);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1139);
					identifierCommentList();
					}
				}

				setState(1152);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMENT || _la==DEFAULT || _la==PARTITIONED || _la==TBLPROPERTIES || _la==WITH) {
					{
					setState(1150);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case COMMENT:
						{
						setState(1142);
						commentSpec();
						}
						break;
					case WITH:
						{
						setState(1143);
						schemaBinding();
						}
						break;
					case DEFAULT:
						{
						setState(1144);
						collationSpec();
						}
						break;
					case PARTITIONED:
						{
						{
						setState(1145);
						match(PARTITIONED);
						setState(1146);
						match(ON);
						setState(1147);
						identifierList();
						}
						}
						break;
					case TBLPROPERTIES:
						{
						{
						setState(1148);
						match(TBLPROPERTIES);
						setState(1149);
						propertyList();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(1154);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1155);
				match(AS);
				setState(1156);
				query();
				}
				break;
			case 41:
				_localctx = new CreateTempViewUsingContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(1158);
				match(CREATE);
				setState(1161);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1159);
					match(OR);
					setState(1160);
					match(REPLACE);
					}
				}

				setState(1164);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL) {
					{
					setState(1163);
					match(GLOBAL);
					}
				}

				setState(1166);
				match(TEMPORARY);
				setState(1167);
				match(VIEW);
				setState(1168);
				tableIdentifier();
				setState(1173);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1169);
					match(LEFT_PAREN);
					setState(1170);
					colTypeList();
					setState(1171);
					match(RIGHT_PAREN);
					}
				}

				setState(1175);
				tableProvider();
				setState(1178);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(1176);
					match(OPTIONS);
					setState(1177);
					propertyList();
					}
				}

				}
				break;
			case 42:
				_localctx = new AlterViewQueryContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(1180);
				match(ALTER);
				setState(1181);
				match(VIEW);
				setState(1182);
				identifierReference();
				setState(1184);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1183);
					match(AS);
					}
				}

				setState(1186);
				query();
				}
				break;
			case 43:
				_localctx = new AlterViewSchemaBindingContext(_localctx);
				enterOuterAlt(_localctx, 43);
				{
				setState(1188);
				match(ALTER);
				setState(1189);
				match(VIEW);
				setState(1190);
				identifierReference();
				setState(1191);
				schemaBinding();
				}
				break;
			case 44:
				_localctx = new CreateFunctionContext(_localctx);
				enterOuterAlt(_localctx, 44);
				{
				setState(1193);
				match(CREATE);
				setState(1196);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1194);
					match(OR);
					setState(1195);
					match(REPLACE);
					}
				}

				setState(1199);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1198);
					match(TEMPORARY);
					}
				}

				setState(1201);
				match(FUNCTION);
				setState(1206);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
				case 1:
					{
					setState(1202);
					match(IF);
					setState(1203);
					errorCapturingNot();
					setState(1204);
					match(EXISTS);
					}
					break;
				}
				setState(1208);
				identifierReference();
				setState(1209);
				match(AS);
				setState(1210);
				((CreateFunctionContext)_localctx).className = stringLit();
				setState(1220);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1211);
					match(USING);
					setState(1212);
					resource();
					setState(1217);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1213);
						match(COMMA);
						setState(1214);
						resource();
						}
						}
						setState(1219);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case 45:
				_localctx = new CreateUserDefinedFunctionContext(_localctx);
				enterOuterAlt(_localctx, 45);
				{
				setState(1222);
				match(CREATE);
				setState(1225);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1223);
					match(OR);
					setState(1224);
					match(REPLACE);
					}
				}

				setState(1228);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1227);
					match(TEMPORARY);
					}
				}

				setState(1230);
				match(FUNCTION);
				setState(1235);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
				case 1:
					{
					setState(1231);
					match(IF);
					setState(1232);
					errorCapturingNot();
					setState(1233);
					match(EXISTS);
					}
					break;
				}
				setState(1237);
				identifierReference();
				setState(1238);
				match(LEFT_PAREN);
				setState(1240);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
				case 1:
					{
					setState(1239);
					((CreateUserDefinedFunctionContext)_localctx).parameters = colDefinitionList();
					}
					break;
				}
				setState(1242);
				match(RIGHT_PAREN);
				setState(1252);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
				case 1:
					{
					setState(1243);
					match(RETURNS);
					setState(1250);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
					case 1:
						{
						setState(1244);
						dataType();
						}
						break;
					case 2:
						{
						setState(1245);
						match(TABLE);
						setState(1246);
						match(LEFT_PAREN);
						setState(1247);
						((CreateUserDefinedFunctionContext)_localctx).returnParams = colTypeList();
						setState(1248);
						match(RIGHT_PAREN);
						}
						break;
					}
					}
					break;
				}
				setState(1254);
				routineCharacteristics();
				setState(1255);
				match(RETURN);
				setState(1258);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
				case 1:
					{
					setState(1256);
					query();
					}
					break;
				case 2:
					{
					setState(1257);
					expression();
					}
					break;
				}
				}
				break;
			case 46:
				_localctx = new DropFunctionContext(_localctx);
				enterOuterAlt(_localctx, 46);
				{
				setState(1260);
				match(DROP);
				setState(1262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMPORARY) {
					{
					setState(1261);
					match(TEMPORARY);
					}
				}

				setState(1264);
				match(FUNCTION);
				setState(1267);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
				case 1:
					{
					setState(1265);
					match(IF);
					setState(1266);
					match(EXISTS);
					}
					break;
				}
				setState(1269);
				identifierReference();
				}
				break;
			case 47:
				_localctx = new CreateVariableContext(_localctx);
				enterOuterAlt(_localctx, 47);
				{
				setState(1270);
				match(DECLARE);
				setState(1273);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
				case 1:
					{
					setState(1271);
					match(OR);
					setState(1272);
					match(REPLACE);
					}
					break;
				}
				setState(1276);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
				case 1:
					{
					setState(1275);
					variable();
					}
					break;
				}
				setState(1278);
				identifierReference();
				setState(1280);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
				case 1:
					{
					setState(1279);
					dataType();
					}
					break;
				}
				setState(1283);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==EQ) {
					{
					setState(1282);
					variableDefaultExpression();
					}
				}

				}
				break;
			case 48:
				_localctx = new DropVariableContext(_localctx);
				enterOuterAlt(_localctx, 48);
				{
				setState(1285);
				match(DROP);
				setState(1286);
				match(TEMPORARY);
				setState(1287);
				variable();
				setState(1290);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
				case 1:
					{
					setState(1288);
					match(IF);
					setState(1289);
					match(EXISTS);
					}
					break;
				}
				setState(1292);
				identifierReference();
				}
				break;
			case 49:
				_localctx = new ExplainContext(_localctx);
				enterOuterAlt(_localctx, 49);
				{
				setState(1294);
				match(EXPLAIN);
				setState(1296);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CODEGEN || _la==COST || _la==EXTENDED || _la==FORMATTED || _la==LOGICAL) {
					{
					setState(1295);
					_la = _input.LA(1);
					if ( !(_la==CODEGEN || _la==COST || _la==EXTENDED || _la==FORMATTED || _la==LOGICAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1300);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
				case 1:
					{
					setState(1298);
					statement();
					}
					break;
				case 2:
					{
					setState(1299);
					setResetStatement();
					}
					break;
				}
				}
				break;
			case 50:
				_localctx = new ShowTablesContext(_localctx);
				enterOuterAlt(_localctx, 50);
				{
				setState(1302);
				match(SHOW);
				setState(1303);
				match(TABLES);
				setState(1306);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
				case 1:
					{
					setState(1304);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1305);
					identifierReference();
					}
					break;
				}
				setState(1312);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
				case 1:
					{
					setState(1309);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
					case 1:
						{
						setState(1308);
						match(LIKE);
						}
						break;
					}
					setState(1311);
					((ShowTablesContext)_localctx).pattern = stringLit();
					}
					break;
				}
				}
				break;
			case 51:
				_localctx = new ShowTableExtendedContext(_localctx);
				enterOuterAlt(_localctx, 51);
				{
				setState(1314);
				match(SHOW);
				setState(1315);
				match(TABLE);
				setState(1316);
				match(EXTENDED);
				setState(1319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1317);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1318);
					((ShowTableExtendedContext)_localctx).ns = identifierReference();
					}
				}

				setState(1321);
				match(LIKE);
				setState(1322);
				((ShowTableExtendedContext)_localctx).pattern = stringLit();
				setState(1324);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1323);
					partitionSpec();
					}
				}

				}
				break;
			case 52:
				_localctx = new ShowTblPropertiesContext(_localctx);
				enterOuterAlt(_localctx, 52);
				{
				setState(1326);
				match(SHOW);
				setState(1327);
				match(TBLPROPERTIES);
				setState(1328);
				((ShowTblPropertiesContext)_localctx).table = identifierReference();
				setState(1333);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1329);
					match(LEFT_PAREN);
					setState(1330);
					((ShowTblPropertiesContext)_localctx).key = propertyKey();
					setState(1331);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case 53:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 53);
				{
				setState(1335);
				match(SHOW);
				setState(1336);
				match(COLUMNS);
				setState(1337);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1338);
				((ShowColumnsContext)_localctx).table = identifierReference();
				setState(1341);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1339);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1340);
					((ShowColumnsContext)_localctx).ns = multipartIdentifier();
					}
				}

				}
				break;
			case 54:
				_localctx = new ShowViewsContext(_localctx);
				enterOuterAlt(_localctx, 54);
				{
				setState(1343);
				match(SHOW);
				setState(1344);
				match(VIEWS);
				setState(1347);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
				case 1:
					{
					setState(1345);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1346);
					identifierReference();
					}
					break;
				}
				setState(1353);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
				case 1:
					{
					setState(1350);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
					case 1:
						{
						setState(1349);
						match(LIKE);
						}
						break;
					}
					setState(1352);
					((ShowViewsContext)_localctx).pattern = stringLit();
					}
					break;
				}
				}
				break;
			case 55:
				_localctx = new ShowPartitionsContext(_localctx);
				enterOuterAlt(_localctx, 55);
				{
				setState(1355);
				match(SHOW);
				setState(1356);
				match(PARTITIONS);
				setState(1357);
				identifierReference();
				setState(1359);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1358);
					partitionSpec();
					}
				}

				}
				break;
			case 56:
				_localctx = new ShowFunctionsContext(_localctx);
				enterOuterAlt(_localctx, 56);
				{
				setState(1361);
				match(SHOW);
				setState(1363);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
				case 1:
					{
					setState(1362);
					identifier();
					}
					break;
				}
				setState(1365);
				match(FUNCTIONS);
				setState(1368);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
				case 1:
					{
					setState(1366);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1367);
					((ShowFunctionsContext)_localctx).ns = identifierReference();
					}
					break;
				}
				setState(1377);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					setState(1371);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
					case 1:
						{
						setState(1370);
						match(LIKE);
						}
						break;
					}
					setState(1375);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
					case 1:
						{
						setState(1373);
						((ShowFunctionsContext)_localctx).legacy = multipartIdentifier();
						}
						break;
					case 2:
						{
						setState(1374);
						((ShowFunctionsContext)_localctx).pattern = stringLit();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 57:
				_localctx = new ShowCreateTableContext(_localctx);
				enterOuterAlt(_localctx, 57);
				{
				setState(1379);
				match(SHOW);
				setState(1380);
				match(CREATE);
				setState(1381);
				match(TABLE);
				setState(1382);
				identifierReference();
				setState(1385);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1383);
					match(AS);
					setState(1384);
					match(SERDE);
					}
				}

				}
				break;
			case 58:
				_localctx = new ShowCurrentNamespaceContext(_localctx);
				enterOuterAlt(_localctx, 58);
				{
				setState(1387);
				match(SHOW);
				setState(1388);
				match(CURRENT);
				setState(1389);
				namespace();
				}
				break;
			case 59:
				_localctx = new ShowCatalogsContext(_localctx);
				enterOuterAlt(_localctx, 59);
				{
				setState(1390);
				match(SHOW);
				setState(1391);
				match(CATALOGS);
				setState(1396);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
				case 1:
					{
					setState(1393);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
					case 1:
						{
						setState(1392);
						match(LIKE);
						}
						break;
					}
					setState(1395);
					((ShowCatalogsContext)_localctx).pattern = stringLit();
					}
					break;
				}
				}
				break;
			case 60:
				_localctx = new DescribeFunctionContext(_localctx);
				enterOuterAlt(_localctx, 60);
				{
				setState(1398);
				_la = _input.LA(1);
				if ( !(_la==DESC || _la==DESCRIBE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1399);
				match(FUNCTION);
				setState(1401);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
				case 1:
					{
					setState(1400);
					match(EXTENDED);
					}
					break;
				}
				setState(1403);
				describeFuncName();
				}
				break;
			case 61:
				_localctx = new DescribeNamespaceContext(_localctx);
				enterOuterAlt(_localctx, 61);
				{
				setState(1404);
				_la = _input.LA(1);
				if ( !(_la==DESC || _la==DESCRIBE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1405);
				namespace();
				setState(1407);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
				case 1:
					{
					setState(1406);
					match(EXTENDED);
					}
					break;
				}
				setState(1409);
				identifierReference();
				}
				break;
			case 62:
				_localctx = new DescribeRelationContext(_localctx);
				enterOuterAlt(_localctx, 62);
				{
				setState(1411);
				_la = _input.LA(1);
				if ( !(_la==DESC || _la==DESCRIBE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1413);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
				case 1:
					{
					setState(1412);
					match(TABLE);
					}
					break;
				}
				setState(1416);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
				case 1:
					{
					setState(1415);
					((DescribeRelationContext)_localctx).option = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==EXTENDED || _la==FORMATTED) ) {
						((DescribeRelationContext)_localctx).option = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1418);
				identifierReference();
				setState(1420);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
				case 1:
					{
					setState(1419);
					partitionSpec();
					}
					break;
				}
				setState(1423);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
				case 1:
					{
					setState(1422);
					describeColName();
					}
					break;
				}
				setState(1427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1425);
					match(AS);
					setState(1426);
					match(JSON);
					}
				}

				}
				break;
			case 63:
				_localctx = new DescribeQueryContext(_localctx);
				enterOuterAlt(_localctx, 63);
				{
				setState(1429);
				_la = _input.LA(1);
				if ( !(_la==DESC || _la==DESCRIBE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1431);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==QUERY) {
					{
					setState(1430);
					match(QUERY);
					}
				}

				setState(1433);
				query();
				}
				break;
			case 64:
				_localctx = new CommentNamespaceContext(_localctx);
				enterOuterAlt(_localctx, 64);
				{
				setState(1434);
				match(COMMENT);
				setState(1435);
				match(ON);
				setState(1436);
				namespace();
				setState(1437);
				identifierReference();
				setState(1438);
				match(IS);
				setState(1439);
				comment();
				}
				break;
			case 65:
				_localctx = new CommentTableContext(_localctx);
				enterOuterAlt(_localctx, 65);
				{
				setState(1441);
				match(COMMENT);
				setState(1442);
				match(ON);
				setState(1443);
				match(TABLE);
				setState(1444);
				identifierReference();
				setState(1445);
				match(IS);
				setState(1446);
				comment();
				}
				break;
			case 66:
				_localctx = new RefreshTableContext(_localctx);
				enterOuterAlt(_localctx, 66);
				{
				setState(1448);
				match(REFRESH);
				setState(1449);
				match(TABLE);
				setState(1450);
				identifierReference();
				}
				break;
			case 67:
				_localctx = new RefreshFunctionContext(_localctx);
				enterOuterAlt(_localctx, 67);
				{
				setState(1451);
				match(REFRESH);
				setState(1452);
				match(FUNCTION);
				setState(1453);
				identifierReference();
				}
				break;
			case 68:
				_localctx = new RefreshResourceContext(_localctx);
				enterOuterAlt(_localctx, 68);
				{
				setState(1454);
				match(REFRESH);
				setState(1462);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
				case 1:
					{
					setState(1455);
					stringLit();
					}
					break;
				case 2:
					{
					setState(1459);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,140,_ctx);
					while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1+1 ) {
							{
							{
							setState(1456);
							matchWildcard();
							}
							} 
						}
						setState(1461);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,140,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 69:
				_localctx = new CacheTableContext(_localctx);
				enterOuterAlt(_localctx, 69);
				{
				setState(1464);
				match(CACHE);
				setState(1466);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LAZY) {
					{
					setState(1465);
					match(LAZY);
					}
				}

				setState(1468);
				match(TABLE);
				setState(1469);
				identifierReference();
				setState(1472);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(1470);
					match(OPTIONS);
					setState(1471);
					((CacheTableContext)_localctx).options = propertyList();
					}
				}

				setState(1478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN || _la==AS || _la==FROM || _la==MAP || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & 1152921504741064705L) != 0) || _la==VALUES || _la==WITH) {
					{
					setState(1475);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1474);
						match(AS);
						}
					}

					setState(1477);
					query();
					}
				}

				}
				break;
			case 70:
				_localctx = new UncacheTableContext(_localctx);
				enterOuterAlt(_localctx, 70);
				{
				setState(1480);
				match(UNCACHE);
				setState(1481);
				match(TABLE);
				setState(1484);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
				case 1:
					{
					setState(1482);
					match(IF);
					setState(1483);
					match(EXISTS);
					}
					break;
				}
				setState(1486);
				identifierReference();
				}
				break;
			case 71:
				_localctx = new ClearCacheContext(_localctx);
				enterOuterAlt(_localctx, 71);
				{
				setState(1487);
				match(CLEAR);
				setState(1488);
				match(CACHE);
				}
				break;
			case 72:
				_localctx = new LoadDataContext(_localctx);
				enterOuterAlt(_localctx, 72);
				{
				setState(1489);
				match(LOAD);
				setState(1490);
				match(DATA);
				setState(1492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(1491);
					match(LOCAL);
					}
				}

				setState(1494);
				match(INPATH);
				setState(1495);
				((LoadDataContext)_localctx).path = stringLit();
				setState(1497);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OVERWRITE) {
					{
					setState(1496);
					match(OVERWRITE);
					}
				}

				setState(1499);
				match(INTO);
				setState(1500);
				match(TABLE);
				setState(1501);
				identifierReference();
				setState(1503);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1502);
					partitionSpec();
					}
				}

				}
				break;
			case 73:
				_localctx = new TruncateTableContext(_localctx);
				enterOuterAlt(_localctx, 73);
				{
				setState(1505);
				match(TRUNCATE);
				setState(1506);
				match(TABLE);
				setState(1507);
				identifierReference();
				setState(1509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1508);
					partitionSpec();
					}
				}

				}
				break;
			case 74:
				_localctx = new RepairTableContext(_localctx);
				enterOuterAlt(_localctx, 74);
				{
				setState(1512);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MSCK) {
					{
					setState(1511);
					match(MSCK);
					}
				}

				setState(1514);
				match(REPAIR);
				setState(1515);
				match(TABLE);
				setState(1516);
				identifierReference();
				setState(1519);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADD || _la==DROP || _la==SYNC) {
					{
					setState(1517);
					((RepairTableContext)_localctx).option = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP || _la==SYNC) ) {
						((RepairTableContext)_localctx).option = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1518);
					match(PARTITIONS);
					}
				}

				}
				break;
			case 75:
				_localctx = new ManageResourceContext(_localctx);
				enterOuterAlt(_localctx, 75);
				{
				setState(1521);
				((ManageResourceContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==LIST) ) {
					((ManageResourceContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1522);
				identifier();
				setState(1526);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,153,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1523);
						matchWildcard();
						}
						} 
					}
					setState(1528);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,153,_ctx);
				}
				}
				break;
			case 76:
				_localctx = new CreateIndexContext(_localctx);
				enterOuterAlt(_localctx, 76);
				{
				setState(1529);
				match(CREATE);
				setState(1530);
				match(INDEX);
				setState(1535);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
				case 1:
					{
					setState(1531);
					match(IF);
					setState(1532);
					errorCapturingNot();
					setState(1533);
					match(EXISTS);
					}
					break;
				}
				setState(1537);
				identifier();
				setState(1538);
				match(ON);
				setState(1540);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
				case 1:
					{
					setState(1539);
					match(TABLE);
					}
					break;
				}
				setState(1542);
				identifierReference();
				setState(1545);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1543);
					match(USING);
					setState(1544);
					((CreateIndexContext)_localctx).indexType = identifier();
					}
				}

				setState(1547);
				match(LEFT_PAREN);
				setState(1548);
				((CreateIndexContext)_localctx).columns = multipartIdentifierPropertyList();
				setState(1549);
				match(RIGHT_PAREN);
				setState(1552);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(1550);
					match(OPTIONS);
					setState(1551);
					((CreateIndexContext)_localctx).options = propertyList();
					}
				}

				}
				break;
			case 77:
				_localctx = new DropIndexContext(_localctx);
				enterOuterAlt(_localctx, 77);
				{
				setState(1554);
				match(DROP);
				setState(1555);
				match(INDEX);
				setState(1558);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
				case 1:
					{
					setState(1556);
					match(IF);
					setState(1557);
					match(EXISTS);
					}
					break;
				}
				setState(1560);
				identifier();
				setState(1561);
				match(ON);
				setState(1563);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
				case 1:
					{
					setState(1562);
					match(TABLE);
					}
					break;
				}
				setState(1565);
				identifierReference();
				}
				break;
			case 78:
				_localctx = new CallContext(_localctx);
				enterOuterAlt(_localctx, 78);
				{
				setState(1567);
				match(CALL);
				setState(1568);
				identifierReference();
				setState(1569);
				match(LEFT_PAREN);
				setState(1578);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
				case 1:
					{
					setState(1570);
					functionArgument();
					setState(1575);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1571);
						match(COMMA);
						setState(1572);
						functionArgument();
						}
						}
						setState(1577);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(1580);
				match(RIGHT_PAREN);
				}
				break;
			case 79:
				_localctx = new FailNativeCommandContext(_localctx);
				enterOuterAlt(_localctx, 79);
				{
				setState(1582);
				unsupportedHiveNativeCommands();
				setState(1586);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,162,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1583);
						matchWildcard();
						}
						} 
					}
					setState(1588);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,162,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetResetStatementContext extends ParserRuleContext {
		public SetResetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setResetStatement; }
	 
		public SetResetStatementContext() { }
		public void copyFrom(SetResetStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetQuotedConfigurationContext extends SetResetStatementContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public ConfigKeyContext configKey() {
			return getRuleContext(ConfigKeyContext.class,0);
		}
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public ConfigValueContext configValue() {
			return getRuleContext(ConfigValueContext.class,0);
		}
		public SetQuotedConfigurationContext(SetResetStatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ResetQuotedConfigurationContext extends SetResetStatementContext {
		public TerminalNode RESET() { return getToken(SqlBaseParser.RESET, 0); }
		public ConfigKeyContext configKey() {
			return getRuleContext(ConfigKeyContext.class,0);
		}
		public ResetQuotedConfigurationContext(SetResetStatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FailSetRoleContext extends SetResetStatementContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode ROLE() { return getToken(SqlBaseParser.ROLE, 0); }
		public FailSetRoleContext(SetResetStatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ResetConfigurationContext extends SetResetStatementContext {
		public TerminalNode RESET() { return getToken(SqlBaseParser.RESET, 0); }
		public ResetConfigurationContext(SetResetStatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetTimeZoneContext extends SetResetStatementContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode TIME() { return getToken(SqlBaseParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(SqlBaseParser.ZONE, 0); }
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TimezoneContext timezone() {
			return getRuleContext(TimezoneContext.class,0);
		}
		public SetTimeZoneContext(SetResetStatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetVariableContext extends SetResetStatementContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public AssignmentListContext assignmentList() {
			return getRuleContext(AssignmentListContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public MultipartIdentifierListContext multipartIdentifierList() {
			return getRuleContext(MultipartIdentifierListContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public SetVariableContext(SetResetStatementContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetConfigurationContext extends SetResetStatementContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public ConfigKeyContext configKey() {
			return getRuleContext(ConfigKeyContext.class,0);
		}
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public SetConfigurationContext(SetResetStatementContext ctx) { copyFrom(ctx); }
	}

	public final SetResetStatementContext setResetStatement() throws RecognitionException {
		SetResetStatementContext _localctx = new SetResetStatementContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_setResetStatement);
		int _la;
		try {
			int _alt;
			setState(1671);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				_localctx = new FailSetRoleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1591);
				match(SET);
				setState(1592);
				match(ROLE);
				setState(1596);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,164,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1593);
						matchWildcard();
						}
						} 
					}
					setState(1598);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,164,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new SetTimeZoneContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1599);
				match(SET);
				setState(1600);
				match(TIME);
				setState(1601);
				match(ZONE);
				setState(1602);
				interval();
				}
				break;
			case 3:
				_localctx = new SetTimeZoneContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1603);
				match(SET);
				setState(1604);
				match(TIME);
				setState(1605);
				match(ZONE);
				setState(1606);
				timezone();
				}
				break;
			case 4:
				_localctx = new SetTimeZoneContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1607);
				match(SET);
				setState(1608);
				match(TIME);
				setState(1609);
				match(ZONE);
				setState(1613);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,165,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1610);
						matchWildcard();
						}
						} 
					}
					setState(1615);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,165,_ctx);
				}
				}
				break;
			case 5:
				_localctx = new SetVariableContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1616);
				match(SET);
				setState(1617);
				variable();
				setState(1618);
				assignmentList();
				}
				break;
			case 6:
				_localctx = new SetVariableContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1620);
				match(SET);
				setState(1621);
				variable();
				setState(1622);
				match(LEFT_PAREN);
				setState(1623);
				multipartIdentifierList();
				setState(1624);
				match(RIGHT_PAREN);
				setState(1625);
				match(EQ);
				setState(1626);
				match(LEFT_PAREN);
				setState(1627);
				query();
				setState(1628);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				_localctx = new SetQuotedConfigurationContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1630);
				match(SET);
				setState(1631);
				configKey();
				setState(1632);
				match(EQ);
				setState(1633);
				configValue();
				}
				break;
			case 8:
				_localctx = new SetConfigurationContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1635);
				match(SET);
				setState(1636);
				configKey();
				setState(1644);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ) {
					{
					setState(1637);
					match(EQ);
					setState(1641);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,166,_ctx);
					while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1+1 ) {
							{
							{
							setState(1638);
							matchWildcard();
							}
							} 
						}
						setState(1643);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,166,_ctx);
					}
					}
				}

				}
				break;
			case 9:
				_localctx = new SetQuotedConfigurationContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1646);
				match(SET);
				setState(1650);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,168,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1647);
						matchWildcard();
						}
						} 
					}
					setState(1652);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,168,_ctx);
				}
				setState(1653);
				match(EQ);
				setState(1654);
				configValue();
				}
				break;
			case 10:
				_localctx = new SetConfigurationContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1655);
				match(SET);
				setState(1659);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,169,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1656);
						matchWildcard();
						}
						} 
					}
					setState(1661);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,169,_ctx);
				}
				}
				break;
			case 11:
				_localctx = new ResetQuotedConfigurationContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1662);
				match(RESET);
				setState(1663);
				configKey();
				}
				break;
			case 12:
				_localctx = new ResetConfigurationContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1664);
				match(RESET);
				setState(1668);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,170,_ctx);
				while ( _alt!=1 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						setState(1665);
						matchWildcard();
						}
						} 
					}
					setState(1670);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,170,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecuteImmediateContext extends ParserRuleContext {
		public ExecuteImmediateQueryParamContext queryParam;
		public MultipartIdentifierListContext targetVariable;
		public TerminalNode EXECUTE() { return getToken(SqlBaseParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SqlBaseParser.IMMEDIATE, 0); }
		public ExecuteImmediateQueryParamContext executeImmediateQueryParam() {
			return getRuleContext(ExecuteImmediateQueryParamContext.class,0);
		}
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public ExecuteImmediateUsingContext executeImmediateUsing() {
			return getRuleContext(ExecuteImmediateUsingContext.class,0);
		}
		public MultipartIdentifierListContext multipartIdentifierList() {
			return getRuleContext(MultipartIdentifierListContext.class,0);
		}
		public ExecuteImmediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeImmediate; }
	}

	public final ExecuteImmediateContext executeImmediate() throws RecognitionException {
		ExecuteImmediateContext _localctx = new ExecuteImmediateContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_executeImmediate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1673);
			match(EXECUTE);
			setState(1674);
			match(IMMEDIATE);
			setState(1675);
			((ExecuteImmediateContext)_localctx).queryParam = executeImmediateQueryParam();
			setState(1678);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(1676);
				match(INTO);
				setState(1677);
				((ExecuteImmediateContext)_localctx).targetVariable = multipartIdentifierList();
				}
			}

			setState(1681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1680);
				executeImmediateUsing();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecuteImmediateUsingContext extends ParserRuleContext {
		public NamedExpressionSeqContext params;
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public NamedExpressionSeqContext namedExpressionSeq() {
			return getRuleContext(NamedExpressionSeqContext.class,0);
		}
		public ExecuteImmediateUsingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeImmediateUsing; }
	}

	public final ExecuteImmediateUsingContext executeImmediateUsing() throws RecognitionException {
		ExecuteImmediateUsingContext _localctx = new ExecuteImmediateUsingContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_executeImmediateUsing);
		try {
			setState(1690);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1683);
				match(USING);
				setState(1684);
				match(LEFT_PAREN);
				setState(1685);
				((ExecuteImmediateUsingContext)_localctx).params = namedExpressionSeq();
				setState(1686);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1688);
				match(USING);
				setState(1689);
				((ExecuteImmediateUsingContext)_localctx).params = namedExpressionSeq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecuteImmediateQueryParamContext extends ParserRuleContext {
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ExecuteImmediateQueryParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeImmediateQueryParam; }
	}

	public final ExecuteImmediateQueryParamContext executeImmediateQueryParam() throws RecognitionException {
		ExecuteImmediateQueryParamContext _localctx = new ExecuteImmediateQueryParamContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_executeImmediateQueryParam);
		try {
			setState(1694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1692);
				stringLit();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1693);
				multipartIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecuteImmediateArgumentContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext name;
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public ExecuteImmediateArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeImmediateArgument; }
	}

	public final ExecuteImmediateArgumentContext executeImmediateArgument() throws RecognitionException {
		ExecuteImmediateArgumentContext _localctx = new ExecuteImmediateArgumentContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_executeImmediateArgument);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1698);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				setState(1696);
				constant();
				}
				break;
			case 2:
				{
				setState(1697);
				multipartIdentifier();
				}
				break;
			}
			setState(1702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1700);
				match(AS);
				setState(1701);
				((ExecuteImmediateArgumentContext)_localctx).name = errorCapturingIdentifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExecuteImmediateArgumentSeqContext extends ParserRuleContext {
		public List<ExecuteImmediateArgumentContext> executeImmediateArgument() {
			return getRuleContexts(ExecuteImmediateArgumentContext.class);
		}
		public ExecuteImmediateArgumentContext executeImmediateArgument(int i) {
			return getRuleContext(ExecuteImmediateArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ExecuteImmediateArgumentSeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeImmediateArgumentSeq; }
	}

	public final ExecuteImmediateArgumentSeqContext executeImmediateArgumentSeq() throws RecognitionException {
		ExecuteImmediateArgumentSeqContext _localctx = new ExecuteImmediateArgumentSeqContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_executeImmediateArgumentSeq);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1704);
			executeImmediateArgument();
			setState(1709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1705);
				match(COMMA);
				setState(1706);
				executeImmediateArgument();
				}
				}
				setState(1711);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimezoneContext extends ParserRuleContext {
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(SqlBaseParser.LOCAL, 0); }
		public TimezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timezone; }
	}

	public final TimezoneContext timezone() throws RecognitionException {
		TimezoneContext _localctx = new TimezoneContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_timezone);
		try {
			setState(1714);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1712);
				stringLit();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1713);
				match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConfigKeyContext extends ParserRuleContext {
		public QuotedIdentifierContext quotedIdentifier() {
			return getRuleContext(QuotedIdentifierContext.class,0);
		}
		public ConfigKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_configKey; }
	}

	public final ConfigKeyContext configKey() throws RecognitionException {
		ConfigKeyContext _localctx = new ConfigKeyContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_configKey);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1716);
			quotedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConfigValueContext extends ParserRuleContext {
		public BackQuotedIdentifierContext backQuotedIdentifier() {
			return getRuleContext(BackQuotedIdentifierContext.class,0);
		}
		public ConfigValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_configValue; }
	}

	public final ConfigValueContext configValue() throws RecognitionException {
		ConfigValueContext _localctx = new ConfigValueContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_configValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1718);
			backQuotedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnsupportedHiveNativeCommandsContext extends ParserRuleContext {
		public Token kw1;
		public Token kw2;
		public Token kw3;
		public Token kw4;
		public Token kw5;
		public Token kw6;
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(SqlBaseParser.ROLE, 0); }
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode GRANT() { return getToken(SqlBaseParser.GRANT, 0); }
		public TerminalNode REVOKE() { return getToken(SqlBaseParser.REVOKE, 0); }
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode PRINCIPALS() { return getToken(SqlBaseParser.PRINCIPALS, 0); }
		public TerminalNode ROLES() { return getToken(SqlBaseParser.ROLES, 0); }
		public TerminalNode CURRENT() { return getToken(SqlBaseParser.CURRENT, 0); }
		public TerminalNode EXPORT() { return getToken(SqlBaseParser.EXPORT, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode IMPORT() { return getToken(SqlBaseParser.IMPORT, 0); }
		public TerminalNode COMPACTIONS() { return getToken(SqlBaseParser.COMPACTIONS, 0); }
		public TerminalNode TRANSACTIONS() { return getToken(SqlBaseParser.TRANSACTIONS, 0); }
		public TerminalNode INDEXES() { return getToken(SqlBaseParser.INDEXES, 0); }
		public TerminalNode LOCKS() { return getToken(SqlBaseParser.LOCKS, 0); }
		public TerminalNode INDEX() { return getToken(SqlBaseParser.INDEX, 0); }
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode LOCK() { return getToken(SqlBaseParser.LOCK, 0); }
		public TerminalNode DATABASE() { return getToken(SqlBaseParser.DATABASE, 0); }
		public TerminalNode UNLOCK() { return getToken(SqlBaseParser.UNLOCK, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode MACRO() { return getToken(SqlBaseParser.MACRO, 0); }
		public TableIdentifierContext tableIdentifier() {
			return getRuleContext(TableIdentifierContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode CLUSTERED() { return getToken(SqlBaseParser.CLUSTERED, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode SORTED() { return getToken(SqlBaseParser.SORTED, 0); }
		public TerminalNode SKEWED() { return getToken(SqlBaseParser.SKEWED, 0); }
		public TerminalNode STORED() { return getToken(SqlBaseParser.STORED, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode DIRECTORIES() { return getToken(SqlBaseParser.DIRECTORIES, 0); }
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode LOCATION() { return getToken(SqlBaseParser.LOCATION, 0); }
		public TerminalNode EXCHANGE() { return getToken(SqlBaseParser.EXCHANGE, 0); }
		public TerminalNode PARTITION() { return getToken(SqlBaseParser.PARTITION, 0); }
		public TerminalNode ARCHIVE() { return getToken(SqlBaseParser.ARCHIVE, 0); }
		public TerminalNode UNARCHIVE() { return getToken(SqlBaseParser.UNARCHIVE, 0); }
		public TerminalNode TOUCH() { return getToken(SqlBaseParser.TOUCH, 0); }
		public TerminalNode COMPACT() { return getToken(SqlBaseParser.COMPACT, 0); }
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode CONCATENATE() { return getToken(SqlBaseParser.CONCATENATE, 0); }
		public TerminalNode FILEFORMAT() { return getToken(SqlBaseParser.FILEFORMAT, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public TerminalNode START() { return getToken(SqlBaseParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(SqlBaseParser.TRANSACTION, 0); }
		public TerminalNode COMMIT() { return getToken(SqlBaseParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(SqlBaseParser.ROLLBACK, 0); }
		public TerminalNode DFS() { return getToken(SqlBaseParser.DFS, 0); }
		public UnsupportedHiveNativeCommandsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsupportedHiveNativeCommands; }
	}

	public final UnsupportedHiveNativeCommandsContext unsupportedHiveNativeCommands() throws RecognitionException {
		UnsupportedHiveNativeCommandsContext _localctx = new UnsupportedHiveNativeCommandsContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_unsupportedHiveNativeCommands);
		int _la;
		try {
			setState(1888);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1720);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(CREATE);
				setState(1721);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(ROLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1722);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(DROP);
				setState(1723);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(ROLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1724);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(GRANT);
				setState(1726);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
				case 1:
					{
					setState(1725);
					((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(ROLE);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1728);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(REVOKE);
				setState(1730);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
				case 1:
					{
					setState(1729);
					((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(ROLE);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1732);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1733);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(GRANT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1734);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1735);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(ROLE);
				setState(1737);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
				case 1:
					{
					setState(1736);
					((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(GRANT);
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1739);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1740);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(PRINCIPALS);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1741);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1742);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(ROLES);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1743);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1744);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(CURRENT);
				setState(1745);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(ROLES);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1746);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(EXPORT);
				setState(1747);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1748);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(IMPORT);
				setState(1749);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1750);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1751);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(COMPACTIONS);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1752);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1753);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(CREATE);
				setState(1754);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(TABLE);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1755);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1756);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TRANSACTIONS);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1757);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1758);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(INDEXES);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1759);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(SHOW);
				setState(1760);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(LOCKS);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1761);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(CREATE);
				setState(1762);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(INDEX);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1763);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(DROP);
				setState(1764);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(INDEX);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1765);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1766);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(INDEX);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1767);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(LOCK);
				setState(1768);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1769);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(LOCK);
				setState(1770);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(DATABASE);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1771);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(UNLOCK);
				setState(1772);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1773);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(UNLOCK);
				setState(1774);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(DATABASE);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1775);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(CREATE);
				setState(1776);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TEMPORARY);
				setState(1777);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(MACRO);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1778);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(DROP);
				setState(1779);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TEMPORARY);
				setState(1780);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(MACRO);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1781);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1782);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1783);
				tableIdentifier();
				setState(1784);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(NOT);
				setState(1785);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(CLUSTERED);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1787);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1788);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1789);
				tableIdentifier();
				setState(1790);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(CLUSTERED);
				setState(1791);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(BY);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1793);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1794);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1795);
				tableIdentifier();
				setState(1796);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(NOT);
				setState(1797);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(SORTED);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1799);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1800);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1801);
				tableIdentifier();
				setState(1802);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(SKEWED);
				setState(1803);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(BY);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1805);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1806);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1807);
				tableIdentifier();
				setState(1808);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(NOT);
				setState(1809);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(SKEWED);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1811);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1812);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1813);
				tableIdentifier();
				setState(1814);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(NOT);
				setState(1815);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(STORED);
				setState(1816);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw5 = match(AS);
				setState(1817);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw6 = match(DIRECTORIES);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1819);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1820);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1821);
				tableIdentifier();
				setState(1822);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(SET);
				setState(1823);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(SKEWED);
				setState(1824);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw5 = match(LOCATION);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1826);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1827);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1828);
				tableIdentifier();
				setState(1829);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(EXCHANGE);
				setState(1830);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(PARTITION);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1832);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1833);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1834);
				tableIdentifier();
				setState(1835);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(ARCHIVE);
				setState(1836);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(PARTITION);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1838);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1839);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1840);
				tableIdentifier();
				setState(1841);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(UNARCHIVE);
				setState(1842);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(PARTITION);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1844);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1845);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1846);
				tableIdentifier();
				setState(1847);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(TOUCH);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1849);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1850);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1851);
				tableIdentifier();
				setState(1853);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1852);
					partitionSpec();
					}
				}

				setState(1855);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(COMPACT);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1857);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1858);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1859);
				tableIdentifier();
				setState(1861);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1860);
					partitionSpec();
					}
				}

				setState(1863);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(CONCATENATE);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1865);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1866);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1867);
				tableIdentifier();
				setState(1869);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1868);
					partitionSpec();
					}
				}

				setState(1871);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(SET);
				setState(1872);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(FILEFORMAT);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1874);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ALTER);
				setState(1875);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TABLE);
				setState(1876);
				tableIdentifier();
				setState(1878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1877);
					partitionSpec();
					}
				}

				setState(1880);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw3 = match(REPLACE);
				setState(1881);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw4 = match(COLUMNS);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1883);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(START);
				setState(1884);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw2 = match(TRANSACTION);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1885);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(COMMIT);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1886);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(ROLLBACK);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1887);
				((UnsupportedHiveNativeCommandsContext)_localctx).kw1 = match(DFS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableHeaderContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode EXTERNAL() { return getToken(SqlBaseParser.EXTERNAL, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public CreateTableHeaderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableHeader; }
	}

	public final CreateTableHeaderContext createTableHeader() throws RecognitionException {
		CreateTableHeaderContext _localctx = new CreateTableHeaderContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_createTableHeader);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1890);
			match(CREATE);
			setState(1892);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(1891);
				match(TEMPORARY);
				}
			}

			setState(1895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(1894);
				match(EXTERNAL);
				}
			}

			setState(1897);
			match(TABLE);
			setState(1902);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				{
				setState(1898);
				match(IF);
				setState(1899);
				errorCapturingNot();
				setState(1900);
				match(EXISTS);
				}
				break;
			}
			setState(1904);
			identifierReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReplaceTableHeaderContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public ReplaceTableHeaderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceTableHeader; }
	}

	public final ReplaceTableHeaderContext replaceTableHeader() throws RecognitionException {
		ReplaceTableHeaderContext _localctx = new ReplaceTableHeaderContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_replaceTableHeader);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1908);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(1906);
				match(CREATE);
				setState(1907);
				match(OR);
				}
			}

			setState(1910);
			match(REPLACE);
			setState(1911);
			match(TABLE);
			setState(1912);
			identifierReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClusterBySpecContext extends ParserRuleContext {
		public TerminalNode CLUSTER() { return getToken(SqlBaseParser.CLUSTER, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public MultipartIdentifierListContext multipartIdentifierList() {
			return getRuleContext(MultipartIdentifierListContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public ClusterBySpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterBySpec; }
	}

	public final ClusterBySpecContext clusterBySpec() throws RecognitionException {
		ClusterBySpecContext _localctx = new ClusterBySpecContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_clusterBySpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1914);
			match(CLUSTER);
			setState(1915);
			match(BY);
			setState(1916);
			match(LEFT_PAREN);
			setState(1917);
			multipartIdentifierList();
			setState(1918);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BucketSpecContext extends ParserRuleContext {
		public TerminalNode CLUSTERED() { return getToken(SqlBaseParser.CLUSTERED, 0); }
		public List<TerminalNode> BY() { return getTokens(SqlBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SqlBaseParser.BY, i);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode BUCKETS() { return getToken(SqlBaseParser.BUCKETS, 0); }
		public TerminalNode SORTED() { return getToken(SqlBaseParser.SORTED, 0); }
		public OrderedIdentifierListContext orderedIdentifierList() {
			return getRuleContext(OrderedIdentifierListContext.class,0);
		}
		public BucketSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bucketSpec; }
	}

	public final BucketSpecContext bucketSpec() throws RecognitionException {
		BucketSpecContext _localctx = new BucketSpecContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_bucketSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1920);
			match(CLUSTERED);
			setState(1921);
			match(BY);
			setState(1922);
			identifierList();
			setState(1926);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SORTED) {
				{
				setState(1923);
				match(SORTED);
				setState(1924);
				match(BY);
				setState(1925);
				orderedIdentifierList();
				}
			}

			setState(1928);
			match(INTO);
			setState(1929);
			match(INTEGER_VALUE);
			setState(1930);
			match(BUCKETS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SkewSpecContext extends ParserRuleContext {
		public TerminalNode SKEWED() { return getToken(SqlBaseParser.SKEWED, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public ConstantListContext constantList() {
			return getRuleContext(ConstantListContext.class,0);
		}
		public NestedConstantListContext nestedConstantList() {
			return getRuleContext(NestedConstantListContext.class,0);
		}
		public TerminalNode STORED() { return getToken(SqlBaseParser.STORED, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode DIRECTORIES() { return getToken(SqlBaseParser.DIRECTORIES, 0); }
		public SkewSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_skewSpec; }
	}

	public final SkewSpecContext skewSpec() throws RecognitionException {
		SkewSpecContext _localctx = new SkewSpecContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_skewSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1932);
			match(SKEWED);
			setState(1933);
			match(BY);
			setState(1934);
			identifierList();
			setState(1935);
			match(ON);
			setState(1938);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				setState(1936);
				constantList();
				}
				break;
			case 2:
				{
				setState(1937);
				nestedConstantList();
				}
				break;
			}
			setState(1943);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				setState(1940);
				match(STORED);
				setState(1941);
				match(AS);
				setState(1942);
				match(DIRECTORIES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LocationSpecContext extends ParserRuleContext {
		public TerminalNode LOCATION() { return getToken(SqlBaseParser.LOCATION, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public LocationSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_locationSpec; }
	}

	public final LocationSpecContext locationSpec() throws RecognitionException {
		LocationSpecContext _localctx = new LocationSpecContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_locationSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1945);
			match(LOCATION);
			setState(1946);
			stringLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SchemaBindingContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlBaseParser.SCHEMA, 0); }
		public TerminalNode BINDING() { return getToken(SqlBaseParser.BINDING, 0); }
		public TerminalNode COMPENSATION() { return getToken(SqlBaseParser.COMPENSATION, 0); }
		public TerminalNode EVOLUTION() { return getToken(SqlBaseParser.EVOLUTION, 0); }
		public TerminalNode TYPE() { return getToken(SqlBaseParser.TYPE, 0); }
		public SchemaBindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaBinding; }
	}

	public final SchemaBindingContext schemaBinding() throws RecognitionException {
		SchemaBindingContext _localctx = new SchemaBindingContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_schemaBinding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1948);
			match(WITH);
			setState(1949);
			match(SCHEMA);
			setState(1955);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINDING:
				{
				setState(1950);
				match(BINDING);
				}
				break;
			case COMPENSATION:
				{
				setState(1951);
				match(COMPENSATION);
				}
				break;
			case EVOLUTION:
				{
				setState(1952);
				match(EVOLUTION);
				}
				break;
			case TYPE:
				{
				setState(1953);
				match(TYPE);
				setState(1954);
				match(EVOLUTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommentSpecContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(SqlBaseParser.COMMENT, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public CommentSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentSpec; }
	}

	public final CommentSpecContext commentSpec() throws RecognitionException {
		CommentSpecContext _localctx = new CommentSpecContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_commentSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1957);
			match(COMMENT);
			setState(1958);
			stringLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleQueryContext extends ParserRuleContext {
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SqlBaseParser.EOF, 0); }
		public SingleQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleQuery; }
	}

	public final SingleQueryContext singleQuery() throws RecognitionException {
		SingleQueryContext _localctx = new SingleQueryContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_singleQuery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1960);
			query();
			setState(1961);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryContext extends ParserRuleContext {
		public QueryTermContext queryTerm() {
			return getRuleContext(QueryTermContext.class,0);
		}
		public QueryOrganizationContext queryOrganization() {
			return getRuleContext(QueryOrganizationContext.class,0);
		}
		public CtesContext ctes() {
			return getRuleContext(CtesContext.class,0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query; }
	}

	public final QueryContext query() throws RecognitionException {
		QueryContext _localctx = new QueryContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_query);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1964);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1963);
				ctes();
				}
			}

			setState(1966);
			queryTerm(0);
			setState(1967);
			queryOrganization();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertIntoContext extends ParserRuleContext {
		public InsertIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertInto; }
	 
		public InsertIntoContext() { }
		public void copyFrom(InsertIntoContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class InsertIntoReplaceWhereContext extends InsertIntoContext {
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public OptionsClauseContext optionsClause() {
			return getRuleContext(OptionsClauseContext.class,0);
		}
		public InsertIntoReplaceWhereContext(InsertIntoContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class InsertOverwriteHiveDirContext extends InsertIntoContext {
		public StringLitContext path;
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode OVERWRITE() { return getToken(SqlBaseParser.OVERWRITE, 0); }
		public TerminalNode DIRECTORY() { return getToken(SqlBaseParser.DIRECTORY, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(SqlBaseParser.LOCAL, 0); }
		public RowFormatContext rowFormat() {
			return getRuleContext(RowFormatContext.class,0);
		}
		public CreateFileFormatContext createFileFormat() {
			return getRuleContext(CreateFileFormatContext.class,0);
		}
		public InsertOverwriteHiveDirContext(InsertIntoContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class InsertOverwriteDirContext extends InsertIntoContext {
		public StringLitContext path;
		public PropertyListContext options;
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode OVERWRITE() { return getToken(SqlBaseParser.OVERWRITE, 0); }
		public TerminalNode DIRECTORY() { return getToken(SqlBaseParser.DIRECTORY, 0); }
		public TableProviderContext tableProvider() {
			return getRuleContext(TableProviderContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(SqlBaseParser.LOCAL, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public InsertOverwriteDirContext(InsertIntoContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class InsertOverwriteTableContext extends InsertIntoContext {
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode OVERWRITE() { return getToken(SqlBaseParser.OVERWRITE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public OptionsClauseContext optionsClause() {
			return getRuleContext(OptionsClauseContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode NAME() { return getToken(SqlBaseParser.NAME, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public InsertOverwriteTableContext(InsertIntoContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class InsertIntoTableContext extends InsertIntoContext {
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public OptionsClauseContext optionsClause() {
			return getRuleContext(OptionsClauseContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode NAME() { return getToken(SqlBaseParser.NAME, 0); }
		public InsertIntoTableContext(InsertIntoContext ctx) { copyFrom(ctx); }
	}

	public final InsertIntoContext insertInto() throws RecognitionException {
		InsertIntoContext _localctx = new InsertIntoContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_insertInto);
		int _la;
		try {
			setState(2054);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
			case 1:
				_localctx = new InsertOverwriteTableContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1969);
				match(INSERT);
				setState(1970);
				match(OVERWRITE);
				setState(1972);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
				case 1:
					{
					setState(1971);
					match(TABLE);
					}
					break;
				}
				setState(1974);
				identifierReference();
				setState(1976);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
				case 1:
					{
					setState(1975);
					optionsClause();
					}
					break;
				}
				setState(1985);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1978);
					partitionSpec();
					setState(1983);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IF) {
						{
						setState(1979);
						match(IF);
						setState(1980);
						errorCapturingNot();
						setState(1981);
						match(EXISTS);
						}
					}

					}
				}

				setState(1990);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
				case 1:
					{
					{
					setState(1987);
					match(BY);
					setState(1988);
					match(NAME);
					}
					}
					break;
				case 2:
					{
					setState(1989);
					identifierList();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new InsertIntoTableContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1992);
				match(INSERT);
				setState(1993);
				match(INTO);
				setState(1995);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
				case 1:
					{
					setState(1994);
					match(TABLE);
					}
					break;
				}
				setState(1997);
				identifierReference();
				setState(1999);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
				case 1:
					{
					setState(1998);
					optionsClause();
					}
					break;
				}
				setState(2002);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(2001);
					partitionSpec();
					}
				}

				setState(2008);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2004);
					match(IF);
					setState(2005);
					errorCapturingNot();
					setState(2006);
					match(EXISTS);
					}
				}

				setState(2013);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
				case 1:
					{
					{
					setState(2010);
					match(BY);
					setState(2011);
					match(NAME);
					}
					}
					break;
				case 2:
					{
					setState(2012);
					identifierList();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new InsertIntoReplaceWhereContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2015);
				match(INSERT);
				setState(2016);
				match(INTO);
				setState(2018);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
				case 1:
					{
					setState(2017);
					match(TABLE);
					}
					break;
				}
				setState(2020);
				identifierReference();
				setState(2022);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2021);
					optionsClause();
					}
				}

				setState(2024);
				match(REPLACE);
				setState(2025);
				whereClause();
				}
				break;
			case 4:
				_localctx = new InsertOverwriteHiveDirContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2027);
				match(INSERT);
				setState(2028);
				match(OVERWRITE);
				setState(2030);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(2029);
					match(LOCAL);
					}
				}

				setState(2032);
				match(DIRECTORY);
				setState(2033);
				((InsertOverwriteHiveDirContext)_localctx).path = stringLit();
				setState(2035);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROW) {
					{
					setState(2034);
					rowFormat();
					}
				}

				setState(2038);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORED) {
					{
					setState(2037);
					createFileFormat();
					}
				}

				}
				break;
			case 5:
				_localctx = new InsertOverwriteDirContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2040);
				match(INSERT);
				setState(2041);
				match(OVERWRITE);
				setState(2043);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL) {
					{
					setState(2042);
					match(LOCAL);
					}
				}

				setState(2045);
				match(DIRECTORY);
				setState(2047);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
				case 1:
					{
					setState(2046);
					((InsertOverwriteDirContext)_localctx).path = stringLit();
					}
					break;
				}
				setState(2049);
				tableProvider();
				setState(2052);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(2050);
					match(OPTIONS);
					setState(2051);
					((InsertOverwriteDirContext)_localctx).options = propertyList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionSpecLocationContext extends ParserRuleContext {
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public LocationSpecContext locationSpec() {
			return getRuleContext(LocationSpecContext.class,0);
		}
		public PartitionSpecLocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionSpecLocation; }
	}

	public final PartitionSpecLocationContext partitionSpecLocation() throws RecognitionException {
		PartitionSpecLocationContext _localctx = new PartitionSpecLocationContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_partitionSpecLocation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2056);
			partitionSpec();
			setState(2058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCATION) {
				{
				setState(2057);
				locationSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionSpecContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(SqlBaseParser.PARTITION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<PartitionValContext> partitionVal() {
			return getRuleContexts(PartitionValContext.class);
		}
		public PartitionValContext partitionVal(int i) {
			return getRuleContext(PartitionValContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public PartitionSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionSpec; }
	}

	public final PartitionSpecContext partitionSpec() throws RecognitionException {
		PartitionSpecContext _localctx = new PartitionSpecContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_partitionSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2060);
			match(PARTITION);
			setState(2061);
			match(LEFT_PAREN);
			setState(2062);
			partitionVal();
			setState(2067);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2063);
				match(COMMA);
				setState(2064);
				partitionVal();
				}
				}
				setState(2069);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2070);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionValContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public PartitionValContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionVal; }
	}

	public final PartitionValContext partitionVal() throws RecognitionException {
		PartitionValContext _localctx = new PartitionValContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_partitionVal);
		int _la;
		try {
			setState(2081);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2072);
				identifier();
				setState(2075);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ) {
					{
					setState(2073);
					match(EQ);
					setState(2074);
					constant();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2077);
				identifier();
				setState(2078);
				match(EQ);
				setState(2079);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NamespaceContext extends ParserRuleContext {
		public TerminalNode NAMESPACE() { return getToken(SqlBaseParser.NAMESPACE, 0); }
		public TerminalNode DATABASE() { return getToken(SqlBaseParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlBaseParser.SCHEMA, 0); }
		public NamespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespace; }
	}

	public final NamespaceContext namespace() throws RecognitionException {
		NamespaceContext _localctx = new NamespaceContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_namespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2083);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==NAMESPACE || _la==SCHEMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NamespacesContext extends ParserRuleContext {
		public TerminalNode NAMESPACES() { return getToken(SqlBaseParser.NAMESPACES, 0); }
		public TerminalNode DATABASES() { return getToken(SqlBaseParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(SqlBaseParser.SCHEMAS, 0); }
		public NamespacesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namespaces; }
	}

	public final NamespacesContext namespaces() throws RecognitionException {
		NamespacesContext _localctx = new NamespacesContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_namespaces);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2085);
			_la = _input.LA(1);
			if ( !(_la==DATABASES || _la==NAMESPACES || _la==SCHEMAS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariableContext extends ParserRuleContext {
		public TerminalNode VARIABLE() { return getToken(SqlBaseParser.VARIABLE, 0); }
		public TerminalNode VAR() { return getToken(SqlBaseParser.VAR, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable; }
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2087);
			_la = _input.LA(1);
			if ( !(_la==VAR || _la==VARIABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DescribeFuncNameContext extends ParserRuleContext {
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public ArithmeticOperatorContext arithmeticOperator() {
			return getRuleContext(ArithmeticOperatorContext.class,0);
		}
		public PredicateOperatorContext predicateOperator() {
			return getRuleContext(PredicateOperatorContext.class,0);
		}
		public ShiftOperatorContext shiftOperator() {
			return getRuleContext(ShiftOperatorContext.class,0);
		}
		public TerminalNode BANG() { return getToken(SqlBaseParser.BANG, 0); }
		public DescribeFuncNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeFuncName; }
	}

	public final DescribeFuncNameContext describeFuncName() throws RecognitionException {
		DescribeFuncNameContext _localctx = new DescribeFuncNameContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_describeFuncName);
		try {
			setState(2096);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2089);
				identifierReference();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2090);
				stringLit();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2091);
				comparisonOperator();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2092);
				arithmeticOperator();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2093);
				predicateOperator();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2094);
				shiftOperator();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2095);
				match(BANG);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DescribeColNameContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier;
		public List<ErrorCapturingIdentifierContext> nameParts = new ArrayList<ErrorCapturingIdentifierContext>();
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(SqlBaseParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SqlBaseParser.DOT, i);
		}
		public DescribeColNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeColName; }
	}

	public final DescribeColNameContext describeColName() throws RecognitionException {
		DescribeColNameContext _localctx = new DescribeColNameContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_describeColName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2098);
			((DescribeColNameContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
			((DescribeColNameContext)_localctx).nameParts.add(((DescribeColNameContext)_localctx).errorCapturingIdentifier);
			setState(2103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DOT) {
				{
				{
				setState(2099);
				match(DOT);
				setState(2100);
				((DescribeColNameContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
				((DescribeColNameContext)_localctx).nameParts.add(((DescribeColNameContext)_localctx).errorCapturingIdentifier);
				}
				}
				setState(2105);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CtesContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public List<NamedQueryContext> namedQuery() {
			return getRuleContexts(NamedQueryContext.class);
		}
		public NamedQueryContext namedQuery(int i) {
			return getRuleContext(NamedQueryContext.class,i);
		}
		public TerminalNode RECURSIVE() { return getToken(SqlBaseParser.RECURSIVE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public CtesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ctes; }
	}

	public final CtesContext ctes() throws RecognitionException {
		CtesContext _localctx = new CtesContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_ctes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2106);
			match(WITH);
			setState(2108);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				{
				setState(2107);
				match(RECURSIVE);
				}
				break;
			}
			setState(2110);
			namedQuery();
			setState(2115);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2111);
				match(COMMA);
				setState(2112);
				namedQuery();
				}
				}
				setState(2117);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NamedQueryContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext name;
		public IdentifierListContext columnAliases;
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public NamedQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedQuery; }
	}

	public final NamedQueryContext namedQuery() throws RecognitionException {
		NamedQueryContext _localctx = new NamedQueryContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_namedQuery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2118);
			((NamedQueryContext)_localctx).name = errorCapturingIdentifier();
			setState(2120);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				{
				setState(2119);
				((NamedQueryContext)_localctx).columnAliases = identifierList();
				}
				break;
			}
			setState(2123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2122);
				match(AS);
				}
			}

			setState(2125);
			match(LEFT_PAREN);
			setState(2126);
			query();
			setState(2127);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableProviderContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TableProviderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableProvider; }
	}

	public final TableProviderContext tableProvider() throws RecognitionException {
		TableProviderContext _localctx = new TableProviderContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_tableProvider);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2129);
			match(USING);
			setState(2130);
			multipartIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateTableClausesContext extends ParserRuleContext {
		public ExpressionPropertyListContext options;
		public PartitionFieldListContext partitioning;
		public PropertyListContext tableProps;
		public List<SkewSpecContext> skewSpec() {
			return getRuleContexts(SkewSpecContext.class);
		}
		public SkewSpecContext skewSpec(int i) {
			return getRuleContext(SkewSpecContext.class,i);
		}
		public List<ClusterBySpecContext> clusterBySpec() {
			return getRuleContexts(ClusterBySpecContext.class);
		}
		public ClusterBySpecContext clusterBySpec(int i) {
			return getRuleContext(ClusterBySpecContext.class,i);
		}
		public List<BucketSpecContext> bucketSpec() {
			return getRuleContexts(BucketSpecContext.class);
		}
		public BucketSpecContext bucketSpec(int i) {
			return getRuleContext(BucketSpecContext.class,i);
		}
		public List<RowFormatContext> rowFormat() {
			return getRuleContexts(RowFormatContext.class);
		}
		public RowFormatContext rowFormat(int i) {
			return getRuleContext(RowFormatContext.class,i);
		}
		public List<CreateFileFormatContext> createFileFormat() {
			return getRuleContexts(CreateFileFormatContext.class);
		}
		public CreateFileFormatContext createFileFormat(int i) {
			return getRuleContext(CreateFileFormatContext.class,i);
		}
		public List<LocationSpecContext> locationSpec() {
			return getRuleContexts(LocationSpecContext.class);
		}
		public LocationSpecContext locationSpec(int i) {
			return getRuleContext(LocationSpecContext.class,i);
		}
		public List<CommentSpecContext> commentSpec() {
			return getRuleContexts(CommentSpecContext.class);
		}
		public CommentSpecContext commentSpec(int i) {
			return getRuleContext(CommentSpecContext.class,i);
		}
		public List<CollationSpecContext> collationSpec() {
			return getRuleContexts(CollationSpecContext.class);
		}
		public CollationSpecContext collationSpec(int i) {
			return getRuleContext(CollationSpecContext.class,i);
		}
		public List<TerminalNode> OPTIONS() { return getTokens(SqlBaseParser.OPTIONS); }
		public TerminalNode OPTIONS(int i) {
			return getToken(SqlBaseParser.OPTIONS, i);
		}
		public List<TerminalNode> PARTITIONED() { return getTokens(SqlBaseParser.PARTITIONED); }
		public TerminalNode PARTITIONED(int i) {
			return getToken(SqlBaseParser.PARTITIONED, i);
		}
		public List<TerminalNode> BY() { return getTokens(SqlBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SqlBaseParser.BY, i);
		}
		public List<TerminalNode> TBLPROPERTIES() { return getTokens(SqlBaseParser.TBLPROPERTIES); }
		public TerminalNode TBLPROPERTIES(int i) {
			return getToken(SqlBaseParser.TBLPROPERTIES, i);
		}
		public List<ExpressionPropertyListContext> expressionPropertyList() {
			return getRuleContexts(ExpressionPropertyListContext.class);
		}
		public ExpressionPropertyListContext expressionPropertyList(int i) {
			return getRuleContext(ExpressionPropertyListContext.class,i);
		}
		public List<PartitionFieldListContext> partitionFieldList() {
			return getRuleContexts(PartitionFieldListContext.class);
		}
		public PartitionFieldListContext partitionFieldList(int i) {
			return getRuleContext(PartitionFieldListContext.class,i);
		}
		public List<PropertyListContext> propertyList() {
			return getRuleContexts(PropertyListContext.class);
		}
		public PropertyListContext propertyList(int i) {
			return getRuleContext(PropertyListContext.class,i);
		}
		public CreateTableClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableClauses; }
	}

	public final CreateTableClausesContext createTableClauses() throws RecognitionException {
		CreateTableClausesContext _localctx = new CreateTableClausesContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_createTableClauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & 8796093022467L) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & 281612415664129L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & 17594334052353L) != 0)) {
				{
				setState(2147);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPTIONS:
					{
					{
					setState(2132);
					match(OPTIONS);
					setState(2133);
					((CreateTableClausesContext)_localctx).options = expressionPropertyList();
					}
					}
					break;
				case PARTITIONED:
					{
					{
					setState(2134);
					match(PARTITIONED);
					setState(2135);
					match(BY);
					setState(2136);
					((CreateTableClausesContext)_localctx).partitioning = partitionFieldList();
					}
					}
					break;
				case SKEWED:
					{
					setState(2137);
					skewSpec();
					}
					break;
				case CLUSTER:
					{
					setState(2138);
					clusterBySpec();
					}
					break;
				case CLUSTERED:
					{
					setState(2139);
					bucketSpec();
					}
					break;
				case ROW:
					{
					setState(2140);
					rowFormat();
					}
					break;
				case STORED:
					{
					setState(2141);
					createFileFormat();
					}
					break;
				case LOCATION:
					{
					setState(2142);
					locationSpec();
					}
					break;
				case COMMENT:
					{
					setState(2143);
					commentSpec();
					}
					break;
				case DEFAULT:
					{
					setState(2144);
					collationSpec();
					}
					break;
				case TBLPROPERTIES:
					{
					{
					setState(2145);
					match(TBLPROPERTIES);
					setState(2146);
					((CreateTableClausesContext)_localctx).tableProps = propertyList();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2151);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<PropertyContext> property() {
			return getRuleContexts(PropertyContext.class);
		}
		public PropertyContext property(int i) {
			return getRuleContext(PropertyContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public PropertyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyList; }
	}

	public final PropertyListContext propertyList() throws RecognitionException {
		PropertyListContext _localctx = new PropertyListContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_propertyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2152);
			match(LEFT_PAREN);
			setState(2153);
			property();
			setState(2158);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2154);
				match(COMMA);
				setState(2155);
				property();
				}
				}
				setState(2160);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2161);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyContext extends ParserRuleContext {
		public PropertyKeyContext key;
		public PropertyValueContext value;
		public PropertyKeyContext propertyKey() {
			return getRuleContext(PropertyKeyContext.class,0);
		}
		public PropertyValueContext propertyValue() {
			return getRuleContext(PropertyValueContext.class,0);
		}
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public PropertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_property; }
	}

	public final PropertyContext property() throws RecognitionException {
		PropertyContext _localctx = new PropertyContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_property);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2163);
			((PropertyContext)_localctx).key = propertyKey();
			setState(2168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				setState(2165);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
				case 1:
					{
					setState(2164);
					match(EQ);
					}
					break;
				}
				setState(2167);
				((PropertyContext)_localctx).value = propertyValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyKeyContext extends ParserRuleContext {
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(SqlBaseParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SqlBaseParser.DOT, i);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public PropertyKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyKey; }
	}

	public final PropertyKeyContext propertyKey() throws RecognitionException {
		PropertyKeyContext _localctx = new PropertyKeyContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_propertyKey);
		try {
			int _alt;
			setState(2179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2170);
				errorCapturingIdentifier();
				setState(2175);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,231,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2171);
						match(DOT);
						setState(2172);
						errorCapturingIdentifier();
						}
						} 
					}
					setState(2177);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,231,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2178);
				stringLit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyValueContext extends ParserRuleContext {
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode DECIMAL_VALUE() { return getToken(SqlBaseParser.DECIMAL_VALUE, 0); }
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public PropertyValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyValue; }
	}

	public final PropertyValueContext propertyValue() throws RecognitionException {
		PropertyValueContext _localctx = new PropertyValueContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_propertyValue);
		try {
			setState(2185);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2181);
				match(INTEGER_VALUE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2182);
				match(DECIMAL_VALUE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2183);
				booleanValue();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2184);
				stringLit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionPropertyListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<ExpressionPropertyContext> expressionProperty() {
			return getRuleContexts(ExpressionPropertyContext.class);
		}
		public ExpressionPropertyContext expressionProperty(int i) {
			return getRuleContext(ExpressionPropertyContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ExpressionPropertyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionPropertyList; }
	}

	public final ExpressionPropertyListContext expressionPropertyList() throws RecognitionException {
		ExpressionPropertyListContext _localctx = new ExpressionPropertyListContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_expressionPropertyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2187);
			match(LEFT_PAREN);
			setState(2188);
			expressionProperty();
			setState(2193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2189);
				match(COMMA);
				setState(2190);
				expressionProperty();
				}
				}
				setState(2195);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2196);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionPropertyContext extends ParserRuleContext {
		public PropertyKeyContext key;
		public ExpressionContext value;
		public PropertyKeyContext propertyKey() {
			return getRuleContext(PropertyKeyContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public ExpressionPropertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionProperty; }
	}

	public final ExpressionPropertyContext expressionProperty() throws RecognitionException {
		ExpressionPropertyContext _localctx = new ExpressionPropertyContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_expressionProperty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2198);
			((ExpressionPropertyContext)_localctx).key = propertyKey();
			setState(2203);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				{
				setState(2200);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
				case 1:
					{
					setState(2199);
					match(EQ);
					}
					break;
				}
				setState(2202);
				((ExpressionPropertyContext)_localctx).value = expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstantListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ConstantListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constantList; }
	}

	public final ConstantListContext constantList() throws RecognitionException {
		ConstantListContext _localctx = new ConstantListContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_constantList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2205);
			match(LEFT_PAREN);
			setState(2206);
			constant();
			setState(2211);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2207);
				match(COMMA);
				setState(2208);
				constant();
				}
				}
				setState(2213);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2214);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NestedConstantListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<ConstantListContext> constantList() {
			return getRuleContexts(ConstantListContext.class);
		}
		public ConstantListContext constantList(int i) {
			return getRuleContext(ConstantListContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public NestedConstantListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nestedConstantList; }
	}

	public final NestedConstantListContext nestedConstantList() throws RecognitionException {
		NestedConstantListContext _localctx = new NestedConstantListContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_nestedConstantList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2216);
			match(LEFT_PAREN);
			setState(2217);
			constantList();
			setState(2222);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2218);
				match(COMMA);
				setState(2219);
				constantList();
				}
				}
				setState(2224);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2225);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateFileFormatContext extends ParserRuleContext {
		public TerminalNode STORED() { return getToken(SqlBaseParser.STORED, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public FileFormatContext fileFormat() {
			return getRuleContext(FileFormatContext.class,0);
		}
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public StorageHandlerContext storageHandler() {
			return getRuleContext(StorageHandlerContext.class,0);
		}
		public CreateFileFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFileFormat; }
	}

	public final CreateFileFormatContext createFileFormat() throws RecognitionException {
		CreateFileFormatContext _localctx = new CreateFileFormatContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_createFileFormat);
		try {
			setState(2233);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2227);
				match(STORED);
				setState(2228);
				match(AS);
				setState(2229);
				fileFormat();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2230);
				match(STORED);
				setState(2231);
				match(BY);
				setState(2232);
				storageHandler();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FileFormatContext extends ParserRuleContext {
		public FileFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileFormat; }
	 
		public FileFormatContext() { }
		public void copyFrom(FileFormatContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableFileFormatContext extends FileFormatContext {
		public StringLitContext inFmt;
		public StringLitContext outFmt;
		public TerminalNode INPUTFORMAT() { return getToken(SqlBaseParser.INPUTFORMAT, 0); }
		public TerminalNode OUTPUTFORMAT() { return getToken(SqlBaseParser.OUTPUTFORMAT, 0); }
		public List<StringLitContext> stringLit() {
			return getRuleContexts(StringLitContext.class);
		}
		public StringLitContext stringLit(int i) {
			return getRuleContext(StringLitContext.class,i);
		}
		public TableFileFormatContext(FileFormatContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GenericFileFormatContext extends FileFormatContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public GenericFileFormatContext(FileFormatContext ctx) { copyFrom(ctx); }
	}

	public final FileFormatContext fileFormat() throws RecognitionException {
		FileFormatContext _localctx = new FileFormatContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_fileFormat);
		try {
			setState(2241);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				_localctx = new TableFileFormatContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2235);
				match(INPUTFORMAT);
				setState(2236);
				((TableFileFormatContext)_localctx).inFmt = stringLit();
				setState(2237);
				match(OUTPUTFORMAT);
				setState(2238);
				((TableFileFormatContext)_localctx).outFmt = stringLit();
				}
				break;
			case 2:
				_localctx = new GenericFileFormatContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2240);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StorageHandlerContext extends ParserRuleContext {
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode SERDEPROPERTIES() { return getToken(SqlBaseParser.SERDEPROPERTIES, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public StorageHandlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageHandler; }
	}

	public final StorageHandlerContext storageHandler() throws RecognitionException {
		StorageHandlerContext _localctx = new StorageHandlerContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_storageHandler);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2243);
			stringLit();
			setState(2247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				setState(2244);
				match(WITH);
				setState(2245);
				match(SERDEPROPERTIES);
				setState(2246);
				propertyList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ResourceContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resource; }
	}

	public final ResourceContext resource() throws RecognitionException {
		ResourceContext _localctx = new ResourceContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_resource);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2249);
			identifier();
			setState(2250);
			stringLit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DmlStatementNoWithContext extends ParserRuleContext {
		public DmlStatementNoWithContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlStatementNoWith; }
	 
		public DmlStatementNoWithContext() { }
		public void copyFrom(DmlStatementNoWithContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DeleteFromTableContext extends DmlStatementNoWithContext {
		public TerminalNode DELETE() { return getToken(SqlBaseParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public DeleteFromTableContext(DmlStatementNoWithContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SingleInsertQueryContext extends DmlStatementNoWithContext {
		public InsertIntoContext insertInto() {
			return getRuleContext(InsertIntoContext.class,0);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public SingleInsertQueryContext(DmlStatementNoWithContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class MultiInsertQueryContext extends DmlStatementNoWithContext {
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public List<MultiInsertQueryBodyContext> multiInsertQueryBody() {
			return getRuleContexts(MultiInsertQueryBodyContext.class);
		}
		public MultiInsertQueryBodyContext multiInsertQueryBody(int i) {
			return getRuleContext(MultiInsertQueryBodyContext.class,i);
		}
		public MultiInsertQueryContext(DmlStatementNoWithContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UpdateTableContext extends DmlStatementNoWithContext {
		public TerminalNode UPDATE() { return getToken(SqlBaseParser.UPDATE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public SetClauseContext setClause() {
			return getRuleContext(SetClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public UpdateTableContext(DmlStatementNoWithContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class MergeIntoTableContext extends DmlStatementNoWithContext {
		public IdentifierReferenceContext target;
		public TableAliasContext targetAlias;
		public IdentifierReferenceContext source;
		public QueryContext sourceQuery;
		public TableAliasContext sourceAlias;
		public BooleanExpressionContext mergeCondition;
		public TerminalNode MERGE() { return getToken(SqlBaseParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public List<IdentifierReferenceContext> identifierReference() {
			return getRuleContexts(IdentifierReferenceContext.class);
		}
		public IdentifierReferenceContext identifierReference(int i) {
			return getRuleContext(IdentifierReferenceContext.class,i);
		}
		public List<TableAliasContext> tableAlias() {
			return getRuleContexts(TableAliasContext.class);
		}
		public TableAliasContext tableAlias(int i) {
			return getRuleContext(TableAliasContext.class,i);
		}
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlBaseParser.SCHEMA, 0); }
		public TerminalNode EVOLUTION() { return getToken(SqlBaseParser.EVOLUTION, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public List<MatchedClauseContext> matchedClause() {
			return getRuleContexts(MatchedClauseContext.class);
		}
		public MatchedClauseContext matchedClause(int i) {
			return getRuleContext(MatchedClauseContext.class,i);
		}
		public List<NotMatchedClauseContext> notMatchedClause() {
			return getRuleContexts(NotMatchedClauseContext.class);
		}
		public NotMatchedClauseContext notMatchedClause(int i) {
			return getRuleContext(NotMatchedClauseContext.class,i);
		}
		public List<NotMatchedBySourceClauseContext> notMatchedBySourceClause() {
			return getRuleContexts(NotMatchedBySourceClauseContext.class);
		}
		public NotMatchedBySourceClauseContext notMatchedBySourceClause(int i) {
			return getRuleContext(NotMatchedBySourceClauseContext.class,i);
		}
		public MergeIntoTableContext(DmlStatementNoWithContext ctx) { copyFrom(ctx); }
	}

	public final DmlStatementNoWithContext dmlStatementNoWith() throws RecognitionException {
		DmlStatementNoWithContext _localctx = new DmlStatementNoWithContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_dmlStatementNoWith);
		int _la;
		try {
			int _alt;
			setState(2313);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSERT:
				_localctx = new SingleInsertQueryContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2252);
				insertInto();
				setState(2253);
				query();
				}
				break;
			case FROM:
				_localctx = new MultiInsertQueryContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2255);
				fromClause();
				setState(2257); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2256);
					multiInsertQueryBody();
					}
					}
					setState(2259); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INSERT );
				}
				break;
			case DELETE:
				_localctx = new DeleteFromTableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2261);
				match(DELETE);
				setState(2262);
				match(FROM);
				setState(2263);
				identifierReference();
				setState(2264);
				tableAlias();
				setState(2266);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(2265);
					whereClause();
					}
				}

				}
				break;
			case UPDATE:
				_localctx = new UpdateTableContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2268);
				match(UPDATE);
				setState(2269);
				identifierReference();
				setState(2270);
				tableAlias();
				setState(2271);
				setClause();
				setState(2273);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(2272);
					whereClause();
					}
				}

				}
				break;
			case MERGE:
				_localctx = new MergeIntoTableContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2275);
				match(MERGE);
				setState(2279);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2276);
					match(WITH);
					setState(2277);
					match(SCHEMA);
					setState(2278);
					match(EVOLUTION);
					}
				}

				setState(2281);
				match(INTO);
				setState(2282);
				((MergeIntoTableContext)_localctx).target = identifierReference();
				setState(2283);
				((MergeIntoTableContext)_localctx).targetAlias = tableAlias();
				setState(2284);
				match(USING);
				setState(2290);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
				case 1:
					{
					setState(2285);
					((MergeIntoTableContext)_localctx).source = identifierReference();
					}
					break;
				case 2:
					{
					setState(2286);
					match(LEFT_PAREN);
					setState(2287);
					((MergeIntoTableContext)_localctx).sourceQuery = query();
					setState(2288);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(2292);
				((MergeIntoTableContext)_localctx).sourceAlias = tableAlias();
				setState(2293);
				match(ON);
				setState(2294);
				((MergeIntoTableContext)_localctx).mergeCondition = booleanExpression(0);
				setState(2298);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,247,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2295);
						matchedClause();
						}
						} 
					}
					setState(2300);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,247,_ctx);
				}
				setState(2304);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,248,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2301);
						notMatchedClause();
						}
						} 
					}
					setState(2306);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,248,_ctx);
				}
				setState(2310);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==WHEN) {
					{
					{
					setState(2307);
					notMatchedBySourceClause();
					}
					}
					setState(2312);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierReferenceContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_KW() { return getToken(SqlBaseParser.IDENTIFIER_KW, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public IdentifierReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierReference; }
	}

	public final IdentifierReferenceContext identifierReference() throws RecognitionException {
		IdentifierReferenceContext _localctx = new IdentifierReferenceContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_identifierReference);
		try {
			setState(2321);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2315);
				match(IDENTIFIER_KW);
				setState(2316);
				match(LEFT_PAREN);
				setState(2317);
				expression();
				setState(2318);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2320);
				multipartIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CatalogIdentifierReferenceContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_KW() { return getToken(SqlBaseParser.IDENTIFIER_KW, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public CatalogIdentifierReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalogIdentifierReference; }
	}

	public final CatalogIdentifierReferenceContext catalogIdentifierReference() throws RecognitionException {
		CatalogIdentifierReferenceContext _localctx = new CatalogIdentifierReferenceContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_catalogIdentifierReference);
		try {
			setState(2330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2323);
				match(IDENTIFIER_KW);
				setState(2324);
				match(LEFT_PAREN);
				setState(2325);
				expression();
				setState(2326);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2328);
				errorCapturingIdentifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2329);
				stringLit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryOrganizationContext extends ParserRuleContext {
		public SortItemContext sortItem;
		public List<SortItemContext> order = new ArrayList<SortItemContext>();
		public ExpressionContext expression;
		public List<ExpressionContext> clusterBy = new ArrayList<ExpressionContext>();
		public List<ExpressionContext> distributeBy = new ArrayList<ExpressionContext>();
		public List<SortItemContext> sort = new ArrayList<SortItemContext>();
		public ExpressionContext limit;
		public ExpressionContext offset;
		public TerminalNode ORDER() { return getToken(SqlBaseParser.ORDER, 0); }
		public List<TerminalNode> BY() { return getTokens(SqlBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SqlBaseParser.BY, i);
		}
		public TerminalNode CLUSTER() { return getToken(SqlBaseParser.CLUSTER, 0); }
		public TerminalNode DISTRIBUTE() { return getToken(SqlBaseParser.DISTRIBUTE, 0); }
		public TerminalNode SORT() { return getToken(SqlBaseParser.SORT, 0); }
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(SqlBaseParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(SqlBaseParser.OFFSET, 0); }
		public List<SortItemContext> sortItem() {
			return getRuleContexts(SortItemContext.class);
		}
		public SortItemContext sortItem(int i) {
			return getRuleContext(SortItemContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode ALL() { return getToken(SqlBaseParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public QueryOrganizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryOrganization; }
	}

	public final QueryOrganizationContext queryOrganization() throws RecognitionException {
		QueryOrganizationContext _localctx = new QueryOrganizationContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_queryOrganization);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2342);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
			case 1:
				{
				setState(2332);
				match(ORDER);
				setState(2333);
				match(BY);
				setState(2334);
				((QueryOrganizationContext)_localctx).sortItem = sortItem();
				((QueryOrganizationContext)_localctx).order.add(((QueryOrganizationContext)_localctx).sortItem);
				setState(2339);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,253,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2335);
						match(COMMA);
						setState(2336);
						((QueryOrganizationContext)_localctx).sortItem = sortItem();
						((QueryOrganizationContext)_localctx).order.add(((QueryOrganizationContext)_localctx).sortItem);
						}
						} 
					}
					setState(2341);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,253,_ctx);
				}
				}
				break;
			}
			setState(2354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				{
				setState(2344);
				match(CLUSTER);
				setState(2345);
				match(BY);
				setState(2346);
				((QueryOrganizationContext)_localctx).expression = expression();
				((QueryOrganizationContext)_localctx).clusterBy.add(((QueryOrganizationContext)_localctx).expression);
				setState(2351);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,255,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2347);
						match(COMMA);
						setState(2348);
						((QueryOrganizationContext)_localctx).expression = expression();
						((QueryOrganizationContext)_localctx).clusterBy.add(((QueryOrganizationContext)_localctx).expression);
						}
						} 
					}
					setState(2353);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,255,_ctx);
				}
				}
				break;
			}
			setState(2366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
			case 1:
				{
				setState(2356);
				match(DISTRIBUTE);
				setState(2357);
				match(BY);
				setState(2358);
				((QueryOrganizationContext)_localctx).expression = expression();
				((QueryOrganizationContext)_localctx).distributeBy.add(((QueryOrganizationContext)_localctx).expression);
				setState(2363);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,257,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2359);
						match(COMMA);
						setState(2360);
						((QueryOrganizationContext)_localctx).expression = expression();
						((QueryOrganizationContext)_localctx).distributeBy.add(((QueryOrganizationContext)_localctx).expression);
						}
						} 
					}
					setState(2365);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,257,_ctx);
				}
				}
				break;
			}
			setState(2378);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
			case 1:
				{
				setState(2368);
				match(SORT);
				setState(2369);
				match(BY);
				setState(2370);
				((QueryOrganizationContext)_localctx).sortItem = sortItem();
				((QueryOrganizationContext)_localctx).sort.add(((QueryOrganizationContext)_localctx).sortItem);
				setState(2375);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,259,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2371);
						match(COMMA);
						setState(2372);
						((QueryOrganizationContext)_localctx).sortItem = sortItem();
						((QueryOrganizationContext)_localctx).sort.add(((QueryOrganizationContext)_localctx).sortItem);
						}
						} 
					}
					setState(2377);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,259,_ctx);
				}
				}
				break;
			}
			setState(2381);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
			case 1:
				{
				setState(2380);
				windowClause();
				}
				break;
			}
			setState(2388);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
			case 1:
				{
				setState(2383);
				match(LIMIT);
				setState(2386);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
				case 1:
					{
					setState(2384);
					match(ALL);
					}
					break;
				case 2:
					{
					setState(2385);
					((QueryOrganizationContext)_localctx).limit = expression();
					}
					break;
				}
				}
				break;
			}
			setState(2392);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				{
				setState(2390);
				match(OFFSET);
				setState(2391);
				((QueryOrganizationContext)_localctx).offset = expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MultiInsertQueryBodyContext extends ParserRuleContext {
		public InsertIntoContext insertInto() {
			return getRuleContext(InsertIntoContext.class,0);
		}
		public FromStatementBodyContext fromStatementBody() {
			return getRuleContext(FromStatementBodyContext.class,0);
		}
		public MultiInsertQueryBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiInsertQueryBody; }
	}

	public final MultiInsertQueryBodyContext multiInsertQueryBody() throws RecognitionException {
		MultiInsertQueryBodyContext _localctx = new MultiInsertQueryBodyContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_multiInsertQueryBody);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2394);
			insertInto();
			setState(2395);
			fromStatementBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryTermContext extends ParserRuleContext {
		public QueryTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryTerm; }
	 
		public QueryTermContext() { }
		public void copyFrom(QueryTermContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class OperatorPipeStatementContext extends QueryTermContext {
		public QueryTermContext left;
		public TerminalNode OPERATOR_PIPE() { return getToken(SqlBaseParser.OPERATOR_PIPE, 0); }
		public OperatorPipeRightSideContext operatorPipeRightSide() {
			return getRuleContext(OperatorPipeRightSideContext.class,0);
		}
		public QueryTermContext queryTerm() {
			return getRuleContext(QueryTermContext.class,0);
		}
		public OperatorPipeStatementContext(QueryTermContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class QueryTermDefaultContext extends QueryTermContext {
		public QueryPrimaryContext queryPrimary() {
			return getRuleContext(QueryPrimaryContext.class,0);
		}
		public QueryTermDefaultContext(QueryTermContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SetOperationContext extends QueryTermContext {
		public QueryTermContext left;
		public Token operator;
		public QueryTermContext right;
		public List<QueryTermContext> queryTerm() {
			return getRuleContexts(QueryTermContext.class);
		}
		public QueryTermContext queryTerm(int i) {
			return getRuleContext(QueryTermContext.class,i);
		}
		public TerminalNode INTERSECT() { return getToken(SqlBaseParser.INTERSECT, 0); }
		public TerminalNode UNION() { return getToken(SqlBaseParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(SqlBaseParser.EXCEPT, 0); }
		public TerminalNode SETMINUS() { return getToken(SqlBaseParser.SETMINUS, 0); }
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public SetOperationContext(QueryTermContext ctx) { copyFrom(ctx); }
	}

	public final QueryTermContext queryTerm() throws RecognitionException {
		return queryTerm(0);
	}

	private QueryTermContext queryTerm(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		QueryTermContext _localctx = new QueryTermContext(_ctx, _parentState);
		QueryTermContext _prevctx = _localctx;
		int _startState = 158;
		enterRecursionRule(_localctx, 158, RULE_queryTerm, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new QueryTermDefaultContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(2398);
			queryPrimary();
			}
			_ctx.stop = _input.LT(-1);
			setState(2426);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,269,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2424);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
					case 1:
						{
						_localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
						((SetOperationContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
						setState(2400);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(2401);
						if (!(legacy_setops_precedence_enabled)) throw new FailedPredicateException(this, "legacy_setops_precedence_enabled");
						setState(2402);
						((SetOperationContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==EXCEPT || _la==INTERSECT || _la==SETMINUS || _la==UNION) ) {
							((SetOperationContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2404);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							setState(2403);
							setQuantifier();
							}
						}

						setState(2406);
						((SetOperationContext)_localctx).right = queryTerm(5);
						}
						break;
					case 2:
						{
						_localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
						((SetOperationContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
						setState(2407);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(2408);
						if (!(!legacy_setops_precedence_enabled)) throw new FailedPredicateException(this, "!legacy_setops_precedence_enabled");
						setState(2409);
						((SetOperationContext)_localctx).operator = match(INTERSECT);
						setState(2411);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							setState(2410);
							setQuantifier();
							}
						}

						setState(2413);
						((SetOperationContext)_localctx).right = queryTerm(4);
						}
						break;
					case 3:
						{
						_localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
						((SetOperationContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
						setState(2414);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(2415);
						if (!(!legacy_setops_precedence_enabled)) throw new FailedPredicateException(this, "!legacy_setops_precedence_enabled");
						setState(2416);
						((SetOperationContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==EXCEPT || _la==SETMINUS || _la==UNION) ) {
							((SetOperationContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(2418);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							setState(2417);
							setQuantifier();
							}
						}

						setState(2420);
						((SetOperationContext)_localctx).right = queryTerm(3);
						}
						break;
					case 4:
						{
						_localctx = new OperatorPipeStatementContext(new QueryTermContext(_parentctx, _parentState));
						((OperatorPipeStatementContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
						setState(2421);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(2422);
						match(OPERATOR_PIPE);
						setState(2423);
						operatorPipeRightSide();
						}
						break;
					}
					} 
				}
				setState(2428);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,269,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryPrimaryContext extends ParserRuleContext {
		public QueryPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryPrimary; }
	 
		public QueryPrimaryContext() { }
		public void copyFrom(QueryPrimaryContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SubqueryContext extends QueryPrimaryContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public SubqueryContext(QueryPrimaryContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class QueryPrimaryDefaultContext extends QueryPrimaryContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryPrimaryDefaultContext(QueryPrimaryContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class InlineTableDefault1Context extends QueryPrimaryContext {
		public InlineTableContext inlineTable() {
			return getRuleContext(InlineTableContext.class,0);
		}
		public InlineTableDefault1Context(QueryPrimaryContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FromStmtContext extends QueryPrimaryContext {
		public FromStatementContext fromStatement() {
			return getRuleContext(FromStatementContext.class,0);
		}
		public FromStmtContext(QueryPrimaryContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableContext extends QueryPrimaryContext {
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TableContext(QueryPrimaryContext ctx) { copyFrom(ctx); }
	}

	public final QueryPrimaryContext queryPrimary() throws RecognitionException {
		QueryPrimaryContext _localctx = new QueryPrimaryContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_queryPrimary);
		try {
			setState(2438);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case REDUCE:
			case SELECT:
				_localctx = new QueryPrimaryDefaultContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2429);
				querySpecification();
				}
				break;
			case FROM:
				_localctx = new FromStmtContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2430);
				fromStatement();
				}
				break;
			case TABLE:
				_localctx = new TableContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2431);
				match(TABLE);
				setState(2432);
				identifierReference();
				}
				break;
			case VALUES:
				_localctx = new InlineTableDefault1Context(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2433);
				inlineTable();
				}
				break;
			case LEFT_PAREN:
				_localctx = new SubqueryContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2434);
				match(LEFT_PAREN);
				setState(2435);
				query();
				setState(2436);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SortItemContext extends ParserRuleContext {
		public Token ordering;
		public Token nullOrder;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(SqlBaseParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode LAST() { return getToken(SqlBaseParser.LAST, 0); }
		public TerminalNode FIRST() { return getToken(SqlBaseParser.FIRST, 0); }
		public SortItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortItem; }
	}

	public final SortItemContext sortItem() throws RecognitionException {
		SortItemContext _localctx = new SortItemContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_sortItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2440);
			expression();
			setState(2442);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				{
				setState(2441);
				((SortItemContext)_localctx).ordering = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((SortItemContext)_localctx).ordering = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2446);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				setState(2444);
				match(NULLS);
				setState(2445);
				((SortItemContext)_localctx).nullOrder = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
					((SortItemContext)_localctx).nullOrder = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FromStatementContext extends ParserRuleContext {
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public List<FromStatementBodyContext> fromStatementBody() {
			return getRuleContexts(FromStatementBodyContext.class);
		}
		public FromStatementBodyContext fromStatementBody(int i) {
			return getRuleContext(FromStatementBodyContext.class,i);
		}
		public FromStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromStatement; }
	}

	public final FromStatementContext fromStatement() throws RecognitionException {
		FromStatementContext _localctx = new FromStatementContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_fromStatement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2448);
			fromClause();
			setState(2452);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,273,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2449);
					fromStatementBody();
					}
					} 
				}
				setState(2454);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,273,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FromStatementBodyContext extends ParserRuleContext {
		public TransformClauseContext transformClause() {
			return getRuleContext(TransformClauseContext.class,0);
		}
		public QueryOrganizationContext queryOrganization() {
			return getRuleContext(QueryOrganizationContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public List<LateralViewContext> lateralView() {
			return getRuleContexts(LateralViewContext.class);
		}
		public LateralViewContext lateralView(int i) {
			return getRuleContext(LateralViewContext.class,i);
		}
		public AggregationClauseContext aggregationClause() {
			return getRuleContext(AggregationClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public FromStatementBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromStatementBody; }
	}

	public final FromStatementBodyContext fromStatementBody() throws RecognitionException {
		FromStatementBodyContext _localctx = new FromStatementBodyContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_fromStatementBody);
		try {
			int _alt;
			setState(2482);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2455);
				transformClause();
				setState(2457);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
				case 1:
					{
					setState(2456);
					whereClause();
					}
					break;
				}
				setState(2459);
				queryOrganization();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2461);
				selectClause();
				setState(2465);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,275,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2462);
						lateralView();
						}
						} 
					}
					setState(2467);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,275,_ctx);
				}
				setState(2469);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
				case 1:
					{
					setState(2468);
					whereClause();
					}
					break;
				}
				setState(2472);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
				case 1:
					{
					setState(2471);
					aggregationClause();
					}
					break;
				}
				setState(2475);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
				case 1:
					{
					setState(2474);
					havingClause();
					}
					break;
				}
				setState(2478);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
				case 1:
					{
					setState(2477);
					windowClause();
					}
					break;
				}
				setState(2480);
				queryOrganization();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QuerySpecificationContext extends ParserRuleContext {
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
	 
		public QuerySpecificationContext() { }
		public void copyFrom(QuerySpecificationContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RegularQuerySpecificationContext extends QuerySpecificationContext {
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public List<LateralViewContext> lateralView() {
			return getRuleContexts(LateralViewContext.class);
		}
		public LateralViewContext lateralView(int i) {
			return getRuleContext(LateralViewContext.class,i);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public AggregationClauseContext aggregationClause() {
			return getRuleContext(AggregationClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public RegularQuerySpecificationContext(QuerySpecificationContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TransformQuerySpecificationContext extends QuerySpecificationContext {
		public TransformClauseContext transformClause() {
			return getRuleContext(TransformClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public List<LateralViewContext> lateralView() {
			return getRuleContexts(LateralViewContext.class);
		}
		public LateralViewContext lateralView(int i) {
			return getRuleContext(LateralViewContext.class,i);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public AggregationClauseContext aggregationClause() {
			return getRuleContext(AggregationClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public TransformQuerySpecificationContext(QuerySpecificationContext ctx) { copyFrom(ctx); }
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_querySpecification);
		try {
			int _alt;
			setState(2528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				_localctx = new TransformQuerySpecificationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2484);
				transformClause();
				setState(2486);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
				case 1:
					{
					setState(2485);
					fromClause();
					}
					break;
				}
				setState(2491);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,282,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2488);
						lateralView();
						}
						} 
					}
					setState(2493);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,282,_ctx);
				}
				setState(2495);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
				case 1:
					{
					setState(2494);
					whereClause();
					}
					break;
				}
				setState(2498);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
				case 1:
					{
					setState(2497);
					aggregationClause();
					}
					break;
				}
				setState(2501);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
				case 1:
					{
					setState(2500);
					havingClause();
					}
					break;
				}
				setState(2504);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
				case 1:
					{
					setState(2503);
					windowClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new RegularQuerySpecificationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2506);
				selectClause();
				setState(2508);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
				case 1:
					{
					setState(2507);
					fromClause();
					}
					break;
				}
				setState(2513);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,288,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2510);
						lateralView();
						}
						} 
					}
					setState(2515);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,288,_ctx);
				}
				setState(2517);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					setState(2516);
					whereClause();
					}
					break;
				}
				setState(2520);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
				case 1:
					{
					setState(2519);
					aggregationClause();
					}
					break;
				}
				setState(2523);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
				case 1:
					{
					setState(2522);
					havingClause();
					}
					break;
				}
				setState(2526);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
				case 1:
					{
					setState(2525);
					windowClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransformClauseContext extends ParserRuleContext {
		public Token kind;
		public RowFormatContext inRowFormat;
		public StringLitContext recordWriter;
		public StringLitContext script;
		public RowFormatContext outRowFormat;
		public StringLitContext recordReader;
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public List<StringLitContext> stringLit() {
			return getRuleContexts(StringLitContext.class);
		}
		public StringLitContext stringLit(int i) {
			return getRuleContext(StringLitContext.class,i);
		}
		public TerminalNode SELECT() { return getToken(SqlBaseParser.SELECT, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public ExpressionSeqContext expressionSeq() {
			return getRuleContext(ExpressionSeqContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public TerminalNode TRANSFORM() { return getToken(SqlBaseParser.TRANSFORM, 0); }
		public TerminalNode MAP() { return getToken(SqlBaseParser.MAP, 0); }
		public TerminalNode REDUCE() { return getToken(SqlBaseParser.REDUCE, 0); }
		public TerminalNode RECORDWRITER() { return getToken(SqlBaseParser.RECORDWRITER, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode RECORDREADER() { return getToken(SqlBaseParser.RECORDREADER, 0); }
		public List<RowFormatContext> rowFormat() {
			return getRuleContexts(RowFormatContext.class);
		}
		public RowFormatContext rowFormat(int i) {
			return getRuleContext(RowFormatContext.class,i);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public IdentifierSeqContext identifierSeq() {
			return getRuleContext(IdentifierSeqContext.class,0);
		}
		public ColTypeListContext colTypeList() {
			return getRuleContext(ColTypeListContext.class,0);
		}
		public TransformClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transformClause; }
	}

	public final TransformClauseContext transformClause() throws RecognitionException {
		TransformClauseContext _localctx = new TransformClauseContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_transformClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2549);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(2530);
				match(SELECT);
				setState(2531);
				((TransformClauseContext)_localctx).kind = match(TRANSFORM);
				setState(2532);
				match(LEFT_PAREN);
				setState(2534);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
				case 1:
					{
					setState(2533);
					setQuantifier();
					}
					break;
				}
				setState(2536);
				expressionSeq();
				setState(2537);
				match(RIGHT_PAREN);
				}
				break;
			case MAP:
				{
				setState(2539);
				((TransformClauseContext)_localctx).kind = match(MAP);
				setState(2541);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
				case 1:
					{
					setState(2540);
					setQuantifier();
					}
					break;
				}
				setState(2543);
				expressionSeq();
				}
				break;
			case REDUCE:
				{
				setState(2544);
				((TransformClauseContext)_localctx).kind = match(REDUCE);
				setState(2546);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
				case 1:
					{
					setState(2545);
					setQuantifier();
					}
					break;
				}
				setState(2548);
				expressionSeq();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2552);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROW) {
				{
				setState(2551);
				((TransformClauseContext)_localctx).inRowFormat = rowFormat();
				}
			}

			setState(2556);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RECORDWRITER) {
				{
				setState(2554);
				match(RECORDWRITER);
				setState(2555);
				((TransformClauseContext)_localctx).recordWriter = stringLit();
				}
			}

			setState(2558);
			match(USING);
			setState(2559);
			((TransformClauseContext)_localctx).script = stringLit();
			setState(2572);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				setState(2560);
				match(AS);
				setState(2570);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
				case 1:
					{
					setState(2561);
					identifierSeq();
					}
					break;
				case 2:
					{
					setState(2562);
					colTypeList();
					}
					break;
				case 3:
					{
					{
					setState(2563);
					match(LEFT_PAREN);
					setState(2566);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
					case 1:
						{
						setState(2564);
						identifierSeq();
						}
						break;
					case 2:
						{
						setState(2565);
						colTypeList();
						}
						break;
					}
					setState(2568);
					match(RIGHT_PAREN);
					}
					}
					break;
				}
				}
				break;
			}
			setState(2575);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				{
				setState(2574);
				((TransformClauseContext)_localctx).outRowFormat = rowFormat();
				}
				break;
			}
			setState(2579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				{
				setState(2577);
				match(RECORDREADER);
				setState(2578);
				((TransformClauseContext)_localctx).recordReader = stringLit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectClauseContext extends ParserRuleContext {
		public HintContext hint;
		public List<HintContext> hints = new ArrayList<HintContext>();
		public TerminalNode SELECT() { return getToken(SqlBaseParser.SELECT, 0); }
		public NamedExpressionSeqContext namedExpressionSeq() {
			return getRuleContext(NamedExpressionSeqContext.class,0);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public List<HintContext> hint() {
			return getRuleContexts(HintContext.class);
		}
		public HintContext hint(int i) {
			return getRuleContext(HintContext.class,i);
		}
		public SelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClause; }
	}

	public final SelectClauseContext selectClause() throws RecognitionException {
		SelectClauseContext _localctx = new SelectClauseContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_selectClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2581);
			match(SELECT);
			setState(2585);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,305,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2582);
					((SelectClauseContext)_localctx).hint = hint();
					((SelectClauseContext)_localctx).hints.add(((SelectClauseContext)_localctx).hint);
					}
					} 
				}
				setState(2587);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,305,_ctx);
			}
			setState(2589);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				{
				setState(2588);
				setQuantifier();
				}
				break;
			}
			setState(2591);
			namedExpressionSeq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public AssignmentListContext assignmentList() {
			return getRuleContext(AssignmentListContext.class,0);
		}
		public SetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setClause; }
	}

	public final SetClauseContext setClause() throws RecognitionException {
		SetClauseContext _localctx = new SetClauseContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_setClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2593);
			match(SET);
			setState(2594);
			assignmentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MatchedClauseContext extends ParserRuleContext {
		public BooleanExpressionContext matchedCond;
		public TerminalNode WHEN() { return getToken(SqlBaseParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(SqlBaseParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(SqlBaseParser.THEN, 0); }
		public MatchedActionContext matchedAction() {
			return getRuleContext(MatchedActionContext.class,0);
		}
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public MatchedClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchedClause; }
	}

	public final MatchedClauseContext matchedClause() throws RecognitionException {
		MatchedClauseContext _localctx = new MatchedClauseContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_matchedClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2596);
			match(WHEN);
			setState(2597);
			match(MATCHED);
			setState(2600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(2598);
				match(AND);
				setState(2599);
				((MatchedClauseContext)_localctx).matchedCond = booleanExpression(0);
				}
			}

			setState(2602);
			match(THEN);
			setState(2603);
			matchedAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NotMatchedClauseContext extends ParserRuleContext {
		public BooleanExpressionContext notMatchedCond;
		public TerminalNode WHEN() { return getToken(SqlBaseParser.WHEN, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode MATCHED() { return getToken(SqlBaseParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(SqlBaseParser.THEN, 0); }
		public NotMatchedActionContext notMatchedAction() {
			return getRuleContext(NotMatchedActionContext.class,0);
		}
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode TARGET() { return getToken(SqlBaseParser.TARGET, 0); }
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public NotMatchedClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notMatchedClause; }
	}

	public final NotMatchedClauseContext notMatchedClause() throws RecognitionException {
		NotMatchedClauseContext _localctx = new NotMatchedClauseContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_notMatchedClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2605);
			match(WHEN);
			setState(2606);
			errorCapturingNot();
			setState(2607);
			match(MATCHED);
			setState(2610);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(2608);
				match(BY);
				setState(2609);
				match(TARGET);
				}
			}

			setState(2614);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(2612);
				match(AND);
				setState(2613);
				((NotMatchedClauseContext)_localctx).notMatchedCond = booleanExpression(0);
				}
			}

			setState(2616);
			match(THEN);
			setState(2617);
			notMatchedAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NotMatchedBySourceClauseContext extends ParserRuleContext {
		public BooleanExpressionContext notMatchedBySourceCond;
		public TerminalNode WHEN() { return getToken(SqlBaseParser.WHEN, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode MATCHED() { return getToken(SqlBaseParser.MATCHED, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode SOURCE() { return getToken(SqlBaseParser.SOURCE, 0); }
		public TerminalNode THEN() { return getToken(SqlBaseParser.THEN, 0); }
		public NotMatchedBySourceActionContext notMatchedBySourceAction() {
			return getRuleContext(NotMatchedBySourceActionContext.class,0);
		}
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public NotMatchedBySourceClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notMatchedBySourceClause; }
	}

	public final NotMatchedBySourceClauseContext notMatchedBySourceClause() throws RecognitionException {
		NotMatchedBySourceClauseContext _localctx = new NotMatchedBySourceClauseContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_notMatchedBySourceClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2619);
			match(WHEN);
			setState(2620);
			errorCapturingNot();
			setState(2621);
			match(MATCHED);
			setState(2622);
			match(BY);
			setState(2623);
			match(SOURCE);
			setState(2626);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(2624);
				match(AND);
				setState(2625);
				((NotMatchedBySourceClauseContext)_localctx).notMatchedBySourceCond = booleanExpression(0);
				}
			}

			setState(2628);
			match(THEN);
			setState(2629);
			notMatchedBySourceAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MatchedActionContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(SqlBaseParser.DELETE, 0); }
		public TerminalNode UPDATE() { return getToken(SqlBaseParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode ASTERISK() { return getToken(SqlBaseParser.ASTERISK, 0); }
		public AssignmentListContext assignmentList() {
			return getRuleContext(AssignmentListContext.class,0);
		}
		public MatchedActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchedAction; }
	}

	public final MatchedActionContext matchedAction() throws RecognitionException {
		MatchedActionContext _localctx = new MatchedActionContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_matchedAction);
		try {
			setState(2638);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2631);
				match(DELETE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2632);
				match(UPDATE);
				setState(2633);
				match(SET);
				setState(2634);
				match(ASTERISK);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2635);
				match(UPDATE);
				setState(2636);
				match(SET);
				setState(2637);
				assignmentList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NotMatchedActionContext extends ParserRuleContext {
		public MultipartIdentifierListContext columns;
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode ASTERISK() { return getToken(SqlBaseParser.ASTERISK, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public TerminalNode VALUES() { return getToken(SqlBaseParser.VALUES, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public MultipartIdentifierListContext multipartIdentifierList() {
			return getRuleContext(MultipartIdentifierListContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public NotMatchedActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notMatchedAction; }
	}

	public final NotMatchedActionContext notMatchedAction() throws RecognitionException {
		NotMatchedActionContext _localctx = new NotMatchedActionContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_notMatchedAction);
		int _la;
		try {
			setState(2658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2640);
				match(INSERT);
				setState(2641);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2642);
				match(INSERT);
				setState(2643);
				match(LEFT_PAREN);
				setState(2644);
				((NotMatchedActionContext)_localctx).columns = multipartIdentifierList();
				setState(2645);
				match(RIGHT_PAREN);
				setState(2646);
				match(VALUES);
				setState(2647);
				match(LEFT_PAREN);
				setState(2648);
				expression();
				setState(2653);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2649);
					match(COMMA);
					setState(2650);
					expression();
					}
					}
					setState(2655);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2656);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NotMatchedBySourceActionContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(SqlBaseParser.DELETE, 0); }
		public TerminalNode UPDATE() { return getToken(SqlBaseParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public AssignmentListContext assignmentList() {
			return getRuleContext(AssignmentListContext.class,0);
		}
		public NotMatchedBySourceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notMatchedBySourceAction; }
	}

	public final NotMatchedBySourceActionContext notMatchedBySourceAction() throws RecognitionException {
		NotMatchedBySourceActionContext _localctx = new NotMatchedBySourceActionContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_notMatchedBySourceAction);
		try {
			setState(2664);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2660);
				match(DELETE);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2661);
				match(UPDATE);
				setState(2662);
				match(SET);
				setState(2663);
				assignmentList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExceptClauseContext extends ParserRuleContext {
		public MultipartIdentifierListContext exceptCols;
		public TerminalNode EXCEPT() { return getToken(SqlBaseParser.EXCEPT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public MultipartIdentifierListContext multipartIdentifierList() {
			return getRuleContext(MultipartIdentifierListContext.class,0);
		}
		public ExceptClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exceptClause; }
	}

	public final ExceptClauseContext exceptClause() throws RecognitionException {
		ExceptClauseContext _localctx = new ExceptClauseContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_exceptClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2666);
			match(EXCEPT);
			setState(2667);
			match(LEFT_PAREN);
			setState(2668);
			((ExceptClauseContext)_localctx).exceptCols = multipartIdentifierList();
			setState(2669);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AssignmentListContext extends ParserRuleContext {
		public List<AssignmentContext> assignment() {
			return getRuleContexts(AssignmentContext.class);
		}
		public AssignmentContext assignment(int i) {
			return getRuleContext(AssignmentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public AssignmentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentList; }
	}

	public final AssignmentListContext assignmentList() throws RecognitionException {
		AssignmentListContext _localctx = new AssignmentListContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_assignmentList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2671);
			assignment();
			setState(2676);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2672);
				match(COMMA);
				setState(2673);
				assignment();
				}
				}
				setState(2678);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AssignmentContext extends ParserRuleContext {
		public MultipartIdentifierContext key;
		public ExpressionContext value;
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment; }
	}

	public final AssignmentContext assignment() throws RecognitionException {
		AssignmentContext _localctx = new AssignmentContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2679);
			((AssignmentContext)_localctx).key = multipartIdentifier();
			setState(2680);
			match(EQ);
			setState(2681);
			((AssignmentContext)_localctx).value = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(SqlBaseParser.WHERE, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2683);
			match(WHERE);
			setState(2684);
			booleanExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(SqlBaseParser.HAVING, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2686);
			match(HAVING);
			setState(2687);
			booleanExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HintContext extends ParserRuleContext {
		public HintStatementContext hintStatement;
		public List<HintStatementContext> hintStatements = new ArrayList<HintStatementContext>();
		public TerminalNode HENT_START() { return getToken(SqlBaseParser.HENT_START, 0); }
		public TerminalNode HENT_END() { return getToken(SqlBaseParser.HENT_END, 0); }
		public List<HintStatementContext> hintStatement() {
			return getRuleContexts(HintStatementContext.class);
		}
		public HintStatementContext hintStatement(int i) {
			return getRuleContext(HintStatementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public HintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hint; }
	}

	public final HintContext hint() throws RecognitionException {
		HintContext _localctx = new HintContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_hint);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2689);
			match(HENT_START);
			setState(2690);
			((HintContext)_localctx).hintStatement = hintStatement();
			((HintContext)_localctx).hintStatements.add(((HintContext)_localctx).hintStatement);
			setState(2697);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,317,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2692);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
					case 1:
						{
						setState(2691);
						match(COMMA);
						}
						break;
					}
					setState(2694);
					((HintContext)_localctx).hintStatement = hintStatement();
					((HintContext)_localctx).hintStatements.add(((HintContext)_localctx).hintStatement);
					}
					} 
				}
				setState(2699);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,317,_ctx);
			}
			setState(2700);
			match(HENT_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HintStatementContext extends ParserRuleContext {
		public IdentifierContext hintName;
		public PrimaryExpressionContext primaryExpression;
		public List<PrimaryExpressionContext> parameters = new ArrayList<PrimaryExpressionContext>();
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<PrimaryExpressionContext> primaryExpression() {
			return getRuleContexts(PrimaryExpressionContext.class);
		}
		public PrimaryExpressionContext primaryExpression(int i) {
			return getRuleContext(PrimaryExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public HintStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hintStatement; }
	}

	public final HintStatementContext hintStatement() throws RecognitionException {
		HintStatementContext _localctx = new HintStatementContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_hintStatement);
		int _la;
		try {
			setState(2715);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2702);
				((HintStatementContext)_localctx).hintName = identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2703);
				((HintStatementContext)_localctx).hintName = identifier();
				setState(2704);
				match(LEFT_PAREN);
				setState(2705);
				((HintStatementContext)_localctx).primaryExpression = primaryExpression(0);
				((HintStatementContext)_localctx).parameters.add(((HintStatementContext)_localctx).primaryExpression);
				setState(2710);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2706);
					match(COMMA);
					setState(2707);
					((HintStatementContext)_localctx).primaryExpression = primaryExpression(0);
					((HintStatementContext)_localctx).parameters.add(((HintStatementContext)_localctx).primaryExpression);
					}
					}
					setState(2712);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2713);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public List<RelationContext> relation() {
			return getRuleContexts(RelationContext.class);
		}
		public RelationContext relation(int i) {
			return getRuleContext(RelationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public List<LateralViewContext> lateralView() {
			return getRuleContexts(LateralViewContext.class);
		}
		public LateralViewContext lateralView(int i) {
			return getRuleContext(LateralViewContext.class,i);
		}
		public PivotClauseContext pivotClause() {
			return getRuleContext(PivotClauseContext.class,0);
		}
		public UnpivotClauseContext unpivotClause() {
			return getRuleContext(UnpivotClauseContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_fromClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2717);
			match(FROM);
			setState(2718);
			relation();
			setState(2723);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,320,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2719);
					match(COMMA);
					setState(2720);
					relation();
					}
					} 
				}
				setState(2725);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,320,_ctx);
			}
			setState(2729);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,321,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2726);
					lateralView();
					}
					} 
				}
				setState(2731);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,321,_ctx);
			}
			setState(2733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				{
				setState(2732);
				pivotClause();
				}
				break;
			}
			setState(2736);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				{
				setState(2735);
				unpivotClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TemporalClauseContext extends ParserRuleContext {
		public ValueExpressionContext timestamp;
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode OF() { return getToken(SqlBaseParser.OF, 0); }
		public VersionContext version() {
			return getRuleContext(VersionContext.class,0);
		}
		public TerminalNode SYSTEM_VERSION() { return getToken(SqlBaseParser.SYSTEM_VERSION, 0); }
		public TerminalNode VERSION() { return getToken(SqlBaseParser.VERSION, 0); }
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(SqlBaseParser.SYSTEM_TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SqlBaseParser.TIMESTAMP, 0); }
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TemporalClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporalClause; }
	}

	public final TemporalClauseContext temporalClause() throws RecognitionException {
		TemporalClauseContext _localctx = new TemporalClauseContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_temporalClause);
		int _la;
		try {
			setState(2752);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2738);
					match(FOR);
					}
				}

				setState(2741);
				_la = _input.LA(1);
				if ( !(_la==SYSTEM_VERSION || _la==VERSION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2742);
				match(AS);
				setState(2743);
				match(OF);
				setState(2744);
				version();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2746);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2745);
					match(FOR);
					}
				}

				setState(2748);
				_la = _input.LA(1);
				if ( !(_la==SYSTEM_TIME || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2749);
				match(AS);
				setState(2750);
				match(OF);
				setState(2751);
				((TemporalClauseContext)_localctx).timestamp = valueExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AggregationClauseContext extends ParserRuleContext {
		public GroupByClauseContext groupByClause;
		public List<GroupByClauseContext> groupingExpressionsWithGroupingAnalytics = new ArrayList<GroupByClauseContext>();
		public NamedExpressionContext namedExpression;
		public List<NamedExpressionContext> groupingExpressions = new ArrayList<NamedExpressionContext>();
		public Token kind;
		public TerminalNode GROUP() { return getToken(SqlBaseParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public List<GroupByClauseContext> groupByClause() {
			return getRuleContexts(GroupByClauseContext.class);
		}
		public GroupByClauseContext groupByClause(int i) {
			return getRuleContext(GroupByClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public List<NamedExpressionContext> namedExpression() {
			return getRuleContexts(NamedExpressionContext.class);
		}
		public NamedExpressionContext namedExpression(int i) {
			return getRuleContext(NamedExpressionContext.class,i);
		}
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode SETS() { return getToken(SqlBaseParser.SETS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<GroupingSetContext> groupingSet() {
			return getRuleContexts(GroupingSetContext.class);
		}
		public GroupingSetContext groupingSet(int i) {
			return getRuleContext(GroupingSetContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode ROLLUP() { return getToken(SqlBaseParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(SqlBaseParser.CUBE, 0); }
		public TerminalNode GROUPING() { return getToken(SqlBaseParser.GROUPING, 0); }
		public AggregationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregationClause; }
	}

	public final AggregationClauseContext aggregationClause() throws RecognitionException {
		AggregationClauseContext _localctx = new AggregationClauseContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_aggregationClause);
		int _la;
		try {
			int _alt;
			setState(2793);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2754);
				match(GROUP);
				setState(2755);
				match(BY);
				setState(2756);
				((AggregationClauseContext)_localctx).groupByClause = groupByClause();
				((AggregationClauseContext)_localctx).groupingExpressionsWithGroupingAnalytics.add(((AggregationClauseContext)_localctx).groupByClause);
				setState(2761);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,327,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2757);
						match(COMMA);
						setState(2758);
						((AggregationClauseContext)_localctx).groupByClause = groupByClause();
						((AggregationClauseContext)_localctx).groupingExpressionsWithGroupingAnalytics.add(((AggregationClauseContext)_localctx).groupByClause);
						}
						} 
					}
					setState(2763);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,327,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2764);
				match(GROUP);
				setState(2765);
				match(BY);
				setState(2766);
				((AggregationClauseContext)_localctx).namedExpression = namedExpression();
				((AggregationClauseContext)_localctx).groupingExpressions.add(((AggregationClauseContext)_localctx).namedExpression);
				setState(2771);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,328,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2767);
						match(COMMA);
						setState(2768);
						((AggregationClauseContext)_localctx).namedExpression = namedExpression();
						((AggregationClauseContext)_localctx).groupingExpressions.add(((AggregationClauseContext)_localctx).namedExpression);
						}
						} 
					}
					setState(2773);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,328,_ctx);
				}
				setState(2791);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
				case 1:
					{
					setState(2774);
					match(WITH);
					setState(2775);
					((AggregationClauseContext)_localctx).kind = match(ROLLUP);
					}
					break;
				case 2:
					{
					setState(2776);
					match(WITH);
					setState(2777);
					((AggregationClauseContext)_localctx).kind = match(CUBE);
					}
					break;
				case 3:
					{
					setState(2778);
					((AggregationClauseContext)_localctx).kind = match(GROUPING);
					setState(2779);
					match(SETS);
					setState(2780);
					match(LEFT_PAREN);
					setState(2781);
					groupingSet();
					setState(2786);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2782);
						match(COMMA);
						setState(2783);
						groupingSet();
						}
						}
						setState(2788);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2789);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupByClauseContext extends ParserRuleContext {
		public GroupingAnalyticsContext groupingAnalytics() {
			return getRuleContext(GroupingAnalyticsContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_groupByClause);
		try {
			setState(2797);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2795);
				groupingAnalytics();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2796);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupingAnalyticsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<GroupingSetContext> groupingSet() {
			return getRuleContexts(GroupingSetContext.class);
		}
		public GroupingSetContext groupingSet(int i) {
			return getRuleContext(GroupingSetContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode ROLLUP() { return getToken(SqlBaseParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(SqlBaseParser.CUBE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TerminalNode GROUPING() { return getToken(SqlBaseParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(SqlBaseParser.SETS, 0); }
		public List<GroupingElementContext> groupingElement() {
			return getRuleContexts(GroupingElementContext.class);
		}
		public GroupingElementContext groupingElement(int i) {
			return getRuleContext(GroupingElementContext.class,i);
		}
		public GroupingAnalyticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingAnalytics; }
	}

	public final GroupingAnalyticsContext groupingAnalytics() throws RecognitionException {
		GroupingAnalyticsContext _localctx = new GroupingAnalyticsContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_groupingAnalytics);
		int _la;
		try {
			setState(2824);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CUBE:
			case ROLLUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(2799);
				_la = _input.LA(1);
				if ( !(_la==CUBE || _la==ROLLUP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2800);
				match(LEFT_PAREN);
				setState(2801);
				groupingSet();
				setState(2806);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2802);
					match(COMMA);
					setState(2803);
					groupingSet();
					}
					}
					setState(2808);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2809);
				match(RIGHT_PAREN);
				}
				break;
			case GROUPING:
				enterOuterAlt(_localctx, 2);
				{
				setState(2811);
				match(GROUPING);
				setState(2812);
				match(SETS);
				setState(2813);
				match(LEFT_PAREN);
				setState(2814);
				groupingElement();
				setState(2819);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2815);
					match(COMMA);
					setState(2816);
					groupingElement();
					}
					}
					setState(2821);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2822);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupingElementContext extends ParserRuleContext {
		public GroupingAnalyticsContext groupingAnalytics() {
			return getRuleContext(GroupingAnalyticsContext.class,0);
		}
		public GroupingSetContext groupingSet() {
			return getRuleContext(GroupingSetContext.class,0);
		}
		public GroupingElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingElement; }
	}

	public final GroupingElementContext groupingElement() throws RecognitionException {
		GroupingElementContext _localctx = new GroupingElementContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_groupingElement);
		try {
			setState(2828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2826);
				groupingAnalytics();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2827);
				groupingSet();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupingSetContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public GroupingSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSet; }
	}

	public final GroupingSetContext groupingSet() throws RecognitionException {
		GroupingSetContext _localctx = new GroupingSetContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_groupingSet);
		int _la;
		try {
			setState(2843);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2830);
				match(LEFT_PAREN);
				setState(2839);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
				case 1:
					{
					setState(2831);
					expression();
					setState(2836);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2832);
						match(COMMA);
						setState(2833);
						expression();
						}
						}
						setState(2838);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(2841);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2842);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PivotClauseContext extends ParserRuleContext {
		public NamedExpressionSeqContext aggregates;
		public PivotValueContext pivotValue;
		public List<PivotValueContext> pivotValues = new ArrayList<PivotValueContext>();
		public TerminalNode PIVOT() { return getToken(SqlBaseParser.PIVOT, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public PivotColumnContext pivotColumn() {
			return getRuleContext(PivotColumnContext.class,0);
		}
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public NamedExpressionSeqContext namedExpressionSeq() {
			return getRuleContext(NamedExpressionSeqContext.class,0);
		}
		public List<PivotValueContext> pivotValue() {
			return getRuleContexts(PivotValueContext.class);
		}
		public PivotValueContext pivotValue(int i) {
			return getRuleContext(PivotValueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public PivotClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivotClause; }
	}

	public final PivotClauseContext pivotClause() throws RecognitionException {
		PivotClauseContext _localctx = new PivotClauseContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_pivotClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2845);
			match(PIVOT);
			setState(2846);
			match(LEFT_PAREN);
			setState(2847);
			((PivotClauseContext)_localctx).aggregates = namedExpressionSeq();
			setState(2848);
			match(FOR);
			setState(2849);
			pivotColumn();
			setState(2850);
			match(IN);
			setState(2851);
			match(LEFT_PAREN);
			setState(2852);
			((PivotClauseContext)_localctx).pivotValue = pivotValue();
			((PivotClauseContext)_localctx).pivotValues.add(((PivotClauseContext)_localctx).pivotValue);
			setState(2857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2853);
				match(COMMA);
				setState(2854);
				((PivotClauseContext)_localctx).pivotValue = pivotValue();
				((PivotClauseContext)_localctx).pivotValues.add(((PivotClauseContext)_localctx).pivotValue);
				}
				}
				setState(2859);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2860);
			match(RIGHT_PAREN);
			setState(2861);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PivotColumnContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier;
		public List<ErrorCapturingIdentifierContext> identifiers = new ArrayList<ErrorCapturingIdentifierContext>();
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public PivotColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivotColumn; }
	}

	public final PivotColumnContext pivotColumn() throws RecognitionException {
		PivotColumnContext _localctx = new PivotColumnContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_pivotColumn);
		int _la;
		try {
			setState(2875);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2863);
				((PivotColumnContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
				((PivotColumnContext)_localctx).identifiers.add(((PivotColumnContext)_localctx).errorCapturingIdentifier);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2864);
				match(LEFT_PAREN);
				setState(2865);
				((PivotColumnContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
				((PivotColumnContext)_localctx).identifiers.add(((PivotColumnContext)_localctx).errorCapturingIdentifier);
				setState(2870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2866);
					match(COMMA);
					setState(2867);
					((PivotColumnContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
					((PivotColumnContext)_localctx).identifiers.add(((PivotColumnContext)_localctx).errorCapturingIdentifier);
					}
					}
					setState(2872);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2873);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PivotValueContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public PivotValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivotValue; }
	}

	public final PivotValueContext pivotValue() throws RecognitionException {
		PivotValueContext _localctx = new PivotValueContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_pivotValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2877);
			expression();
			setState(2882);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
			case 1:
				{
				setState(2879);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
				case 1:
					{
					setState(2878);
					match(AS);
					}
					break;
				}
				setState(2881);
				errorCapturingIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotClauseContext extends ParserRuleContext {
		public UnpivotNullClauseContext nullOperator;
		public UnpivotOperatorContext operator;
		public TerminalNode UNPIVOT() { return getToken(SqlBaseParser.UNPIVOT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public UnpivotOperatorContext unpivotOperator() {
			return getRuleContext(UnpivotOperatorContext.class,0);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public UnpivotNullClauseContext unpivotNullClause() {
			return getRuleContext(UnpivotNullClauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public UnpivotClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotClause; }
	}

	public final UnpivotClauseContext unpivotClause() throws RecognitionException {
		UnpivotClauseContext _localctx = new UnpivotClauseContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_unpivotClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2884);
			match(UNPIVOT);
			setState(2886);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				setState(2885);
				((UnpivotClauseContext)_localctx).nullOperator = unpivotNullClause();
				}
			}

			setState(2888);
			match(LEFT_PAREN);
			setState(2889);
			((UnpivotClauseContext)_localctx).operator = unpivotOperator();
			setState(2890);
			match(RIGHT_PAREN);
			setState(2895);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				setState(2892);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
				case 1:
					{
					setState(2891);
					match(AS);
					}
					break;
				}
				setState(2894);
				errorCapturingIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotNullClauseContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public TerminalNode INCLUDE() { return getToken(SqlBaseParser.INCLUDE, 0); }
		public TerminalNode EXCLUDE() { return getToken(SqlBaseParser.EXCLUDE, 0); }
		public UnpivotNullClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotNullClause; }
	}

	public final UnpivotNullClauseContext unpivotNullClause() throws RecognitionException {
		UnpivotNullClauseContext _localctx = new UnpivotNullClauseContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_unpivotNullClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2897);
			_la = _input.LA(1);
			if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2898);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotOperatorContext extends ParserRuleContext {
		public UnpivotSingleValueColumnClauseContext unpivotSingleValueColumnClause() {
			return getRuleContext(UnpivotSingleValueColumnClauseContext.class,0);
		}
		public UnpivotMultiValueColumnClauseContext unpivotMultiValueColumnClause() {
			return getRuleContext(UnpivotMultiValueColumnClauseContext.class,0);
		}
		public UnpivotOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotOperator; }
	}

	public final UnpivotOperatorContext unpivotOperator() throws RecognitionException {
		UnpivotOperatorContext _localctx = new UnpivotOperatorContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_unpivotOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2902);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
			case 1:
				{
				setState(2900);
				unpivotSingleValueColumnClause();
				}
				break;
			case 2:
				{
				setState(2901);
				unpivotMultiValueColumnClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotSingleValueColumnClauseContext extends ParserRuleContext {
		public UnpivotColumnAndAliasContext unpivotColumnAndAlias;
		public List<UnpivotColumnAndAliasContext> unpivotColumns = new ArrayList<UnpivotColumnAndAliasContext>();
		public UnpivotValueColumnContext unpivotValueColumn() {
			return getRuleContext(UnpivotValueColumnContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public UnpivotNameColumnContext unpivotNameColumn() {
			return getRuleContext(UnpivotNameColumnContext.class,0);
		}
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<UnpivotColumnAndAliasContext> unpivotColumnAndAlias() {
			return getRuleContexts(UnpivotColumnAndAliasContext.class);
		}
		public UnpivotColumnAndAliasContext unpivotColumnAndAlias(int i) {
			return getRuleContext(UnpivotColumnAndAliasContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public UnpivotSingleValueColumnClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotSingleValueColumnClause; }
	}

	public final UnpivotSingleValueColumnClauseContext unpivotSingleValueColumnClause() throws RecognitionException {
		UnpivotSingleValueColumnClauseContext _localctx = new UnpivotSingleValueColumnClauseContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_unpivotSingleValueColumnClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2904);
			unpivotValueColumn();
			setState(2905);
			match(FOR);
			setState(2906);
			unpivotNameColumn();
			setState(2907);
			match(IN);
			setState(2908);
			match(LEFT_PAREN);
			setState(2909);
			((UnpivotSingleValueColumnClauseContext)_localctx).unpivotColumnAndAlias = unpivotColumnAndAlias();
			((UnpivotSingleValueColumnClauseContext)_localctx).unpivotColumns.add(((UnpivotSingleValueColumnClauseContext)_localctx).unpivotColumnAndAlias);
			setState(2914);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2910);
				match(COMMA);
				setState(2911);
				((UnpivotSingleValueColumnClauseContext)_localctx).unpivotColumnAndAlias = unpivotColumnAndAlias();
				((UnpivotSingleValueColumnClauseContext)_localctx).unpivotColumns.add(((UnpivotSingleValueColumnClauseContext)_localctx).unpivotColumnAndAlias);
				}
				}
				setState(2916);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2917);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotMultiValueColumnClauseContext extends ParserRuleContext {
		public UnpivotValueColumnContext unpivotValueColumn;
		public List<UnpivotValueColumnContext> unpivotValueColumns = new ArrayList<UnpivotValueColumnContext>();
		public UnpivotColumnSetContext unpivotColumnSet;
		public List<UnpivotColumnSetContext> unpivotColumnSets = new ArrayList<UnpivotColumnSetContext>();
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public UnpivotNameColumnContext unpivotNameColumn() {
			return getRuleContext(UnpivotNameColumnContext.class,0);
		}
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public List<UnpivotValueColumnContext> unpivotValueColumn() {
			return getRuleContexts(UnpivotValueColumnContext.class);
		}
		public UnpivotValueColumnContext unpivotValueColumn(int i) {
			return getRuleContext(UnpivotValueColumnContext.class,i);
		}
		public List<UnpivotColumnSetContext> unpivotColumnSet() {
			return getRuleContexts(UnpivotColumnSetContext.class);
		}
		public UnpivotColumnSetContext unpivotColumnSet(int i) {
			return getRuleContext(UnpivotColumnSetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public UnpivotMultiValueColumnClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotMultiValueColumnClause; }
	}

	public final UnpivotMultiValueColumnClauseContext unpivotMultiValueColumnClause() throws RecognitionException {
		UnpivotMultiValueColumnClauseContext _localctx = new UnpivotMultiValueColumnClauseContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_unpivotMultiValueColumnClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2919);
			match(LEFT_PAREN);
			setState(2920);
			((UnpivotMultiValueColumnClauseContext)_localctx).unpivotValueColumn = unpivotValueColumn();
			((UnpivotMultiValueColumnClauseContext)_localctx).unpivotValueColumns.add(((UnpivotMultiValueColumnClauseContext)_localctx).unpivotValueColumn);
			setState(2925);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2921);
				match(COMMA);
				setState(2922);
				((UnpivotMultiValueColumnClauseContext)_localctx).unpivotValueColumn = unpivotValueColumn();
				((UnpivotMultiValueColumnClauseContext)_localctx).unpivotValueColumns.add(((UnpivotMultiValueColumnClauseContext)_localctx).unpivotValueColumn);
				}
				}
				setState(2927);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2928);
			match(RIGHT_PAREN);
			setState(2929);
			match(FOR);
			setState(2930);
			unpivotNameColumn();
			setState(2931);
			match(IN);
			setState(2932);
			match(LEFT_PAREN);
			setState(2933);
			((UnpivotMultiValueColumnClauseContext)_localctx).unpivotColumnSet = unpivotColumnSet();
			((UnpivotMultiValueColumnClauseContext)_localctx).unpivotColumnSets.add(((UnpivotMultiValueColumnClauseContext)_localctx).unpivotColumnSet);
			setState(2938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2934);
				match(COMMA);
				setState(2935);
				((UnpivotMultiValueColumnClauseContext)_localctx).unpivotColumnSet = unpivotColumnSet();
				((UnpivotMultiValueColumnClauseContext)_localctx).unpivotColumnSets.add(((UnpivotMultiValueColumnClauseContext)_localctx).unpivotColumnSet);
				}
				}
				setState(2940);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2941);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotColumnSetContext extends ParserRuleContext {
		public UnpivotColumnContext unpivotColumn;
		public List<UnpivotColumnContext> unpivotColumns = new ArrayList<UnpivotColumnContext>();
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<UnpivotColumnContext> unpivotColumn() {
			return getRuleContexts(UnpivotColumnContext.class);
		}
		public UnpivotColumnContext unpivotColumn(int i) {
			return getRuleContext(UnpivotColumnContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public UnpivotAliasContext unpivotAlias() {
			return getRuleContext(UnpivotAliasContext.class,0);
		}
		public UnpivotColumnSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotColumnSet; }
	}

	public final UnpivotColumnSetContext unpivotColumnSet() throws RecognitionException {
		UnpivotColumnSetContext _localctx = new UnpivotColumnSetContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_unpivotColumnSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2943);
			match(LEFT_PAREN);
			setState(2944);
			((UnpivotColumnSetContext)_localctx).unpivotColumn = unpivotColumn();
			((UnpivotColumnSetContext)_localctx).unpivotColumns.add(((UnpivotColumnSetContext)_localctx).unpivotColumn);
			setState(2949);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2945);
				match(COMMA);
				setState(2946);
				((UnpivotColumnSetContext)_localctx).unpivotColumn = unpivotColumn();
				((UnpivotColumnSetContext)_localctx).unpivotColumns.add(((UnpivotColumnSetContext)_localctx).unpivotColumn);
				}
				}
				setState(2951);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2952);
			match(RIGHT_PAREN);
			setState(2954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
			case 1:
				{
				setState(2953);
				unpivotAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotValueColumnContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnpivotValueColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotValueColumn; }
	}

	public final UnpivotValueColumnContext unpivotValueColumn() throws RecognitionException {
		UnpivotValueColumnContext _localctx = new UnpivotValueColumnContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_unpivotValueColumn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2956);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotNameColumnContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnpivotNameColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotNameColumn; }
	}

	public final UnpivotNameColumnContext unpivotNameColumn() throws RecognitionException {
		UnpivotNameColumnContext _localctx = new UnpivotNameColumnContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_unpivotNameColumn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2958);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotColumnAndAliasContext extends ParserRuleContext {
		public UnpivotColumnContext unpivotColumn() {
			return getRuleContext(UnpivotColumnContext.class,0);
		}
		public UnpivotAliasContext unpivotAlias() {
			return getRuleContext(UnpivotAliasContext.class,0);
		}
		public UnpivotColumnAndAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotColumnAndAlias; }
	}

	public final UnpivotColumnAndAliasContext unpivotColumnAndAlias() throws RecognitionException {
		UnpivotColumnAndAliasContext _localctx = new UnpivotColumnAndAliasContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_unpivotColumnAndAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2960);
			unpivotColumn();
			setState(2962);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
			case 1:
				{
				setState(2961);
				unpivotAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotColumnContext extends ParserRuleContext {
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public UnpivotColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotColumn; }
	}

	public final UnpivotColumnContext unpivotColumn() throws RecognitionException {
		UnpivotColumnContext _localctx = new UnpivotColumnContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_unpivotColumn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2964);
			multipartIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnpivotAliasContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public UnpivotAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivotAlias; }
	}

	public final UnpivotAliasContext unpivotAlias() throws RecognitionException {
		UnpivotAliasContext _localctx = new UnpivotAliasContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_unpivotAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2967);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				{
				setState(2966);
				match(AS);
				}
				break;
			}
			setState(2969);
			errorCapturingIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LateralViewContext extends ParserRuleContext {
		public IdentifierContext tblName;
		public IdentifierContext identifier;
		public List<IdentifierContext> colName = new ArrayList<IdentifierContext>();
		public TerminalNode LATERAL() { return getToken(SqlBaseParser.LATERAL, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OUTER() { return getToken(SqlBaseParser.OUTER, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public LateralViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lateralView; }
	}

	public final LateralViewContext lateralView() throws RecognitionException {
		LateralViewContext _localctx = new LateralViewContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_lateralView);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2971);
			match(LATERAL);
			setState(2972);
			match(VIEW);
			setState(2974);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				setState(2973);
				match(OUTER);
				}
				break;
			}
			setState(2976);
			qualifiedName();
			setState(2977);
			match(LEFT_PAREN);
			setState(2986);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				setState(2978);
				expression();
				setState(2983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2979);
					match(COMMA);
					setState(2980);
					expression();
					}
					}
					setState(2985);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2988);
			match(RIGHT_PAREN);
			setState(2989);
			((LateralViewContext)_localctx).tblName = identifier();
			setState(3001);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				{
				setState(2991);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
				case 1:
					{
					setState(2990);
					match(AS);
					}
					break;
				}
				setState(2993);
				((LateralViewContext)_localctx).identifier = identifier();
				((LateralViewContext)_localctx).colName.add(((LateralViewContext)_localctx).identifier);
				setState(2998);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,360,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2994);
						match(COMMA);
						setState(2995);
						((LateralViewContext)_localctx).identifier = identifier();
						((LateralViewContext)_localctx).colName.add(((LateralViewContext)_localctx).identifier);
						}
						} 
					}
					setState(3000);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,360,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetQuantifierContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(SqlBaseParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(SqlBaseParser.ALL, 0); }
		public SetQuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setQuantifier; }
	}

	public final SetQuantifierContext setQuantifier() throws RecognitionException {
		SetQuantifierContext _localctx = new SetQuantifierContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_setQuantifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3003);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RelationContext extends ParserRuleContext {
		public RelationPrimaryContext relationPrimary() {
			return getRuleContext(RelationPrimaryContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(SqlBaseParser.LATERAL, 0); }
		public List<RelationExtensionContext> relationExtension() {
			return getRuleContexts(RelationExtensionContext.class);
		}
		public RelationExtensionContext relationExtension(int i) {
			return getRuleContext(RelationExtensionContext.class,i);
		}
		public RelationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relation; }
	}

	public final RelationContext relation() throws RecognitionException {
		RelationContext _localctx = new RelationContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_relation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3006);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
			case 1:
				{
				setState(3005);
				match(LATERAL);
				}
				break;
			}
			setState(3008);
			relationPrimary();
			setState(3012);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,363,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3009);
					relationExtension();
					}
					} 
				}
				setState(3014);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,363,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RelationExtensionContext extends ParserRuleContext {
		public JoinRelationContext joinRelation() {
			return getRuleContext(JoinRelationContext.class,0);
		}
		public PivotClauseContext pivotClause() {
			return getRuleContext(PivotClauseContext.class,0);
		}
		public UnpivotClauseContext unpivotClause() {
			return getRuleContext(UnpivotClauseContext.class,0);
		}
		public RelationExtensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationExtension; }
	}

	public final RelationExtensionContext relationExtension() throws RecognitionException {
		RelationExtensionContext _localctx = new RelationExtensionContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_relationExtension);
		try {
			setState(3018);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANTI:
			case CROSS:
			case FULL:
			case INNER:
			case JOIN:
			case LEFT:
			case NATURAL:
			case RIGHT:
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				setState(3015);
				joinRelation();
				}
				break;
			case PIVOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3016);
				pivotClause();
				}
				break;
			case UNPIVOT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3017);
				unpivotClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JoinRelationContext extends ParserRuleContext {
		public RelationPrimaryContext right;
		public TerminalNode JOIN() { return getToken(SqlBaseParser.JOIN, 0); }
		public RelationPrimaryContext relationPrimary() {
			return getRuleContext(RelationPrimaryContext.class,0);
		}
		public JoinTypeContext joinType() {
			return getRuleContext(JoinTypeContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(SqlBaseParser.LATERAL, 0); }
		public JoinCriteriaContext joinCriteria() {
			return getRuleContext(JoinCriteriaContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(SqlBaseParser.NATURAL, 0); }
		public JoinRelationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinRelation; }
	}

	public final JoinRelationContext joinRelation() throws RecognitionException {
		JoinRelationContext _localctx = new JoinRelationContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_joinRelation);
		try {
			setState(3037);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANTI:
			case CROSS:
			case FULL:
			case INNER:
			case JOIN:
			case LEFT:
			case RIGHT:
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3020);
				joinType();
				}
				setState(3021);
				match(JOIN);
				setState(3023);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
				case 1:
					{
					setState(3022);
					match(LATERAL);
					}
					break;
				}
				setState(3025);
				((JoinRelationContext)_localctx).right = relationPrimary();
				setState(3027);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
				case 1:
					{
					setState(3026);
					joinCriteria();
					}
					break;
				}
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3029);
				match(NATURAL);
				setState(3030);
				joinType();
				setState(3031);
				match(JOIN);
				setState(3033);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
				case 1:
					{
					setState(3032);
					match(LATERAL);
					}
					break;
				}
				setState(3035);
				((JoinRelationContext)_localctx).right = relationPrimary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JoinTypeContext extends ParserRuleContext {
		public TerminalNode INNER() { return getToken(SqlBaseParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(SqlBaseParser.CROSS, 0); }
		public TerminalNode LEFT() { return getToken(SqlBaseParser.LEFT, 0); }
		public TerminalNode OUTER() { return getToken(SqlBaseParser.OUTER, 0); }
		public TerminalNode SEMI() { return getToken(SqlBaseParser.SEMI, 0); }
		public TerminalNode RIGHT() { return getToken(SqlBaseParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(SqlBaseParser.FULL, 0); }
		public TerminalNode ANTI() { return getToken(SqlBaseParser.ANTI, 0); }
		public JoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinType; }
	}

	public final JoinTypeContext joinType() throws RecognitionException {
		JoinTypeContext _localctx = new JoinTypeContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_joinType);
		int _la;
		try {
			setState(3063);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INNER) {
					{
					setState(3039);
					match(INNER);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3042);
				match(CROSS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3043);
				match(LEFT);
				setState(3045);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3044);
					match(OUTER);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3048);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT) {
					{
					setState(3047);
					match(LEFT);
					}
				}

				setState(3050);
				match(SEMI);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3051);
				match(RIGHT);
				setState(3053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3052);
					match(OUTER);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3055);
				match(FULL);
				setState(3057);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3056);
					match(OUTER);
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3060);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT) {
					{
					setState(3059);
					match(LEFT);
					}
				}

				setState(3062);
				match(ANTI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class JoinCriteriaContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public JoinCriteriaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinCriteria; }
	}

	public final JoinCriteriaContext joinCriteria() throws RecognitionException {
		JoinCriteriaContext _localctx = new JoinCriteriaContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_joinCriteria);
		try {
			setState(3069);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3065);
				match(ON);
				setState(3066);
				booleanExpression(0);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3067);
				match(USING);
				setState(3068);
				identifierList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SampleContext extends ParserRuleContext {
		public Token seed;
		public TerminalNode TABLESAMPLE() { return getToken(SqlBaseParser.TABLESAMPLE, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public SampleMethodContext sampleMethod() {
			return getRuleContext(SampleMethodContext.class,0);
		}
		public TerminalNode REPEATABLE() { return getToken(SqlBaseParser.REPEATABLE, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public SampleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample; }
	}

	public final SampleContext sample() throws RecognitionException {
		SampleContext _localctx = new SampleContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_sample);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3071);
			match(TABLESAMPLE);
			setState(3072);
			match(LEFT_PAREN);
			setState(3074);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				setState(3073);
				sampleMethod();
				}
				break;
			}
			setState(3076);
			match(RIGHT_PAREN);
			setState(3081);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
			case 1:
				{
				setState(3077);
				match(REPEATABLE);
				setState(3078);
				match(LEFT_PAREN);
				setState(3079);
				((SampleContext)_localctx).seed = match(INTEGER_VALUE);
				setState(3080);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SampleMethodContext extends ParserRuleContext {
		public SampleMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sampleMethod; }
	 
		public SampleMethodContext() { }
		public void copyFrom(SampleMethodContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SampleByRowsContext extends SampleMethodContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(SqlBaseParser.ROWS, 0); }
		public SampleByRowsContext(SampleMethodContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SampleByPercentileContext extends SampleMethodContext {
		public Token negativeSign;
		public Token percentage;
		public TerminalNode PERCENTLIT() { return getToken(SqlBaseParser.PERCENTLIT, 0); }
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode DECIMAL_VALUE() { return getToken(SqlBaseParser.DECIMAL_VALUE, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public SampleByPercentileContext(SampleMethodContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SampleByBucketContext extends SampleMethodContext {
		public Token sampleType;
		public Token numerator;
		public Token denominator;
		public TerminalNode OUT() { return getToken(SqlBaseParser.OUT, 0); }
		public TerminalNode OF() { return getToken(SqlBaseParser.OF, 0); }
		public TerminalNode BUCKET() { return getToken(SqlBaseParser.BUCKET, 0); }
		public List<TerminalNode> INTEGER_VALUE() { return getTokens(SqlBaseParser.INTEGER_VALUE); }
		public TerminalNode INTEGER_VALUE(int i) {
			return getToken(SqlBaseParser.INTEGER_VALUE, i);
		}
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public SampleByBucketContext(SampleMethodContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SampleByBytesContext extends SampleMethodContext {
		public ExpressionContext bytes;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SampleByBytesContext(SampleMethodContext ctx) { copyFrom(ctx); }
	}

	public final SampleMethodContext sampleMethod() throws RecognitionException {
		SampleMethodContext _localctx = new SampleMethodContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_sampleMethod);
		int _la;
		try {
			setState(3107);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				_localctx = new SampleByPercentileContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3084);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(3083);
					((SampleByPercentileContext)_localctx).negativeSign = match(MINUS);
					}
				}

				setState(3086);
				((SampleByPercentileContext)_localctx).percentage = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INTEGER_VALUE || _la==DECIMAL_VALUE) ) {
					((SampleByPercentileContext)_localctx).percentage = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3087);
				match(PERCENTLIT);
				}
				break;
			case 2:
				_localctx = new SampleByRowsContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3088);
				expression();
				setState(3089);
				match(ROWS);
				}
				break;
			case 3:
				_localctx = new SampleByBucketContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3091);
				((SampleByBucketContext)_localctx).sampleType = match(BUCKET);
				setState(3092);
				((SampleByBucketContext)_localctx).numerator = match(INTEGER_VALUE);
				setState(3093);
				match(OUT);
				setState(3094);
				match(OF);
				setState(3095);
				((SampleByBucketContext)_localctx).denominator = match(INTEGER_VALUE);
				setState(3104);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(3096);
					match(ON);
					setState(3102);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
					case 1:
						{
						setState(3097);
						identifier();
						}
						break;
					case 2:
						{
						setState(3098);
						qualifiedName();
						setState(3099);
						match(LEFT_PAREN);
						setState(3100);
						match(RIGHT_PAREN);
						}
						break;
					}
					}
				}

				}
				break;
			case 4:
				_localctx = new SampleByBytesContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3106);
				((SampleByBytesContext)_localctx).bytes = expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public IdentifierSeqContext identifierSeq() {
			return getRuleContext(IdentifierSeqContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public IdentifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierList; }
	}

	public final IdentifierListContext identifierList() throws RecognitionException {
		IdentifierListContext _localctx = new IdentifierListContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_identifierList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3109);
			match(LEFT_PAREN);
			setState(3110);
			identifierSeq();
			setState(3111);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierSeqContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier;
		public List<ErrorCapturingIdentifierContext> ident = new ArrayList<ErrorCapturingIdentifierContext>();
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public IdentifierSeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierSeq; }
	}

	public final IdentifierSeqContext identifierSeq() throws RecognitionException {
		IdentifierSeqContext _localctx = new IdentifierSeqContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_identifierSeq);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3113);
			((IdentifierSeqContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
			((IdentifierSeqContext)_localctx).ident.add(((IdentifierSeqContext)_localctx).errorCapturingIdentifier);
			setState(3118);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,383,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3114);
					match(COMMA);
					setState(3115);
					((IdentifierSeqContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
					((IdentifierSeqContext)_localctx).ident.add(((IdentifierSeqContext)_localctx).errorCapturingIdentifier);
					}
					} 
				}
				setState(3120);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,383,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderedIdentifierListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<OrderedIdentifierContext> orderedIdentifier() {
			return getRuleContexts(OrderedIdentifierContext.class);
		}
		public OrderedIdentifierContext orderedIdentifier(int i) {
			return getRuleContext(OrderedIdentifierContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public OrderedIdentifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderedIdentifierList; }
	}

	public final OrderedIdentifierListContext orderedIdentifierList() throws RecognitionException {
		OrderedIdentifierListContext _localctx = new OrderedIdentifierListContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_orderedIdentifierList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3121);
			match(LEFT_PAREN);
			setState(3122);
			orderedIdentifier();
			setState(3127);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3123);
				match(COMMA);
				setState(3124);
				orderedIdentifier();
				}
				}
				setState(3129);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3130);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderedIdentifierContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext ident;
		public Token ordering;
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public TerminalNode ASC() { return getToken(SqlBaseParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public OrderedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderedIdentifier; }
	}

	public final OrderedIdentifierContext orderedIdentifier() throws RecognitionException {
		OrderedIdentifierContext _localctx = new OrderedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_orderedIdentifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3132);
			((OrderedIdentifierContext)_localctx).ident = errorCapturingIdentifier();
			setState(3134);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(3133);
				((OrderedIdentifierContext)_localctx).ordering = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((OrderedIdentifierContext)_localctx).ordering = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierCommentListContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<IdentifierCommentContext> identifierComment() {
			return getRuleContexts(IdentifierCommentContext.class);
		}
		public IdentifierCommentContext identifierComment(int i) {
			return getRuleContext(IdentifierCommentContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public IdentifierCommentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierCommentList; }
	}

	public final IdentifierCommentListContext identifierCommentList() throws RecognitionException {
		IdentifierCommentListContext _localctx = new IdentifierCommentListContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_identifierCommentList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3136);
			match(LEFT_PAREN);
			setState(3137);
			identifierComment();
			setState(3142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3138);
				match(COMMA);
				setState(3139);
				identifierComment();
				}
				}
				setState(3144);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3145);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierCommentContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public IdentifierCommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierComment; }
	}

	public final IdentifierCommentContext identifierComment() throws RecognitionException {
		IdentifierCommentContext _localctx = new IdentifierCommentContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_identifierComment);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3147);
			identifier();
			setState(3149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(3148);
				commentSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RelationPrimaryContext extends ParserRuleContext {
		public RelationPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationPrimary; }
	 
		public RelationPrimaryContext() { }
		public void copyFrom(RelationPrimaryContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableValuedFunctionContext extends RelationPrimaryContext {
		public FunctionTableContext functionTable() {
			return getRuleContext(FunctionTableContext.class,0);
		}
		public TableValuedFunctionContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class InlineTableDefault2Context extends RelationPrimaryContext {
		public InlineTableContext inlineTable() {
			return getRuleContext(InlineTableContext.class,0);
		}
		public InlineTableDefault2Context(RelationPrimaryContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AliasedRelationContext extends RelationPrimaryContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public RelationContext relation() {
			return getRuleContext(RelationContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public SampleContext sample() {
			return getRuleContext(SampleContext.class,0);
		}
		public AliasedRelationContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AliasedQueryContext extends RelationPrimaryContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public SampleContext sample() {
			return getRuleContext(SampleContext.class,0);
		}
		public AliasedQueryContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TableNameContext extends RelationPrimaryContext {
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public TemporalClauseContext temporalClause() {
			return getRuleContext(TemporalClauseContext.class,0);
		}
		public OptionsClauseContext optionsClause() {
			return getRuleContext(OptionsClauseContext.class,0);
		}
		public SampleContext sample() {
			return getRuleContext(SampleContext.class,0);
		}
		public TableNameContext(RelationPrimaryContext ctx) { copyFrom(ctx); }
	}

	public final RelationPrimaryContext relationPrimary() throws RecognitionException {
		RelationPrimaryContext _localctx = new RelationPrimaryContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_relationPrimary);
		try {
			setState(3181);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				_localctx = new TableNameContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3151);
				identifierReference();
				setState(3153);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
				case 1:
					{
					setState(3152);
					temporalClause();
					}
					break;
				}
				setState(3156);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
				case 1:
					{
					setState(3155);
					optionsClause();
					}
					break;
				}
				setState(3159);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
				case 1:
					{
					setState(3158);
					sample();
					}
					break;
				}
				setState(3161);
				tableAlias();
				}
				break;
			case 2:
				_localctx = new AliasedQueryContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3163);
				match(LEFT_PAREN);
				setState(3164);
				query();
				setState(3165);
				match(RIGHT_PAREN);
				setState(3167);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
				case 1:
					{
					setState(3166);
					sample();
					}
					break;
				}
				setState(3169);
				tableAlias();
				}
				break;
			case 3:
				_localctx = new AliasedRelationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3171);
				match(LEFT_PAREN);
				setState(3172);
				relation();
				setState(3173);
				match(RIGHT_PAREN);
				setState(3175);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
				case 1:
					{
					setState(3174);
					sample();
					}
					break;
				}
				setState(3177);
				tableAlias();
				}
				break;
			case 4:
				_localctx = new InlineTableDefault2Context(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3179);
				inlineTable();
				}
				break;
			case 5:
				_localctx = new TableValuedFunctionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3180);
				functionTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptionsClauseContext extends ParserRuleContext {
		public PropertyListContext options;
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public OptionsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionsClause; }
	}

	public final OptionsClauseContext optionsClause() throws RecognitionException {
		OptionsClauseContext _localctx = new OptionsClauseContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_optionsClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3183);
			match(WITH);
			setState(3184);
			((OptionsClauseContext)_localctx).options = propertyList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InlineTableContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(SqlBaseParser.VALUES, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public InlineTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inlineTable; }
	}

	public final InlineTableContext inlineTable() throws RecognitionException {
		InlineTableContext _localctx = new InlineTableContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_inlineTable);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3186);
			match(VALUES);
			setState(3187);
			expression();
			setState(3192);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,394,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3188);
					match(COMMA);
					setState(3189);
					expression();
					}
					} 
				}
				setState(3194);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,394,_ctx);
			}
			setState(3195);
			tableAlias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionTableSubqueryArgumentContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public IdentifierReferenceContext identifierReference() {
			return getRuleContext(IdentifierReferenceContext.class,0);
		}
		public TableArgumentPartitioningContext tableArgumentPartitioning() {
			return getRuleContext(TableArgumentPartitioningContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public FunctionTableSubqueryArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionTableSubqueryArgument; }
	}

	public final FunctionTableSubqueryArgumentContext functionTableSubqueryArgument() throws RecognitionException {
		FunctionTableSubqueryArgumentContext _localctx = new FunctionTableSubqueryArgumentContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_functionTableSubqueryArgument);
		int _la;
		try {
			setState(3216);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3197);
				match(TABLE);
				setState(3198);
				identifierReference();
				setState(3200);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTRIBUTE || _la==PARTITION || _la==WITH) {
					{
					setState(3199);
					tableArgumentPartitioning();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3202);
				match(TABLE);
				setState(3203);
				match(LEFT_PAREN);
				setState(3204);
				identifierReference();
				setState(3205);
				match(RIGHT_PAREN);
				setState(3207);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTRIBUTE || _la==PARTITION || _la==WITH) {
					{
					setState(3206);
					tableArgumentPartitioning();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3209);
				match(TABLE);
				setState(3210);
				match(LEFT_PAREN);
				setState(3211);
				query();
				setState(3212);
				match(RIGHT_PAREN);
				setState(3214);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTRIBUTE || _la==PARTITION || _la==WITH) {
					{
					setState(3213);
					tableArgumentPartitioning();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableArgumentPartitioningContext extends ParserRuleContext {
		public ExpressionContext expression;
		public List<ExpressionContext> partition = new ArrayList<ExpressionContext>();
		public ExpressionContext invalidMultiPartitionExpression;
		public SortItemContext invalidMultiSortItem;
		public List<TerminalNode> BY() { return getTokens(SqlBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SqlBaseParser.BY, i);
		}
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode SINGLE() { return getToken(SqlBaseParser.SINGLE, 0); }
		public TerminalNode PARTITION() { return getToken(SqlBaseParser.PARTITION, 0); }
		public TerminalNode ORDER() { return getToken(SqlBaseParser.ORDER, 0); }
		public TerminalNode SORT() { return getToken(SqlBaseParser.SORT, 0); }
		public TerminalNode DISTRIBUTE() { return getToken(SqlBaseParser.DISTRIBUTE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<SortItemContext> sortItem() {
			return getRuleContexts(SortItemContext.class);
		}
		public SortItemContext sortItem(int i) {
			return getRuleContext(SortItemContext.class,i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TableArgumentPartitioningContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableArgumentPartitioning; }
	}

	public final TableArgumentPartitioningContext tableArgumentPartitioning() throws RecognitionException {
		TableArgumentPartitioningContext _localctx = new TableArgumentPartitioningContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_tableArgumentPartitioning);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3244);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				{
				setState(3218);
				match(WITH);
				setState(3219);
				match(SINGLE);
				setState(3220);
				match(PARTITION);
				}
				}
				break;
			case DISTRIBUTE:
			case PARTITION:
				{
				{
				setState(3221);
				_la = _input.LA(1);
				if ( !(_la==DISTRIBUTE || _la==PARTITION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3222);
				match(BY);
				setState(3242);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
				case 1:
					{
					{
					{
					setState(3223);
					match(LEFT_PAREN);
					setState(3224);
					((TableArgumentPartitioningContext)_localctx).expression = expression();
					((TableArgumentPartitioningContext)_localctx).partition.add(((TableArgumentPartitioningContext)_localctx).expression);
					setState(3229);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3225);
						match(COMMA);
						setState(3226);
						((TableArgumentPartitioningContext)_localctx).expression = expression();
						((TableArgumentPartitioningContext)_localctx).partition.add(((TableArgumentPartitioningContext)_localctx).expression);
						}
						}
						setState(3231);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3232);
					match(RIGHT_PAREN);
					}
					}
					}
					break;
				case 2:
					{
					{
					setState(3234);
					expression();
					setState(3237); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(3235);
							match(COMMA);
							setState(3236);
							((TableArgumentPartitioningContext)_localctx).invalidMultiPartitionExpression = expression();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3239); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,400,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					break;
				case 3:
					{
					setState(3241);
					((TableArgumentPartitioningContext)_localctx).expression = expression();
					((TableArgumentPartitioningContext)_localctx).partition.add(((TableArgumentPartitioningContext)_localctx).expression);
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3269);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER || _la==SORT) {
				{
				setState(3246);
				_la = _input.LA(1);
				if ( !(_la==ORDER || _la==SORT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3247);
				match(BY);
				{
				setState(3267);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
				case 1:
					{
					{
					setState(3248);
					match(LEFT_PAREN);
					setState(3249);
					sortItem();
					setState(3254);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3250);
						match(COMMA);
						setState(3251);
						sortItem();
						}
						}
						setState(3256);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3257);
					match(RIGHT_PAREN);
					}
					}
					break;
				case 2:
					{
					{
					setState(3259);
					sortItem();
					setState(3262); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(3260);
							match(COMMA);
							setState(3261);
							((TableArgumentPartitioningContext)_localctx).invalidMultiSortItem = sortItem();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3264); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,404,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					break;
				case 3:
					{
					setState(3266);
					sortItem();
					}
					break;
				}
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionTableNamedArgumentExpressionContext extends ParserRuleContext {
		public IdentifierContext key;
		public FunctionTableSubqueryArgumentContext table;
		public TerminalNode FAT_ARROW() { return getToken(SqlBaseParser.FAT_ARROW, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FunctionTableSubqueryArgumentContext functionTableSubqueryArgument() {
			return getRuleContext(FunctionTableSubqueryArgumentContext.class,0);
		}
		public FunctionTableNamedArgumentExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionTableNamedArgumentExpression; }
	}

	public final FunctionTableNamedArgumentExpressionContext functionTableNamedArgumentExpression() throws RecognitionException {
		FunctionTableNamedArgumentExpressionContext _localctx = new FunctionTableNamedArgumentExpressionContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_functionTableNamedArgumentExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3271);
			((FunctionTableNamedArgumentExpressionContext)_localctx).key = identifier();
			setState(3272);
			match(FAT_ARROW);
			setState(3273);
			((FunctionTableNamedArgumentExpressionContext)_localctx).table = functionTableSubqueryArgument();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionTableReferenceArgumentContext extends ParserRuleContext {
		public FunctionTableSubqueryArgumentContext functionTableSubqueryArgument() {
			return getRuleContext(FunctionTableSubqueryArgumentContext.class,0);
		}
		public FunctionTableNamedArgumentExpressionContext functionTableNamedArgumentExpression() {
			return getRuleContext(FunctionTableNamedArgumentExpressionContext.class,0);
		}
		public FunctionTableReferenceArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionTableReferenceArgument; }
	}

	public final FunctionTableReferenceArgumentContext functionTableReferenceArgument() throws RecognitionException {
		FunctionTableReferenceArgumentContext _localctx = new FunctionTableReferenceArgumentContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_functionTableReferenceArgument);
		try {
			setState(3277);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3275);
				functionTableSubqueryArgument();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3276);
				functionTableNamedArgumentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionTableArgumentContext extends ParserRuleContext {
		public FunctionTableReferenceArgumentContext functionTableReferenceArgument() {
			return getRuleContext(FunctionTableReferenceArgumentContext.class,0);
		}
		public FunctionArgumentContext functionArgument() {
			return getRuleContext(FunctionArgumentContext.class,0);
		}
		public FunctionTableArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionTableArgument; }
	}

	public final FunctionTableArgumentContext functionTableArgument() throws RecognitionException {
		FunctionTableArgumentContext _localctx = new FunctionTableArgumentContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_functionTableArgument);
		try {
			setState(3281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3279);
				functionTableReferenceArgument();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3280);
				functionArgument();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionTableContext extends ParserRuleContext {
		public FunctionNameContext funcName;
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public List<FunctionTableArgumentContext> functionTableArgument() {
			return getRuleContexts(FunctionTableArgumentContext.class);
		}
		public FunctionTableArgumentContext functionTableArgument(int i) {
			return getRuleContext(FunctionTableArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public FunctionTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionTable; }
	}

	public final FunctionTableContext functionTable() throws RecognitionException {
		FunctionTableContext _localctx = new FunctionTableContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_functionTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3283);
			((FunctionTableContext)_localctx).funcName = functionName();
			setState(3284);
			match(LEFT_PAREN);
			setState(3293);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
			case 1:
				{
				setState(3285);
				functionTableArgument();
				setState(3290);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3286);
					match(COMMA);
					setState(3287);
					functionTableArgument();
					}
					}
					setState(3292);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(3295);
			match(RIGHT_PAREN);
			setState(3296);
			tableAlias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableAliasContext extends ParserRuleContext {
		public StrictIdentifierContext strictIdentifier() {
			return getRuleContext(StrictIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TableAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAlias; }
	}

	public final TableAliasContext tableAlias() throws RecognitionException {
		TableAliasContext _localctx = new TableAliasContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_tableAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3305);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				{
				setState(3299);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
				case 1:
					{
					setState(3298);
					match(AS);
					}
					break;
				}
				setState(3301);
				strictIdentifier();
				setState(3303);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
				case 1:
					{
					setState(3302);
					identifierList();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RowFormatContext extends ParserRuleContext {
		public RowFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowFormat; }
	 
		public RowFormatContext() { }
		public void copyFrom(RowFormatContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RowFormatSerdeContext extends RowFormatContext {
		public StringLitContext name;
		public PropertyListContext props;
		public TerminalNode ROW() { return getToken(SqlBaseParser.ROW, 0); }
		public TerminalNode FORMAT() { return getToken(SqlBaseParser.FORMAT, 0); }
		public TerminalNode SERDE() { return getToken(SqlBaseParser.SERDE, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode SERDEPROPERTIES() { return getToken(SqlBaseParser.SERDEPROPERTIES, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public RowFormatSerdeContext(RowFormatContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RowFormatDelimitedContext extends RowFormatContext {
		public StringLitContext fieldsTerminatedBy;
		public StringLitContext escapedBy;
		public StringLitContext collectionItemsTerminatedBy;
		public StringLitContext keysTerminatedBy;
		public StringLitContext linesSeparatedBy;
		public StringLitContext nullDefinedAs;
		public TerminalNode ROW() { return getToken(SqlBaseParser.ROW, 0); }
		public TerminalNode FORMAT() { return getToken(SqlBaseParser.FORMAT, 0); }
		public TerminalNode DELIMITED() { return getToken(SqlBaseParser.DELIMITED, 0); }
		public TerminalNode FIELDS() { return getToken(SqlBaseParser.FIELDS, 0); }
		public List<TerminalNode> TERMINATED() { return getTokens(SqlBaseParser.TERMINATED); }
		public TerminalNode TERMINATED(int i) {
			return getToken(SqlBaseParser.TERMINATED, i);
		}
		public List<TerminalNode> BY() { return getTokens(SqlBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SqlBaseParser.BY, i);
		}
		public TerminalNode COLLECTION() { return getToken(SqlBaseParser.COLLECTION, 0); }
		public TerminalNode ITEMS() { return getToken(SqlBaseParser.ITEMS, 0); }
		public TerminalNode MAP() { return getToken(SqlBaseParser.MAP, 0); }
		public TerminalNode KEYS() { return getToken(SqlBaseParser.KEYS, 0); }
		public TerminalNode LINES() { return getToken(SqlBaseParser.LINES, 0); }
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public TerminalNode DEFINED() { return getToken(SqlBaseParser.DEFINED, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public List<StringLitContext> stringLit() {
			return getRuleContexts(StringLitContext.class);
		}
		public StringLitContext stringLit(int i) {
			return getRuleContext(StringLitContext.class,i);
		}
		public TerminalNode ESCAPED() { return getToken(SqlBaseParser.ESCAPED, 0); }
		public RowFormatDelimitedContext(RowFormatContext ctx) { copyFrom(ctx); }
	}

	public final RowFormatContext rowFormat() throws RecognitionException {
		RowFormatContext _localctx = new RowFormatContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_rowFormat);
		try {
			setState(3356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				_localctx = new RowFormatSerdeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3307);
				match(ROW);
				setState(3308);
				match(FORMAT);
				setState(3309);
				match(SERDE);
				setState(3310);
				((RowFormatSerdeContext)_localctx).name = stringLit();
				setState(3314);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
				case 1:
					{
					setState(3311);
					match(WITH);
					setState(3312);
					match(SERDEPROPERTIES);
					setState(3313);
					((RowFormatSerdeContext)_localctx).props = propertyList();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new RowFormatDelimitedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3316);
				match(ROW);
				setState(3317);
				match(FORMAT);
				setState(3318);
				match(DELIMITED);
				setState(3328);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
				case 1:
					{
					setState(3319);
					match(FIELDS);
					setState(3320);
					match(TERMINATED);
					setState(3321);
					match(BY);
					setState(3322);
					((RowFormatDelimitedContext)_localctx).fieldsTerminatedBy = stringLit();
					setState(3326);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
					case 1:
						{
						setState(3323);
						match(ESCAPED);
						setState(3324);
						match(BY);
						setState(3325);
						((RowFormatDelimitedContext)_localctx).escapedBy = stringLit();
						}
						break;
					}
					}
					break;
				}
				setState(3335);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
				case 1:
					{
					setState(3330);
					match(COLLECTION);
					setState(3331);
					match(ITEMS);
					setState(3332);
					match(TERMINATED);
					setState(3333);
					match(BY);
					setState(3334);
					((RowFormatDelimitedContext)_localctx).collectionItemsTerminatedBy = stringLit();
					}
					break;
				}
				setState(3342);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
				case 1:
					{
					setState(3337);
					match(MAP);
					setState(3338);
					match(KEYS);
					setState(3339);
					match(TERMINATED);
					setState(3340);
					match(BY);
					setState(3341);
					((RowFormatDelimitedContext)_localctx).keysTerminatedBy = stringLit();
					}
					break;
				}
				setState(3348);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
				case 1:
					{
					setState(3344);
					match(LINES);
					setState(3345);
					match(TERMINATED);
					setState(3346);
					match(BY);
					setState(3347);
					((RowFormatDelimitedContext)_localctx).linesSeparatedBy = stringLit();
					}
					break;
				}
				setState(3354);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
				case 1:
					{
					setState(3350);
					match(NULL);
					setState(3351);
					match(DEFINED);
					setState(3352);
					match(AS);
					setState(3353);
					((RowFormatDelimitedContext)_localctx).nullDefinedAs = stringLit();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MultipartIdentifierListContext extends ParserRuleContext {
		public List<MultipartIdentifierContext> multipartIdentifier() {
			return getRuleContexts(MultipartIdentifierContext.class);
		}
		public MultipartIdentifierContext multipartIdentifier(int i) {
			return getRuleContext(MultipartIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public MultipartIdentifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipartIdentifierList; }
	}

	public final MultipartIdentifierListContext multipartIdentifierList() throws RecognitionException {
		MultipartIdentifierListContext _localctx = new MultipartIdentifierListContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_multipartIdentifierList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3358);
			multipartIdentifier();
			setState(3363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3359);
				match(COMMA);
				setState(3360);
				multipartIdentifier();
				}
				}
				setState(3365);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MultipartIdentifierContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier;
		public List<ErrorCapturingIdentifierContext> parts = new ArrayList<ErrorCapturingIdentifierContext>();
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(SqlBaseParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SqlBaseParser.DOT, i);
		}
		public MultipartIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipartIdentifier; }
	}

	public final MultipartIdentifierContext multipartIdentifier() throws RecognitionException {
		MultipartIdentifierContext _localctx = new MultipartIdentifierContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_multipartIdentifier);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3366);
			((MultipartIdentifierContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
			((MultipartIdentifierContext)_localctx).parts.add(((MultipartIdentifierContext)_localctx).errorCapturingIdentifier);
			setState(3371);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,423,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3367);
					match(DOT);
					setState(3368);
					((MultipartIdentifierContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
					((MultipartIdentifierContext)_localctx).parts.add(((MultipartIdentifierContext)_localctx).errorCapturingIdentifier);
					}
					} 
				}
				setState(3373);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,423,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MultipartIdentifierPropertyListContext extends ParserRuleContext {
		public List<MultipartIdentifierPropertyContext> multipartIdentifierProperty() {
			return getRuleContexts(MultipartIdentifierPropertyContext.class);
		}
		public MultipartIdentifierPropertyContext multipartIdentifierProperty(int i) {
			return getRuleContext(MultipartIdentifierPropertyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public MultipartIdentifierPropertyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipartIdentifierPropertyList; }
	}

	public final MultipartIdentifierPropertyListContext multipartIdentifierPropertyList() throws RecognitionException {
		MultipartIdentifierPropertyListContext _localctx = new MultipartIdentifierPropertyListContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_multipartIdentifierPropertyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3374);
			multipartIdentifierProperty();
			setState(3379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3375);
				match(COMMA);
				setState(3376);
				multipartIdentifierProperty();
				}
				}
				setState(3381);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MultipartIdentifierPropertyContext extends ParserRuleContext {
		public PropertyListContext options;
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public PropertyListContext propertyList() {
			return getRuleContext(PropertyListContext.class,0);
		}
		public MultipartIdentifierPropertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipartIdentifierProperty; }
	}

	public final MultipartIdentifierPropertyContext multipartIdentifierProperty() throws RecognitionException {
		MultipartIdentifierPropertyContext _localctx = new MultipartIdentifierPropertyContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_multipartIdentifierProperty);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3382);
			multipartIdentifier();
			setState(3385);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(3383);
				match(OPTIONS);
				setState(3384);
				((MultipartIdentifierPropertyContext)_localctx).options = propertyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TableIdentifierContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext db;
		public ErrorCapturingIdentifierContext table;
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public TerminalNode DOT() { return getToken(SqlBaseParser.DOT, 0); }
		public TableIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableIdentifier; }
	}

	public final TableIdentifierContext tableIdentifier() throws RecognitionException {
		TableIdentifierContext _localctx = new TableIdentifierContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_tableIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3390);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
			case 1:
				{
				setState(3387);
				((TableIdentifierContext)_localctx).db = errorCapturingIdentifier();
				setState(3388);
				match(DOT);
				}
				break;
			}
			setState(3392);
			((TableIdentifierContext)_localctx).table = errorCapturingIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionIdentifierContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext db;
		public ErrorCapturingIdentifierContext function;
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public TerminalNode DOT() { return getToken(SqlBaseParser.DOT, 0); }
		public FunctionIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionIdentifier; }
	}

	public final FunctionIdentifierContext functionIdentifier() throws RecognitionException {
		FunctionIdentifierContext _localctx = new FunctionIdentifierContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_functionIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3397);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				{
				setState(3394);
				((FunctionIdentifierContext)_localctx).db = errorCapturingIdentifier();
				setState(3395);
				match(DOT);
				}
				break;
			}
			setState(3399);
			((FunctionIdentifierContext)_localctx).function = errorCapturingIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NamedExpressionContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext name;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public NamedExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedExpression; }
	}

	public final NamedExpressionContext namedExpression() throws RecognitionException {
		NamedExpressionContext _localctx = new NamedExpressionContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_namedExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3401);
			expression();
			setState(3409);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
			case 1:
				{
				setState(3403);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
				case 1:
					{
					setState(3402);
					match(AS);
					}
					break;
				}
				setState(3407);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
				case 1:
					{
					setState(3405);
					((NamedExpressionContext)_localctx).name = errorCapturingIdentifier();
					}
					break;
				case 2:
					{
					setState(3406);
					identifierList();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NamedExpressionSeqContext extends ParserRuleContext {
		public List<NamedExpressionContext> namedExpression() {
			return getRuleContexts(NamedExpressionContext.class);
		}
		public NamedExpressionContext namedExpression(int i) {
			return getRuleContext(NamedExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public NamedExpressionSeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedExpressionSeq; }
	}

	public final NamedExpressionSeqContext namedExpressionSeq() throws RecognitionException {
		NamedExpressionSeqContext _localctx = new NamedExpressionSeqContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_namedExpressionSeq);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3411);
			namedExpression();
			setState(3416);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,431,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3412);
					match(COMMA);
					setState(3413);
					namedExpression();
					}
					} 
				}
				setState(3418);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,431,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionFieldListContext extends ParserRuleContext {
		public PartitionFieldContext partitionField;
		public List<PartitionFieldContext> fields = new ArrayList<PartitionFieldContext>();
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<PartitionFieldContext> partitionField() {
			return getRuleContexts(PartitionFieldContext.class);
		}
		public PartitionFieldContext partitionField(int i) {
			return getRuleContext(PartitionFieldContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public PartitionFieldListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionFieldList; }
	}

	public final PartitionFieldListContext partitionFieldList() throws RecognitionException {
		PartitionFieldListContext _localctx = new PartitionFieldListContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_partitionFieldList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3419);
			match(LEFT_PAREN);
			setState(3420);
			((PartitionFieldListContext)_localctx).partitionField = partitionField();
			((PartitionFieldListContext)_localctx).fields.add(((PartitionFieldListContext)_localctx).partitionField);
			setState(3425);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3421);
				match(COMMA);
				setState(3422);
				((PartitionFieldListContext)_localctx).partitionField = partitionField();
				((PartitionFieldListContext)_localctx).fields.add(((PartitionFieldListContext)_localctx).partitionField);
				}
				}
				setState(3427);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3428);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PartitionFieldContext extends ParserRuleContext {
		public PartitionFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionField; }
	 
		public PartitionFieldContext() { }
		public void copyFrom(PartitionFieldContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionColumnContext extends PartitionFieldContext {
		public ColTypeContext colType() {
			return getRuleContext(ColTypeContext.class,0);
		}
		public PartitionColumnContext(PartitionFieldContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PartitionTransformContext extends PartitionFieldContext {
		public TransformContext transform() {
			return getRuleContext(TransformContext.class,0);
		}
		public PartitionTransformContext(PartitionFieldContext ctx) { copyFrom(ctx); }
	}

	public final PartitionFieldContext partitionField() throws RecognitionException {
		PartitionFieldContext _localctx = new PartitionFieldContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_partitionField);
		try {
			setState(3432);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				_localctx = new PartitionTransformContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3430);
				transform();
				}
				break;
			case 2:
				_localctx = new PartitionColumnContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3431);
				colType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransformContext extends ParserRuleContext {
		public TransformContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transform; }
	 
		public TransformContext() { }
		public void copyFrom(TransformContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IdentityTransformContext extends TransformContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public IdentityTransformContext(TransformContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ApplyTransformContext extends TransformContext {
		public IdentifierContext transformName;
		public TransformArgumentContext transformArgument;
		public List<TransformArgumentContext> argument = new ArrayList<TransformArgumentContext>();
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TransformArgumentContext> transformArgument() {
			return getRuleContexts(TransformArgumentContext.class);
		}
		public TransformArgumentContext transformArgument(int i) {
			return getRuleContext(TransformArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ApplyTransformContext(TransformContext ctx) { copyFrom(ctx); }
	}

	public final TransformContext transform() throws RecognitionException {
		TransformContext _localctx = new TransformContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_transform);
		int _la;
		try {
			setState(3447);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
			case 1:
				_localctx = new IdentityTransformContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3434);
				qualifiedName();
				}
				break;
			case 2:
				_localctx = new ApplyTransformContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3435);
				((ApplyTransformContext)_localctx).transformName = identifier();
				setState(3436);
				match(LEFT_PAREN);
				setState(3437);
				((ApplyTransformContext)_localctx).transformArgument = transformArgument();
				((ApplyTransformContext)_localctx).argument.add(((ApplyTransformContext)_localctx).transformArgument);
				setState(3442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3438);
					match(COMMA);
					setState(3439);
					((ApplyTransformContext)_localctx).transformArgument = transformArgument();
					((ApplyTransformContext)_localctx).argument.add(((ApplyTransformContext)_localctx).transformArgument);
					}
					}
					setState(3444);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3445);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransformArgumentContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TransformArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transformArgument; }
	}

	public final TransformArgumentContext transformArgument() throws RecognitionException {
		TransformArgumentContext _localctx = new TransformArgumentContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_transformArgument);
		try {
			setState(3451);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3449);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3450);
				constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionContext extends ParserRuleContext {
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3453);
			booleanExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NamedArgumentExpressionContext extends ParserRuleContext {
		public IdentifierContext key;
		public ExpressionContext value;
		public TerminalNode FAT_ARROW() { return getToken(SqlBaseParser.FAT_ARROW, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public NamedArgumentExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedArgumentExpression; }
	}

	public final NamedArgumentExpressionContext namedArgumentExpression() throws RecognitionException {
		NamedArgumentExpressionContext _localctx = new NamedArgumentExpressionContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_namedArgumentExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3455);
			((NamedArgumentExpressionContext)_localctx).key = identifier();
			setState(3456);
			match(FAT_ARROW);
			setState(3457);
			((NamedArgumentExpressionContext)_localctx).value = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionArgumentContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public NamedArgumentExpressionContext namedArgumentExpression() {
			return getRuleContext(NamedArgumentExpressionContext.class,0);
		}
		public FunctionArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgument; }
	}

	public final FunctionArgumentContext functionArgument() throws RecognitionException {
		FunctionArgumentContext _localctx = new FunctionArgumentContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_functionArgument);
		try {
			setState(3461);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3459);
				expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3460);
				namedArgumentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionSeqContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ExpressionSeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionSeq; }
	}

	public final ExpressionSeqContext expressionSeq() throws RecognitionException {
		ExpressionSeqContext _localctx = new ExpressionSeqContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_expressionSeq);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3463);
			expression();
			setState(3468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3464);
				match(COMMA);
				setState(3465);
				expression();
				}
				}
				setState(3470);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BooleanExpressionContext extends ParserRuleContext {
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanExpression; }
	 
		public BooleanExpressionContext() { }
		public void copyFrom(BooleanExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LogicalNotContext extends BooleanExpressionContext {
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode BANG() { return getToken(SqlBaseParser.BANG, 0); }
		public LogicalNotContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PredicatedContext extends BooleanExpressionContext {
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicatedContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ExistsContext extends BooleanExpressionContext {
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public ExistsContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LogicalBinaryContext extends BooleanExpressionContext {
		public BooleanExpressionContext left;
		public Token operator;
		public BooleanExpressionContext right;
		public List<BooleanExpressionContext> booleanExpression() {
			return getRuleContexts(BooleanExpressionContext.class);
		}
		public BooleanExpressionContext booleanExpression(int i) {
			return getRuleContext(BooleanExpressionContext.class,i);
		}
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public LogicalBinaryContext(BooleanExpressionContext ctx) { copyFrom(ctx); }
	}

	public final BooleanExpressionContext booleanExpression() throws RecognitionException {
		return booleanExpression(0);
	}

	private BooleanExpressionContext booleanExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BooleanExpressionContext _localctx = new BooleanExpressionContext(_ctx, _parentState);
		BooleanExpressionContext _prevctx = _localctx;
		int _startState = 328;
		enterRecursionRule(_localctx, 328, RULE_booleanExpression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3483);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
			case 1:
				{
				_localctx = new LogicalNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3472);
				_la = _input.LA(1);
				if ( !(_la==BANG || _la==NOT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3473);
				booleanExpression(5);
				}
				break;
			case 2:
				{
				_localctx = new ExistsContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3474);
				match(EXISTS);
				setState(3475);
				match(LEFT_PAREN);
				setState(3476);
				query();
				setState(3477);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				_localctx = new PredicatedContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3479);
				valueExpression(0);
				setState(3481);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
				case 1:
					{
					setState(3480);
					predicate();
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3493);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,442,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3491);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
					case 1:
						{
						_localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
						((LogicalBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						setState(3485);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3486);
						((LogicalBinaryContext)_localctx).operator = match(AND);
						setState(3487);
						((LogicalBinaryContext)_localctx).right = booleanExpression(3);
						}
						break;
					case 2:
						{
						_localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
						((LogicalBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
						setState(3488);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(3489);
						((LogicalBinaryContext)_localctx).operator = match(OR);
						setState(3490);
						((LogicalBinaryContext)_localctx).right = booleanExpression(2);
						}
						break;
					}
					} 
				}
				setState(3495);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,442,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredicateContext extends ParserRuleContext {
		public Token kind;
		public ValueExpressionContext lower;
		public ValueExpressionContext upper;
		public ValueExpressionContext pattern;
		public Token quantifier;
		public StringLitContext escapeChar;
		public ValueExpressionContext right;
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public TerminalNode BETWEEN() { return getToken(SqlBaseParser.BETWEEN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RLIKE() { return getToken(SqlBaseParser.RLIKE, 0); }
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public TerminalNode ILIKE() { return getToken(SqlBaseParser.ILIKE, 0); }
		public TerminalNode ANY() { return getToken(SqlBaseParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(SqlBaseParser.SOME, 0); }
		public TerminalNode ALL() { return getToken(SqlBaseParser.ALL, 0); }
		public TerminalNode ESCAPE() { return getToken(SqlBaseParser.ESCAPE, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode IS() { return getToken(SqlBaseParser.IS, 0); }
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public TerminalNode TRUE() { return getToken(SqlBaseParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(SqlBaseParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(SqlBaseParser.UNKNOWN, 0); }
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode DISTINCT() { return getToken(SqlBaseParser.DISTINCT, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_predicate);
		int _la;
		try {
			setState(3578);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3497);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BANG || _la==NOT) {
					{
					setState(3496);
					errorCapturingNot();
					}
				}

				setState(3499);
				((PredicateContext)_localctx).kind = match(BETWEEN);
				setState(3500);
				((PredicateContext)_localctx).lower = valueExpression(0);
				setState(3501);
				match(AND);
				setState(3502);
				((PredicateContext)_localctx).upper = valueExpression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3505);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BANG || _la==NOT) {
					{
					setState(3504);
					errorCapturingNot();
					}
				}

				setState(3507);
				((PredicateContext)_localctx).kind = match(IN);
				setState(3508);
				match(LEFT_PAREN);
				setState(3509);
				expression();
				setState(3514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3510);
					match(COMMA);
					setState(3511);
					expression();
					}
					}
					setState(3516);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3517);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BANG || _la==NOT) {
					{
					setState(3519);
					errorCapturingNot();
					}
				}

				setState(3522);
				((PredicateContext)_localctx).kind = match(IN);
				setState(3523);
				match(LEFT_PAREN);
				setState(3524);
				query();
				setState(3525);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3528);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BANG || _la==NOT) {
					{
					setState(3527);
					errorCapturingNot();
					}
				}

				setState(3530);
				((PredicateContext)_localctx).kind = match(RLIKE);
				setState(3531);
				((PredicateContext)_localctx).pattern = valueExpression(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3533);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BANG || _la==NOT) {
					{
					setState(3532);
					errorCapturingNot();
					}
				}

				setState(3535);
				((PredicateContext)_localctx).kind = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LIKE || _la==ILIKE) ) {
					((PredicateContext)_localctx).kind = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3536);
				((PredicateContext)_localctx).quantifier = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
					((PredicateContext)_localctx).quantifier = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3550);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
				case 1:
					{
					setState(3537);
					match(LEFT_PAREN);
					setState(3538);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(3539);
					match(LEFT_PAREN);
					setState(3540);
					expression();
					setState(3545);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3541);
						match(COMMA);
						setState(3542);
						expression();
						}
						}
						setState(3547);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3548);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3553);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BANG || _la==NOT) {
					{
					setState(3552);
					errorCapturingNot();
					}
				}

				setState(3555);
				((PredicateContext)_localctx).kind = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LIKE || _la==ILIKE) ) {
					((PredicateContext)_localctx).kind = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3556);
				((PredicateContext)_localctx).pattern = valueExpression(0);
				setState(3559);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
				case 1:
					{
					setState(3557);
					match(ESCAPE);
					setState(3558);
					((PredicateContext)_localctx).escapeChar = stringLit();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3561);
				match(IS);
				setState(3563);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BANG || _la==NOT) {
					{
					setState(3562);
					errorCapturingNot();
					}
				}

				setState(3565);
				((PredicateContext)_localctx).kind = match(NULL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3566);
				match(IS);
				setState(3568);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BANG || _la==NOT) {
					{
					setState(3567);
					errorCapturingNot();
					}
				}

				setState(3570);
				((PredicateContext)_localctx).kind = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((PredicateContext)_localctx).kind = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3571);
				match(IS);
				setState(3573);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BANG || _la==NOT) {
					{
					setState(3572);
					errorCapturingNot();
					}
				}

				setState(3575);
				((PredicateContext)_localctx).kind = match(DISTINCT);
				setState(3576);
				match(FROM);
				setState(3577);
				((PredicateContext)_localctx).right = valueExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ErrorCapturingNotContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode BANG() { return getToken(SqlBaseParser.BANG, 0); }
		public ErrorCapturingNotContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_errorCapturingNot; }
	}

	public final ErrorCapturingNotContext errorCapturingNot() throws RecognitionException {
		ErrorCapturingNotContext _localctx = new ErrorCapturingNotContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_errorCapturingNot);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3580);
			_la = _input.LA(1);
			if ( !(_la==BANG || _la==NOT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueExpressionContext extends ParserRuleContext {
		public ValueExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueExpression; }
	 
		public ValueExpressionContext() { }
		public void copyFrom(ValueExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ValueExpressionDefaultContext extends ValueExpressionContext {
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public ValueExpressionDefaultContext(ValueExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ComparisonContext extends ValueExpressionContext {
		public ValueExpressionContext left;
		public ValueExpressionContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public ComparisonContext(ValueExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ShiftExpressionContext extends ValueExpressionContext {
		public ValueExpressionContext left;
		public ValueExpressionContext right;
		public ShiftOperatorContext shiftOperator() {
			return getRuleContext(ShiftOperatorContext.class,0);
		}
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public ShiftExpressionContext(ValueExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ArithmeticBinaryContext extends ValueExpressionContext {
		public ValueExpressionContext left;
		public Token operator;
		public ValueExpressionContext right;
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode ASTERISK() { return getToken(SqlBaseParser.ASTERISK, 0); }
		public TerminalNode SLASH() { return getToken(SqlBaseParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(SqlBaseParser.PERCENT, 0); }
		public TerminalNode DIV() { return getToken(SqlBaseParser.DIV, 0); }
		public TerminalNode PLUS() { return getToken(SqlBaseParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public TerminalNode CONCAT_PIPE() { return getToken(SqlBaseParser.CONCAT_PIPE, 0); }
		public TerminalNode AMPERSAND() { return getToken(SqlBaseParser.AMPERSAND, 0); }
		public TerminalNode HAT() { return getToken(SqlBaseParser.HAT, 0); }
		public TerminalNode PIPE() { return getToken(SqlBaseParser.PIPE, 0); }
		public ArithmeticBinaryContext(ValueExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ArithmeticUnaryContext extends ValueExpressionContext {
		public Token operator;
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public TerminalNode PLUS() { return getToken(SqlBaseParser.PLUS, 0); }
		public TerminalNode TILDE() { return getToken(SqlBaseParser.TILDE, 0); }
		public ArithmeticUnaryContext(ValueExpressionContext ctx) { copyFrom(ctx); }
	}

	public final ValueExpressionContext valueExpression() throws RecognitionException {
		return valueExpression(0);
	}

	private ValueExpressionContext valueExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ValueExpressionContext _localctx = new ValueExpressionContext(_ctx, _parentState);
		ValueExpressionContext _prevctx = _localctx;
		int _startState = 334;
		enterRecursionRule(_localctx, 334, RULE_valueExpression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3586);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
			case 1:
				{
				_localctx = new ValueExpressionDefaultContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3583);
				primaryExpression(0);
				}
				break;
			case 2:
				{
				_localctx = new ArithmeticUnaryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3584);
				((ArithmeticUnaryContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & 35L) != 0)) ) {
					((ArithmeticUnaryContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3585);
				valueExpression(8);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3613);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,459,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3611);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
					case 1:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3588);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(3589);
						((ArithmeticBinaryContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DIV || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & 7L) != 0)) ) {
							((ArithmeticBinaryContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3590);
						((ArithmeticBinaryContext)_localctx).right = valueExpression(8);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3591);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(3592);
						((ArithmeticBinaryContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & 259L) != 0)) ) {
							((ArithmeticBinaryContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3593);
						((ArithmeticBinaryContext)_localctx).right = valueExpression(7);
						}
						break;
					case 3:
						{
						_localctx = new ShiftExpressionContext(new ValueExpressionContext(_parentctx, _parentState));
						((ShiftExpressionContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3594);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(3595);
						shiftOperator();
						setState(3596);
						((ShiftExpressionContext)_localctx).right = valueExpression(6);
						}
						break;
					case 4:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3598);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(3599);
						((ArithmeticBinaryContext)_localctx).operator = match(AMPERSAND);
						setState(3600);
						((ArithmeticBinaryContext)_localctx).right = valueExpression(5);
						}
						break;
					case 5:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3601);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3602);
						((ArithmeticBinaryContext)_localctx).operator = match(HAT);
						setState(3603);
						((ArithmeticBinaryContext)_localctx).right = valueExpression(4);
						}
						break;
					case 6:
						{
						_localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
						((ArithmeticBinaryContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3604);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3605);
						((ArithmeticBinaryContext)_localctx).operator = match(PIPE);
						setState(3606);
						((ArithmeticBinaryContext)_localctx).right = valueExpression(3);
						}
						break;
					case 7:
						{
						_localctx = new ComparisonContext(new ValueExpressionContext(_parentctx, _parentState));
						((ComparisonContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
						setState(3607);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(3608);
						comparisonOperator();
						setState(3609);
						((ComparisonContext)_localctx).right = valueExpression(2);
						}
						break;
					}
					} 
				}
				setState(3615);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,459,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShiftOperatorContext extends ParserRuleContext {
		public TerminalNode SHIFT_LEFT() { return getToken(SqlBaseParser.SHIFT_LEFT, 0); }
		public TerminalNode SHIFT_RIGHT() { return getToken(SqlBaseParser.SHIFT_RIGHT, 0); }
		public TerminalNode SHIFT_RIGHT_UNSIGNED() { return getToken(SqlBaseParser.SHIFT_RIGHT_UNSIGNED, 0); }
		public ShiftOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shiftOperator; }
	}

	public final ShiftOperatorContext shiftOperator() throws RecognitionException {
		ShiftOperatorContext _localctx = new ShiftOperatorContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_shiftOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3616);
			_la = _input.LA(1);
			if ( !(((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & 7L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatetimeUnitContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(SqlBaseParser.YEAR, 0); }
		public TerminalNode QUARTER() { return getToken(SqlBaseParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(SqlBaseParser.MONTH, 0); }
		public TerminalNode WEEK() { return getToken(SqlBaseParser.WEEK, 0); }
		public TerminalNode DAY() { return getToken(SqlBaseParser.DAY, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(SqlBaseParser.DAYOFYEAR, 0); }
		public TerminalNode HOUR() { return getToken(SqlBaseParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(SqlBaseParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(SqlBaseParser.SECOND, 0); }
		public TerminalNode MILLISECOND() { return getToken(SqlBaseParser.MILLISECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(SqlBaseParser.MICROSECOND, 0); }
		public DatetimeUnitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeUnit; }
	}

	public final DatetimeUnitContext datetimeUnit() throws RecognitionException {
		DatetimeUnitContext _localctx = new DatetimeUnitContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_datetimeUnit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3618);
			_la = _input.LA(1);
			if ( !(_la==DAY || _la==DAYOFYEAR || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & 2684145377912815617L) != 0) || _la==QUARTER || _la==SECOND || _la==WEEK || _la==YEAR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrimaryExpressionContext extends ParserRuleContext {
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primaryExpression; }
	 
		public PrimaryExpressionContext() { }
		public void copyFrom(PrimaryExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class StructContext extends PrimaryExpressionContext {
		public NamedExpressionContext namedExpression;
		public List<NamedExpressionContext> argument = new ArrayList<NamedExpressionContext>();
		public TerminalNode STRUCT() { return getToken(SqlBaseParser.STRUCT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<NamedExpressionContext> namedExpression() {
			return getRuleContexts(NamedExpressionContext.class);
		}
		public NamedExpressionContext namedExpression(int i) {
			return getRuleContext(NamedExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public StructContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DereferenceContext extends PrimaryExpressionContext {
		public PrimaryExpressionContext base;
		public IdentifierContext fieldName;
		public TerminalNode DOT() { return getToken(SqlBaseParser.DOT, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DereferenceContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CastByColonContext extends PrimaryExpressionContext {
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public TerminalNode DOUBLE_COLON() { return getToken(SqlBaseParser.DOUBLE_COLON, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CastByColonContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TimestampaddContext extends PrimaryExpressionContext {
		public Token name;
		public DatetimeUnitContext unit;
		public StringLitContext invalidUnit;
		public ValueExpressionContext unitsAmount;
		public ValueExpressionContext timestamp;
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode TIMESTAMPADD() { return getToken(SqlBaseParser.TIMESTAMPADD, 0); }
		public TerminalNode DATEADD() { return getToken(SqlBaseParser.DATEADD, 0); }
		public TerminalNode DATE_ADD() { return getToken(SqlBaseParser.DATE_ADD, 0); }
		public DatetimeUnitContext datetimeUnit() {
			return getRuleContext(DatetimeUnitContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TimestampaddContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SubstringContext extends PrimaryExpressionContext {
		public ValueExpressionContext str;
		public ValueExpressionContext pos;
		public ValueExpressionContext len;
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode SUBSTR() { return getToken(SqlBaseParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(SqlBaseParser.SUBSTRING, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public SubstringContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CastContext extends PrimaryExpressionContext {
		public Token name;
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode CAST() { return getToken(SqlBaseParser.CAST, 0); }
		public TerminalNode TRY_CAST() { return getToken(SqlBaseParser.TRY_CAST, 0); }
		public CastContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LambdaContext extends PrimaryExpressionContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode ARROW() { return getToken(SqlBaseParser.ARROW, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public LambdaContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ParenthesizedExpressionContext extends PrimaryExpressionContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public ParenthesizedExpressionContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class Any_valueContext extends PrimaryExpressionContext {
		public TerminalNode ANY_VALUE() { return getToken(SqlBaseParser.ANY_VALUE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode IGNORE() { return getToken(SqlBaseParser.IGNORE, 0); }
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public Any_valueContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TrimContext extends PrimaryExpressionContext {
		public Token trimOption;
		public ValueExpressionContext trimStr;
		public ValueExpressionContext srcStr;
		public TerminalNode TRIM() { return getToken(SqlBaseParser.TRIM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode BOTH() { return getToken(SqlBaseParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(SqlBaseParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(SqlBaseParser.TRAILING, 0); }
		public TrimContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SimpleCaseContext extends PrimaryExpressionContext {
		public ExpressionContext value;
		public ExpressionContext elseExpression;
		public TerminalNode CASE() { return getToken(SqlBaseParser.CASE, 0); }
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<WhenClauseContext> whenClause() {
			return getRuleContexts(WhenClauseContext.class);
		}
		public WhenClauseContext whenClause(int i) {
			return getRuleContext(WhenClauseContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(SqlBaseParser.ELSE, 0); }
		public SimpleCaseContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CurrentLikeContext extends PrimaryExpressionContext {
		public Token name;
		public TerminalNode CURRENT_DATE() { return getToken(SqlBaseParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(SqlBaseParser.CURRENT_USER, 0); }
		public TerminalNode USER() { return getToken(SqlBaseParser.USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(SqlBaseParser.SESSION_USER, 0); }
		public CurrentLikeContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ColumnReferenceContext extends PrimaryExpressionContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColumnReferenceContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RowConstructorContext extends PrimaryExpressionContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<NamedExpressionContext> namedExpression() {
			return getRuleContexts(NamedExpressionContext.class);
		}
		public NamedExpressionContext namedExpression(int i) {
			return getRuleContext(NamedExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public RowConstructorContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LastContext extends PrimaryExpressionContext {
		public TerminalNode LAST() { return getToken(SqlBaseParser.LAST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode IGNORE() { return getToken(SqlBaseParser.IGNORE, 0); }
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public LastContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class StarContext extends PrimaryExpressionContext {
		public TerminalNode ASTERISK() { return getToken(SqlBaseParser.ASTERISK, 0); }
		public ExceptClauseContext exceptClause() {
			return getRuleContext(ExceptClauseContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(SqlBaseParser.DOT, 0); }
		public StarContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class OverlayContext extends PrimaryExpressionContext {
		public ValueExpressionContext input;
		public ValueExpressionContext replace;
		public ValueExpressionContext position;
		public ValueExpressionContext length;
		public TerminalNode OVERLAY() { return getToken(SqlBaseParser.OVERLAY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode PLACING() { return getToken(SqlBaseParser.PLACING, 0); }
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public OverlayContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SubscriptContext extends PrimaryExpressionContext {
		public PrimaryExpressionContext value;
		public ValueExpressionContext index;
		public TerminalNode LEFT_BRACKET() { return getToken(SqlBaseParser.LEFT_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(SqlBaseParser.RIGHT_BRACKET, 0); }
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public SubscriptContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TimestampdiffContext extends PrimaryExpressionContext {
		public Token name;
		public DatetimeUnitContext unit;
		public StringLitContext invalidUnit;
		public ValueExpressionContext startTimestamp;
		public ValueExpressionContext endTimestamp;
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public TerminalNode TIMESTAMPDIFF() { return getToken(SqlBaseParser.TIMESTAMPDIFF, 0); }
		public TerminalNode DATEDIFF() { return getToken(SqlBaseParser.DATEDIFF, 0); }
		public TerminalNode DATE_DIFF() { return getToken(SqlBaseParser.DATE_DIFF, 0); }
		public TerminalNode TIMEDIFF() { return getToken(SqlBaseParser.TIMEDIFF, 0); }
		public DatetimeUnitContext datetimeUnit() {
			return getRuleContext(DatetimeUnitContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TimestampdiffContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SubqueryExpressionContext extends PrimaryExpressionContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public QueryContext query() {
			return getRuleContext(QueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public SubqueryExpressionContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class CollateContext extends PrimaryExpressionContext {
		public PrimaryExpressionContext primaryExpression() {
			return getRuleContext(PrimaryExpressionContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public CollateContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ConstantDefaultContext extends PrimaryExpressionContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ConstantDefaultContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ExtractContext extends PrimaryExpressionContext {
		public IdentifierContext field;
		public ValueExpressionContext source;
		public TerminalNode EXTRACT() { return getToken(SqlBaseParser.EXTRACT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ValueExpressionContext valueExpression() {
			return getRuleContext(ValueExpressionContext.class,0);
		}
		public ExtractContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FunctionCallContext extends PrimaryExpressionContext {
		public FunctionArgumentContext functionArgument;
		public List<FunctionArgumentContext> argument = new ArrayList<FunctionArgumentContext>();
		public BooleanExpressionContext where;
		public Token nullsOption;
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SqlBaseParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SqlBaseParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SqlBaseParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SqlBaseParser.RIGHT_PAREN, i);
		}
		public TerminalNode WITHIN() { return getToken(SqlBaseParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(SqlBaseParser.GROUP, 0); }
		public TerminalNode ORDER() { return getToken(SqlBaseParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public List<SortItemContext> sortItem() {
			return getRuleContexts(SortItemContext.class);
		}
		public SortItemContext sortItem(int i) {
			return getRuleContext(SortItemContext.class,i);
		}
		public TerminalNode FILTER() { return getToken(SqlBaseParser.FILTER, 0); }
		public TerminalNode WHERE() { return getToken(SqlBaseParser.WHERE, 0); }
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public TerminalNode OVER() { return getToken(SqlBaseParser.OVER, 0); }
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public List<FunctionArgumentContext> functionArgument() {
			return getRuleContexts(FunctionArgumentContext.class);
		}
		public FunctionArgumentContext functionArgument(int i) {
			return getRuleContext(FunctionArgumentContext.class,i);
		}
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(SqlBaseParser.IGNORE, 0); }
		public TerminalNode RESPECT() { return getToken(SqlBaseParser.RESPECT, 0); }
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public FunctionCallContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SearchedCaseContext extends PrimaryExpressionContext {
		public ExpressionContext elseExpression;
		public TerminalNode CASE() { return getToken(SqlBaseParser.CASE, 0); }
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public List<WhenClauseContext> whenClause() {
			return getRuleContexts(WhenClauseContext.class);
		}
		public WhenClauseContext whenClause(int i) {
			return getRuleContext(WhenClauseContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(SqlBaseParser.ELSE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SearchedCaseContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PositionContext extends PrimaryExpressionContext {
		public ValueExpressionContext substr;
		public ValueExpressionContext str;
		public TerminalNode POSITION() { return getToken(SqlBaseParser.POSITION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<ValueExpressionContext> valueExpression() {
			return getRuleContexts(ValueExpressionContext.class);
		}
		public ValueExpressionContext valueExpression(int i) {
			return getRuleContext(ValueExpressionContext.class,i);
		}
		public PositionContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FirstContext extends PrimaryExpressionContext {
		public TerminalNode FIRST() { return getToken(SqlBaseParser.FIRST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode IGNORE() { return getToken(SqlBaseParser.IGNORE, 0); }
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public FirstContext(PrimaryExpressionContext ctx) { copyFrom(ctx); }
	}

	public final PrimaryExpressionContext primaryExpression() throws RecognitionException {
		return primaryExpression(0);
	}

	private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);
		PrimaryExpressionContext _prevctx = _localctx;
		int _startState = 340;
		enterRecursionRule(_localctx, 340, RULE_primaryExpression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3863);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				{
				_localctx = new CurrentLikeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3621);
				((CurrentLikeContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 13L) != 0) || _la==SESSION_USER || _la==USER) ) {
					((CurrentLikeContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				{
				_localctx = new TimestampaddContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3622);
				((TimestampaddContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATEADD || _la==DATE_ADD || _la==TIMESTAMPADD) ) {
					((TimestampaddContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3623);
				match(LEFT_PAREN);
				setState(3626);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
				case 1:
					{
					setState(3624);
					((TimestampaddContext)_localctx).unit = datetimeUnit();
					}
					break;
				case 2:
					{
					setState(3625);
					((TimestampaddContext)_localctx).invalidUnit = stringLit();
					}
					break;
				}
				setState(3628);
				match(COMMA);
				setState(3629);
				((TimestampaddContext)_localctx).unitsAmount = valueExpression(0);
				setState(3630);
				match(COMMA);
				setState(3631);
				((TimestampaddContext)_localctx).timestamp = valueExpression(0);
				setState(3632);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				_localctx = new TimestampdiffContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3634);
				((TimestampdiffContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATEDIFF || _la==DATE_DIFF || _la==TIMEDIFF || _la==TIMESTAMPDIFF) ) {
					((TimestampdiffContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3635);
				match(LEFT_PAREN);
				setState(3638);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
				case 1:
					{
					setState(3636);
					((TimestampdiffContext)_localctx).unit = datetimeUnit();
					}
					break;
				case 2:
					{
					setState(3637);
					((TimestampdiffContext)_localctx).invalidUnit = stringLit();
					}
					break;
				}
				setState(3640);
				match(COMMA);
				setState(3641);
				((TimestampdiffContext)_localctx).startTimestamp = valueExpression(0);
				setState(3642);
				match(COMMA);
				setState(3643);
				((TimestampdiffContext)_localctx).endTimestamp = valueExpression(0);
				setState(3644);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				_localctx = new SearchedCaseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3646);
				match(CASE);
				setState(3648); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3647);
					whenClause();
					}
					}
					setState(3650); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(3654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(3652);
					match(ELSE);
					setState(3653);
					((SearchedCaseContext)_localctx).elseExpression = expression();
					}
				}

				setState(3656);
				match(END);
				}
				break;
			case 5:
				{
				_localctx = new SimpleCaseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3658);
				match(CASE);
				setState(3659);
				((SimpleCaseContext)_localctx).value = expression();
				setState(3661); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3660);
					whenClause();
					}
					}
					setState(3663); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(3667);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(3665);
					match(ELSE);
					setState(3666);
					((SimpleCaseContext)_localctx).elseExpression = expression();
					}
				}

				setState(3669);
				match(END);
				}
				break;
			case 6:
				{
				_localctx = new CastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3671);
				((CastContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CAST || _la==TRY_CAST) ) {
					((CastContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3672);
				match(LEFT_PAREN);
				setState(3673);
				expression();
				setState(3674);
				match(AS);
				setState(3675);
				dataType();
				setState(3676);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				{
				_localctx = new StructContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3678);
				match(STRUCT);
				setState(3679);
				match(LEFT_PAREN);
				setState(3688);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
				case 1:
					{
					setState(3680);
					((StructContext)_localctx).namedExpression = namedExpression();
					((StructContext)_localctx).argument.add(((StructContext)_localctx).namedExpression);
					setState(3685);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3681);
						match(COMMA);
						setState(3682);
						((StructContext)_localctx).namedExpression = namedExpression();
						((StructContext)_localctx).argument.add(((StructContext)_localctx).namedExpression);
						}
						}
						setState(3687);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(3690);
				match(RIGHT_PAREN);
				}
				break;
			case 8:
				{
				_localctx = new FirstContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3691);
				match(FIRST);
				setState(3692);
				match(LEFT_PAREN);
				setState(3693);
				expression();
				setState(3696);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(3694);
					match(IGNORE);
					setState(3695);
					match(NULLS);
					}
				}

				setState(3698);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				{
				_localctx = new Any_valueContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3700);
				match(ANY_VALUE);
				setState(3701);
				match(LEFT_PAREN);
				setState(3702);
				expression();
				setState(3705);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(3703);
					match(IGNORE);
					setState(3704);
					match(NULLS);
					}
				}

				setState(3707);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				{
				_localctx = new LastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3709);
				match(LAST);
				setState(3710);
				match(LEFT_PAREN);
				setState(3711);
				expression();
				setState(3714);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(3712);
					match(IGNORE);
					setState(3713);
					match(NULLS);
					}
				}

				setState(3716);
				match(RIGHT_PAREN);
				}
				break;
			case 11:
				{
				_localctx = new PositionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3718);
				match(POSITION);
				setState(3719);
				match(LEFT_PAREN);
				setState(3720);
				((PositionContext)_localctx).substr = valueExpression(0);
				setState(3721);
				match(IN);
				setState(3722);
				((PositionContext)_localctx).str = valueExpression(0);
				setState(3723);
				match(RIGHT_PAREN);
				}
				break;
			case 12:
				{
				_localctx = new ConstantDefaultContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3725);
				constant();
				}
				break;
			case 13:
				{
				_localctx = new StarContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3726);
				match(ASTERISK);
				setState(3728);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
				case 1:
					{
					setState(3727);
					exceptClause();
					}
					break;
				}
				}
				break;
			case 14:
				{
				_localctx = new StarContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3730);
				qualifiedName();
				setState(3731);
				match(DOT);
				setState(3732);
				match(ASTERISK);
				setState(3734);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
				case 1:
					{
					setState(3733);
					exceptClause();
					}
					break;
				}
				}
				break;
			case 15:
				{
				_localctx = new RowConstructorContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3736);
				match(LEFT_PAREN);
				setState(3737);
				namedExpression();
				setState(3740); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3738);
					match(COMMA);
					setState(3739);
					namedExpression();
					}
					}
					setState(3742); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(3744);
				match(RIGHT_PAREN);
				}
				break;
			case 16:
				{
				_localctx = new SubqueryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3746);
				match(LEFT_PAREN);
				setState(3747);
				query();
				setState(3748);
				match(RIGHT_PAREN);
				}
				break;
			case 17:
				{
				_localctx = new FunctionCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3750);
				functionName();
				setState(3751);
				match(LEFT_PAREN);
				setState(3763);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
				case 1:
					{
					setState(3753);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
					case 1:
						{
						setState(3752);
						setQuantifier();
						}
						break;
					}
					setState(3755);
					((FunctionCallContext)_localctx).functionArgument = functionArgument();
					((FunctionCallContext)_localctx).argument.add(((FunctionCallContext)_localctx).functionArgument);
					setState(3760);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3756);
						match(COMMA);
						setState(3757);
						((FunctionCallContext)_localctx).functionArgument = functionArgument();
						((FunctionCallContext)_localctx).argument.add(((FunctionCallContext)_localctx).functionArgument);
						}
						}
						setState(3762);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(3765);
				match(RIGHT_PAREN);
				setState(3781);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
				case 1:
					{
					setState(3766);
					match(WITHIN);
					setState(3767);
					match(GROUP);
					setState(3768);
					match(LEFT_PAREN);
					setState(3769);
					match(ORDER);
					setState(3770);
					match(BY);
					setState(3771);
					sortItem();
					setState(3776);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3772);
						match(COMMA);
						setState(3773);
						sortItem();
						}
						}
						setState(3778);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3779);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3789);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
				case 1:
					{
					setState(3783);
					match(FILTER);
					setState(3784);
					match(LEFT_PAREN);
					setState(3785);
					match(WHERE);
					setState(3786);
					((FunctionCallContext)_localctx).where = booleanExpression(0);
					setState(3787);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3793);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
				case 1:
					{
					setState(3791);
					((FunctionCallContext)_localctx).nullsOption = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==IGNORE || _la==RESPECT) ) {
						((FunctionCallContext)_localctx).nullsOption = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3792);
					match(NULLS);
					}
					break;
				}
				setState(3797);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
				case 1:
					{
					setState(3795);
					match(OVER);
					setState(3796);
					windowSpec();
					}
					break;
				}
				}
				break;
			case 18:
				{
				_localctx = new LambdaContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3799);
				identifier();
				setState(3800);
				match(ARROW);
				setState(3801);
				expression();
				}
				break;
			case 19:
				{
				_localctx = new LambdaContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3803);
				match(LEFT_PAREN);
				setState(3804);
				identifier();
				setState(3807); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3805);
					match(COMMA);
					setState(3806);
					identifier();
					}
					}
					setState(3809); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(3811);
				match(RIGHT_PAREN);
				setState(3812);
				match(ARROW);
				setState(3813);
				expression();
				}
				break;
			case 20:
				{
				_localctx = new ColumnReferenceContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3815);
				identifier();
				}
				break;
			case 21:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3816);
				match(LEFT_PAREN);
				setState(3817);
				expression();
				setState(3818);
				match(RIGHT_PAREN);
				}
				break;
			case 22:
				{
				_localctx = new ExtractContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3820);
				match(EXTRACT);
				setState(3821);
				match(LEFT_PAREN);
				setState(3822);
				((ExtractContext)_localctx).field = identifier();
				setState(3823);
				match(FROM);
				setState(3824);
				((ExtractContext)_localctx).source = valueExpression(0);
				setState(3825);
				match(RIGHT_PAREN);
				}
				break;
			case 23:
				{
				_localctx = new SubstringContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3827);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3828);
				match(LEFT_PAREN);
				setState(3829);
				((SubstringContext)_localctx).str = valueExpression(0);
				setState(3830);
				_la = _input.LA(1);
				if ( !(_la==COMMA || _la==FROM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3831);
				((SubstringContext)_localctx).pos = valueExpression(0);
				setState(3834);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA || _la==FOR) {
					{
					setState(3832);
					_la = _input.LA(1);
					if ( !(_la==COMMA || _la==FOR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3833);
					((SubstringContext)_localctx).len = valueExpression(0);
					}
				}

				setState(3836);
				match(RIGHT_PAREN);
				}
				break;
			case 24:
				{
				_localctx = new TrimContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3838);
				match(TRIM);
				setState(3839);
				match(LEFT_PAREN);
				setState(3841);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
				case 1:
					{
					setState(3840);
					((TrimContext)_localctx).trimOption = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						((TrimContext)_localctx).trimOption = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3844);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
				case 1:
					{
					setState(3843);
					((TrimContext)_localctx).trimStr = valueExpression(0);
					}
					break;
				}
				setState(3846);
				match(FROM);
				setState(3847);
				((TrimContext)_localctx).srcStr = valueExpression(0);
				setState(3848);
				match(RIGHT_PAREN);
				}
				break;
			case 25:
				{
				_localctx = new OverlayContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3850);
				match(OVERLAY);
				setState(3851);
				match(LEFT_PAREN);
				setState(3852);
				((OverlayContext)_localctx).input = valueExpression(0);
				setState(3853);
				match(PLACING);
				setState(3854);
				((OverlayContext)_localctx).replace = valueExpression(0);
				setState(3855);
				match(FROM);
				setState(3856);
				((OverlayContext)_localctx).position = valueExpression(0);
				setState(3859);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3857);
					match(FOR);
					setState(3858);
					((OverlayContext)_localctx).length = valueExpression(0);
					}
				}

				setState(3861);
				match(RIGHT_PAREN);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3880);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,489,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3878);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
					case 1:
						{
						_localctx = new CollateContext(new PrimaryExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						setState(3865);
						if (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, "precpred(_ctx, 23)");
						setState(3866);
						collateClause();
						}
						break;
					case 2:
						{
						_localctx = new CastByColonContext(new PrimaryExpressionContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						setState(3867);
						if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
						setState(3868);
						match(DOUBLE_COLON);
						setState(3869);
						dataType();
						}
						break;
					case 3:
						{
						_localctx = new SubscriptContext(new PrimaryExpressionContext(_parentctx, _parentState));
						((SubscriptContext)_localctx).value = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						setState(3870);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(3871);
						match(LEFT_BRACKET);
						setState(3872);
						((SubscriptContext)_localctx).index = valueExpression(0);
						setState(3873);
						match(RIGHT_BRACKET);
						}
						break;
					case 4:
						{
						_localctx = new DereferenceContext(new PrimaryExpressionContext(_parentctx, _parentState));
						((DereferenceContext)_localctx).base = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
						setState(3875);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(3876);
						match(DOT);
						setState(3877);
						((DereferenceContext)_localctx).fieldName = identifier();
						}
						break;
					}
					} 
				}
				setState(3882);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,489,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LiteralTypeContext extends ParserRuleContext {
		public IdentifierContext unsupportedType;
		public TerminalNode DATE() { return getToken(SqlBaseParser.DATE, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SqlBaseParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ() { return getToken(SqlBaseParser.TIMESTAMP_LTZ, 0); }
		public TerminalNode TIMESTAMP_NTZ() { return getToken(SqlBaseParser.TIMESTAMP_NTZ, 0); }
		public TerminalNode INTERVAL() { return getToken(SqlBaseParser.INTERVAL, 0); }
		public TerminalNode BINARY_HEX() { return getToken(SqlBaseParser.BINARY_HEX, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LiteralTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literalType; }
	}

	public final LiteralTypeContext literalType() throws RecognitionException {
		LiteralTypeContext _localctx = new LiteralTypeContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_literalType);
		try {
			setState(3890);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3883);
				match(DATE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3884);
				match(TIMESTAMP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3885);
				match(TIMESTAMP_LTZ);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3886);
				match(TIMESTAMP_NTZ);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3887);
				match(INTERVAL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3888);
				match(BINARY_HEX);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3889);
				((LiteralTypeContext)_localctx).unsupportedType = identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConstantContext extends ParserRuleContext {
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
	 
		public ConstantContext() { }
		public void copyFrom(ConstantContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class NullLiteralContext extends ConstantContext {
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public NullLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class StringLiteralContext extends ConstantContext {
		public List<StringLitContext> stringLit() {
			return getRuleContexts(StringLitContext.class);
		}
		public StringLitContext stringLit(int i) {
			return getRuleContext(StringLitContext.class,i);
		}
		public StringLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TypeConstructorContext extends ConstantContext {
		public LiteralTypeContext literalType() {
			return getRuleContext(LiteralTypeContext.class,0);
		}
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TypeConstructorContext(ConstantContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PosParameterLiteralContext extends ConstantContext {
		public TerminalNode QUESTION() { return getToken(SqlBaseParser.QUESTION, 0); }
		public PosParameterLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class NamedParameterLiteralContext extends ConstantContext {
		public TerminalNode COLON() { return getToken(SqlBaseParser.COLON, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NamedParameterLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IntervalLiteralContext extends ConstantContext {
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public IntervalLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class NumericLiteralContext extends ConstantContext {
		public NumberContext number() {
			return getRuleContext(NumberContext.class,0);
		}
		public NumericLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class BooleanLiteralContext extends ConstantContext {
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public BooleanLiteralContext(ConstantContext ctx) { copyFrom(ctx); }
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_constant);
		try {
			int _alt;
			setState(3907);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
			case 1:
				_localctx = new NullLiteralContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3892);
				match(NULL);
				}
				break;
			case 2:
				_localctx = new PosParameterLiteralContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3893);
				match(QUESTION);
				}
				break;
			case 3:
				_localctx = new NamedParameterLiteralContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3894);
				match(COLON);
				setState(3895);
				identifier();
				}
				break;
			case 4:
				_localctx = new IntervalLiteralContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3896);
				interval();
				}
				break;
			case 5:
				_localctx = new TypeConstructorContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3897);
				literalType();
				setState(3898);
				stringLit();
				}
				break;
			case 6:
				_localctx = new NumericLiteralContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3900);
				number();
				}
				break;
			case 7:
				_localctx = new BooleanLiteralContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(3901);
				booleanValue();
				}
				break;
			case 8:
				_localctx = new StringLiteralContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(3903); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3902);
						stringLit();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3905); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,491,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public TerminalNode NEQ() { return getToken(SqlBaseParser.NEQ, 0); }
		public TerminalNode NEQJ() { return getToken(SqlBaseParser.NEQJ, 0); }
		public TerminalNode LT() { return getToken(SqlBaseParser.LT, 0); }
		public TerminalNode LTE() { return getToken(SqlBaseParser.LTE, 0); }
		public TerminalNode GT() { return getToken(SqlBaseParser.GT, 0); }
		public TerminalNode GTE() { return getToken(SqlBaseParser.GTE, 0); }
		public TerminalNode NSEQ() { return getToken(SqlBaseParser.NSEQ, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3909);
			_la = _input.LA(1);
			if ( !(((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & 255L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArithmeticOperatorContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(SqlBaseParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public TerminalNode ASTERISK() { return getToken(SqlBaseParser.ASTERISK, 0); }
		public TerminalNode SLASH() { return getToken(SqlBaseParser.SLASH, 0); }
		public TerminalNode PERCENT() { return getToken(SqlBaseParser.PERCENT, 0); }
		public TerminalNode DIV() { return getToken(SqlBaseParser.DIV, 0); }
		public TerminalNode TILDE() { return getToken(SqlBaseParser.TILDE, 0); }
		public TerminalNode AMPERSAND() { return getToken(SqlBaseParser.AMPERSAND, 0); }
		public TerminalNode PIPE() { return getToken(SqlBaseParser.PIPE, 0); }
		public TerminalNode CONCAT_PIPE() { return getToken(SqlBaseParser.CONCAT_PIPE, 0); }
		public TerminalNode HAT() { return getToken(SqlBaseParser.HAT, 0); }
		public ArithmeticOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arithmeticOperator; }
	}

	public final ArithmeticOperatorContext arithmeticOperator() throws RecognitionException {
		ArithmeticOperatorContext _localctx = new ArithmeticOperatorContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_arithmeticOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3911);
			_la = _input.LA(1);
			if ( !(_la==DIV || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & 1535L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredicateOperatorContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public PredicateOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicateOperator; }
	}

	public final PredicateOperatorContext predicateOperator() throws RecognitionException {
		PredicateOperatorContext _localctx = new PredicateOperatorContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_predicateOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3913);
			_la = _input.LA(1);
			if ( !(_la==AND || _la==IN || _la==NOT || _la==OR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BooleanValueContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(SqlBaseParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(SqlBaseParser.FALSE, 0); }
		public BooleanValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanValue; }
	}

	public final BooleanValueContext booleanValue() throws RecognitionException {
		BooleanValueContext _localctx = new BooleanValueContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_booleanValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3915);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IntervalContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(SqlBaseParser.INTERVAL, 0); }
		public ErrorCapturingMultiUnitsIntervalContext errorCapturingMultiUnitsInterval() {
			return getRuleContext(ErrorCapturingMultiUnitsIntervalContext.class,0);
		}
		public ErrorCapturingUnitToUnitIntervalContext errorCapturingUnitToUnitInterval() {
			return getRuleContext(ErrorCapturingUnitToUnitIntervalContext.class,0);
		}
		public IntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval; }
	}

	public final IntervalContext interval() throws RecognitionException {
		IntervalContext _localctx = new IntervalContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_interval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3917);
			match(INTERVAL);
			setState(3920);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
			case 1:
				{
				setState(3918);
				errorCapturingMultiUnitsInterval();
				}
				break;
			case 2:
				{
				setState(3919);
				errorCapturingUnitToUnitInterval();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ErrorCapturingMultiUnitsIntervalContext extends ParserRuleContext {
		public MultiUnitsIntervalContext body;
		public MultiUnitsIntervalContext multiUnitsInterval() {
			return getRuleContext(MultiUnitsIntervalContext.class,0);
		}
		public UnitToUnitIntervalContext unitToUnitInterval() {
			return getRuleContext(UnitToUnitIntervalContext.class,0);
		}
		public ErrorCapturingMultiUnitsIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_errorCapturingMultiUnitsInterval; }
	}

	public final ErrorCapturingMultiUnitsIntervalContext errorCapturingMultiUnitsInterval() throws RecognitionException {
		ErrorCapturingMultiUnitsIntervalContext _localctx = new ErrorCapturingMultiUnitsIntervalContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_errorCapturingMultiUnitsInterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3922);
			((ErrorCapturingMultiUnitsIntervalContext)_localctx).body = multiUnitsInterval();
			setState(3924);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
			case 1:
				{
				setState(3923);
				unitToUnitInterval();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MultiUnitsIntervalContext extends ParserRuleContext {
		public UnitInMultiUnitsContext unitInMultiUnits;
		public List<UnitInMultiUnitsContext> unit = new ArrayList<UnitInMultiUnitsContext>();
		public List<IntervalValueContext> intervalValue() {
			return getRuleContexts(IntervalValueContext.class);
		}
		public IntervalValueContext intervalValue(int i) {
			return getRuleContext(IntervalValueContext.class,i);
		}
		public List<UnitInMultiUnitsContext> unitInMultiUnits() {
			return getRuleContexts(UnitInMultiUnitsContext.class);
		}
		public UnitInMultiUnitsContext unitInMultiUnits(int i) {
			return getRuleContext(UnitInMultiUnitsContext.class,i);
		}
		public MultiUnitsIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiUnitsInterval; }
	}

	public final MultiUnitsIntervalContext multiUnitsInterval() throws RecognitionException {
		MultiUnitsIntervalContext _localctx = new MultiUnitsIntervalContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_multiUnitsInterval);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3929); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3926);
					intervalValue();
					setState(3927);
					((MultiUnitsIntervalContext)_localctx).unitInMultiUnits = unitInMultiUnits();
					((MultiUnitsIntervalContext)_localctx).unit.add(((MultiUnitsIntervalContext)_localctx).unitInMultiUnits);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3931); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,495,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ErrorCapturingUnitToUnitIntervalContext extends ParserRuleContext {
		public UnitToUnitIntervalContext body;
		public MultiUnitsIntervalContext error1;
		public UnitToUnitIntervalContext error2;
		public List<UnitToUnitIntervalContext> unitToUnitInterval() {
			return getRuleContexts(UnitToUnitIntervalContext.class);
		}
		public UnitToUnitIntervalContext unitToUnitInterval(int i) {
			return getRuleContext(UnitToUnitIntervalContext.class,i);
		}
		public MultiUnitsIntervalContext multiUnitsInterval() {
			return getRuleContext(MultiUnitsIntervalContext.class,0);
		}
		public ErrorCapturingUnitToUnitIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_errorCapturingUnitToUnitInterval; }
	}

	public final ErrorCapturingUnitToUnitIntervalContext errorCapturingUnitToUnitInterval() throws RecognitionException {
		ErrorCapturingUnitToUnitIntervalContext _localctx = new ErrorCapturingUnitToUnitIntervalContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_errorCapturingUnitToUnitInterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3933);
			((ErrorCapturingUnitToUnitIntervalContext)_localctx).body = unitToUnitInterval();
			setState(3936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				{
				setState(3934);
				((ErrorCapturingUnitToUnitIntervalContext)_localctx).error1 = multiUnitsInterval();
				}
				break;
			case 2:
				{
				setState(3935);
				((ErrorCapturingUnitToUnitIntervalContext)_localctx).error2 = unitToUnitInterval();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnitToUnitIntervalContext extends ParserRuleContext {
		public IntervalValueContext value;
		public UnitInUnitToUnitContext from;
		public UnitInUnitToUnitContext to;
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public IntervalValueContext intervalValue() {
			return getRuleContext(IntervalValueContext.class,0);
		}
		public List<UnitInUnitToUnitContext> unitInUnitToUnit() {
			return getRuleContexts(UnitInUnitToUnitContext.class);
		}
		public UnitInUnitToUnitContext unitInUnitToUnit(int i) {
			return getRuleContext(UnitInUnitToUnitContext.class,i);
		}
		public UnitToUnitIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unitToUnitInterval; }
	}

	public final UnitToUnitIntervalContext unitToUnitInterval() throws RecognitionException {
		UnitToUnitIntervalContext _localctx = new UnitToUnitIntervalContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_unitToUnitInterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3938);
			((UnitToUnitIntervalContext)_localctx).value = intervalValue();
			setState(3939);
			((UnitToUnitIntervalContext)_localctx).from = unitInUnitToUnit();
			setState(3940);
			match(TO);
			setState(3941);
			((UnitToUnitIntervalContext)_localctx).to = unitInUnitToUnit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IntervalValueContext extends ParserRuleContext {
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode DECIMAL_VALUE() { return getToken(SqlBaseParser.DECIMAL_VALUE, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(SqlBaseParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public IntervalValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalValue; }
	}

	public final IntervalValueContext intervalValue() throws RecognitionException {
		IntervalValueContext _localctx = new IntervalValueContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_intervalValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3944);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				setState(3943);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3949);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
			case 1:
				{
				setState(3946);
				match(INTEGER_VALUE);
				}
				break;
			case 2:
				{
				setState(3947);
				match(DECIMAL_VALUE);
				}
				break;
			case 3:
				{
				setState(3948);
				stringLit();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnitInMultiUnitsContext extends ParserRuleContext {
		public TerminalNode NANOSECOND() { return getToken(SqlBaseParser.NANOSECOND, 0); }
		public TerminalNode NANOSECONDS() { return getToken(SqlBaseParser.NANOSECONDS, 0); }
		public TerminalNode MICROSECOND() { return getToken(SqlBaseParser.MICROSECOND, 0); }
		public TerminalNode MICROSECONDS() { return getToken(SqlBaseParser.MICROSECONDS, 0); }
		public TerminalNode MILLISECOND() { return getToken(SqlBaseParser.MILLISECOND, 0); }
		public TerminalNode MILLISECONDS() { return getToken(SqlBaseParser.MILLISECONDS, 0); }
		public TerminalNode SECOND() { return getToken(SqlBaseParser.SECOND, 0); }
		public TerminalNode SECONDS() { return getToken(SqlBaseParser.SECONDS, 0); }
		public TerminalNode MINUTE() { return getToken(SqlBaseParser.MINUTE, 0); }
		public TerminalNode MINUTES() { return getToken(SqlBaseParser.MINUTES, 0); }
		public TerminalNode HOUR() { return getToken(SqlBaseParser.HOUR, 0); }
		public TerminalNode HOURS() { return getToken(SqlBaseParser.HOURS, 0); }
		public TerminalNode DAY() { return getToken(SqlBaseParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(SqlBaseParser.DAYS, 0); }
		public TerminalNode WEEK() { return getToken(SqlBaseParser.WEEK, 0); }
		public TerminalNode WEEKS() { return getToken(SqlBaseParser.WEEKS, 0); }
		public TerminalNode MONTH() { return getToken(SqlBaseParser.MONTH, 0); }
		public TerminalNode MONTHS() { return getToken(SqlBaseParser.MONTHS, 0); }
		public TerminalNode YEAR() { return getToken(SqlBaseParser.YEAR, 0); }
		public TerminalNode YEARS() { return getToken(SqlBaseParser.YEARS, 0); }
		public UnitInMultiUnitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unitInMultiUnits; }
	}

	public final UnitInMultiUnitsContext unitInMultiUnits() throws RecognitionException {
		UnitInMultiUnitsContext _localctx = new UnitInMultiUnitsContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_unitInMultiUnits);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3951);
			_la = _input.LA(1);
			if ( !(_la==DAY || _la==DAYS || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & 8052436133738446851L) != 0) || _la==NANOSECOND || _la==NANOSECONDS || _la==SECOND || _la==SECONDS || ((((_la - 376)) & ~0x3f) == 0 && ((1L << (_la - 376)) & 771L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnitInUnitToUnitContext extends ParserRuleContext {
		public TerminalNode SECOND() { return getToken(SqlBaseParser.SECOND, 0); }
		public TerminalNode MINUTE() { return getToken(SqlBaseParser.MINUTE, 0); }
		public TerminalNode HOUR() { return getToken(SqlBaseParser.HOUR, 0); }
		public TerminalNode DAY() { return getToken(SqlBaseParser.DAY, 0); }
		public TerminalNode MONTH() { return getToken(SqlBaseParser.MONTH, 0); }
		public TerminalNode YEAR() { return getToken(SqlBaseParser.YEAR, 0); }
		public UnitInUnitToUnitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unitInUnitToUnit; }
	}

	public final UnitInUnitToUnitContext unitInUnitToUnit() throws RecognitionException {
		UnitInUnitToUnitContext _localctx = new UnitInUnitToUnitContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_unitInUnitToUnit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3953);
			_la = _input.LA(1);
			if ( !(_la==DAY || ((((_la - 152)) & ~0x3f) == 0 && ((1L << (_la - 152)) & 2594073385365405697L) != 0) || _la==SECOND || _la==YEAR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColPositionContext extends ParserRuleContext {
		public Token position;
		public ErrorCapturingIdentifierContext afterCol;
		public TerminalNode FIRST() { return getToken(SqlBaseParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(SqlBaseParser.AFTER, 0); }
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public ColPositionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colPosition; }
	}

	public final ColPositionContext colPosition() throws RecognitionException {
		ColPositionContext _localctx = new ColPositionContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_colPosition);
		try {
			setState(3958);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FIRST:
				enterOuterAlt(_localctx, 1);
				{
				setState(3955);
				((ColPositionContext)_localctx).position = match(FIRST);
				}
				break;
			case AFTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3956);
				((ColPositionContext)_localctx).position = match(AFTER);
				setState(3957);
				((ColPositionContext)_localctx).afterCol = errorCapturingIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CollationSpecContext extends ParserRuleContext {
		public IdentifierContext collationName;
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public TerminalNode COLLATION() { return getToken(SqlBaseParser.COLLATION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CollationSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationSpec; }
	}

	public final CollationSpecContext collationSpec() throws RecognitionException {
		CollationSpecContext _localctx = new CollationSpecContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_collationSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3960);
			match(DEFAULT);
			setState(3961);
			match(COLLATION);
			setState(3962);
			((CollationSpecContext)_localctx).collationName = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CollateClauseContext extends ParserRuleContext {
		public MultipartIdentifierContext collationName;
		public TerminalNode COLLATE() { return getToken(SqlBaseParser.COLLATE, 0); }
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public CollateClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collateClause; }
	}

	public final CollateClauseContext collateClause() throws RecognitionException {
		CollateClauseContext _localctx = new CollateClauseContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_collateClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3964);
			match(COLLATE);
			setState(3965);
			((CollateClauseContext)_localctx).collationName = multipartIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypeContext extends ParserRuleContext {
		public IdentifierContext unsupportedType;
		public TerminalNode BOOLEAN() { return getToken(SqlBaseParser.BOOLEAN, 0); }
		public TerminalNode TINYINT() { return getToken(SqlBaseParser.TINYINT, 0); }
		public TerminalNode BYTE() { return getToken(SqlBaseParser.BYTE, 0); }
		public TerminalNode SMALLINT() { return getToken(SqlBaseParser.SMALLINT, 0); }
		public TerminalNode SHORT() { return getToken(SqlBaseParser.SHORT, 0); }
		public TerminalNode INT() { return getToken(SqlBaseParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(SqlBaseParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(SqlBaseParser.BIGINT, 0); }
		public TerminalNode LONG() { return getToken(SqlBaseParser.LONG, 0); }
		public TerminalNode FLOAT() { return getToken(SqlBaseParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(SqlBaseParser.REAL, 0); }
		public TerminalNode DOUBLE() { return getToken(SqlBaseParser.DOUBLE, 0); }
		public TerminalNode DATE() { return getToken(SqlBaseParser.DATE, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SqlBaseParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_NTZ() { return getToken(SqlBaseParser.TIMESTAMP_NTZ, 0); }
		public TerminalNode TIMESTAMP_LTZ() { return getToken(SqlBaseParser.TIMESTAMP_LTZ, 0); }
		public TerminalNode STRING() { return getToken(SqlBaseParser.STRING, 0); }
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(SqlBaseParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(SqlBaseParser.CHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(SqlBaseParser.VARCHAR, 0); }
		public TerminalNode BINARY() { return getToken(SqlBaseParser.BINARY, 0); }
		public TerminalNode DECIMAL() { return getToken(SqlBaseParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(SqlBaseParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(SqlBaseParser.NUMERIC, 0); }
		public TerminalNode VOID() { return getToken(SqlBaseParser.VOID, 0); }
		public TerminalNode INTERVAL() { return getToken(SqlBaseParser.INTERVAL, 0); }
		public TerminalNode VARIANT() { return getToken(SqlBaseParser.VARIANT, 0); }
		public TerminalNode ARRAY() { return getToken(SqlBaseParser.ARRAY, 0); }
		public TerminalNode STRUCT() { return getToken(SqlBaseParser.STRUCT, 0); }
		public TerminalNode MAP() { return getToken(SqlBaseParser.MAP, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type; }
	}

	public final TypeContext type() throws RecognitionException {
		TypeContext _localctx = new TypeContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_type);
		try {
			setState(4001);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3967);
				match(BOOLEAN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3968);
				match(TINYINT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3969);
				match(BYTE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3970);
				match(SMALLINT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3971);
				match(SHORT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3972);
				match(INT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3973);
				match(INTEGER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3974);
				match(BIGINT);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3975);
				match(LONG);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3976);
				match(FLOAT);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3977);
				match(REAL);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3978);
				match(DOUBLE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3979);
				match(DATE);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3980);
				match(TIMESTAMP);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3981);
				match(TIMESTAMP_NTZ);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3982);
				match(TIMESTAMP_LTZ);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3983);
				match(STRING);
				setState(3985);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
				case 1:
					{
					setState(3984);
					collateClause();
					}
					break;
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(3987);
				match(CHARACTER);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(3988);
				match(CHAR);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(3989);
				match(VARCHAR);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(3990);
				match(BINARY);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(3991);
				match(DECIMAL);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(3992);
				match(DEC);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(3993);
				match(NUMERIC);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(3994);
				match(VOID);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(3995);
				match(INTERVAL);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(3996);
				match(VARIANT);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(3997);
				match(ARRAY);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(3998);
				match(STRUCT);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(3999);
				match(MAP);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(4000);
				((TypeContext)_localctx).unsupportedType = identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	 
		public DataTypeContext() { }
		public void copyFrom(DataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ComplexDataTypeContext extends DataTypeContext {
		public Token complex;
		public TerminalNode LT() { return getToken(SqlBaseParser.LT, 0); }
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode GT() { return getToken(SqlBaseParser.GT, 0); }
		public TerminalNode ARRAY() { return getToken(SqlBaseParser.ARRAY, 0); }
		public TerminalNode COMMA() { return getToken(SqlBaseParser.COMMA, 0); }
		public TerminalNode MAP() { return getToken(SqlBaseParser.MAP, 0); }
		public TerminalNode STRUCT() { return getToken(SqlBaseParser.STRUCT, 0); }
		public TerminalNode NEQ() { return getToken(SqlBaseParser.NEQ, 0); }
		public ComplexColTypeListContext complexColTypeList() {
			return getRuleContext(ComplexColTypeListContext.class,0);
		}
		public ComplexDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class YearMonthIntervalDataTypeContext extends DataTypeContext {
		public Token from;
		public Token to;
		public TerminalNode INTERVAL() { return getToken(SqlBaseParser.INTERVAL, 0); }
		public TerminalNode YEAR() { return getToken(SqlBaseParser.YEAR, 0); }
		public List<TerminalNode> MONTH() { return getTokens(SqlBaseParser.MONTH); }
		public TerminalNode MONTH(int i) {
			return getToken(SqlBaseParser.MONTH, i);
		}
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public YearMonthIntervalDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DayTimeIntervalDataTypeContext extends DataTypeContext {
		public Token from;
		public Token to;
		public TerminalNode INTERVAL() { return getToken(SqlBaseParser.INTERVAL, 0); }
		public TerminalNode DAY() { return getToken(SqlBaseParser.DAY, 0); }
		public List<TerminalNode> HOUR() { return getTokens(SqlBaseParser.HOUR); }
		public TerminalNode HOUR(int i) {
			return getToken(SqlBaseParser.HOUR, i);
		}
		public List<TerminalNode> MINUTE() { return getTokens(SqlBaseParser.MINUTE); }
		public TerminalNode MINUTE(int i) {
			return getToken(SqlBaseParser.MINUTE, i);
		}
		public List<TerminalNode> SECOND() { return getTokens(SqlBaseParser.SECOND); }
		public TerminalNode SECOND(int i) {
			return getToken(SqlBaseParser.SECOND, i);
		}
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public DayTimeIntervalDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PrimitiveDataTypeContext extends DataTypeContext {
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public List<TerminalNode> INTEGER_VALUE() { return getTokens(SqlBaseParser.INTEGER_VALUE); }
		public TerminalNode INTEGER_VALUE(int i) {
			return getToken(SqlBaseParser.INTEGER_VALUE, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public PrimitiveDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_dataType);
		int _la;
		try {
			setState(4049);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
			case 1:
				_localctx = new ComplexDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4003);
				((ComplexDataTypeContext)_localctx).complex = match(ARRAY);
				setState(4004);
				match(LT);
				setState(4005);
				dataType();
				setState(4006);
				match(GT);
				}
				break;
			case 2:
				_localctx = new ComplexDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4008);
				((ComplexDataTypeContext)_localctx).complex = match(MAP);
				setState(4009);
				match(LT);
				setState(4010);
				dataType();
				setState(4011);
				match(COMMA);
				setState(4012);
				dataType();
				setState(4013);
				match(GT);
				}
				break;
			case 3:
				_localctx = new ComplexDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4015);
				((ComplexDataTypeContext)_localctx).complex = match(STRUCT);
				setState(4022);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LT:
					{
					setState(4016);
					match(LT);
					setState(4018);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
					case 1:
						{
						setState(4017);
						complexColTypeList();
						}
						break;
					}
					setState(4020);
					match(GT);
					}
					break;
				case NEQ:
					{
					setState(4021);
					match(NEQ);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new YearMonthIntervalDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4024);
				match(INTERVAL);
				setState(4025);
				((YearMonthIntervalDataTypeContext)_localctx).from = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MONTH || _la==YEAR) ) {
					((YearMonthIntervalDataTypeContext)_localctx).from = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4028);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,504,_ctx) ) {
				case 1:
					{
					setState(4026);
					match(TO);
					setState(4027);
					((YearMonthIntervalDataTypeContext)_localctx).to = match(MONTH);
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new DayTimeIntervalDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4030);
				match(INTERVAL);
				setState(4031);
				((DayTimeIntervalDataTypeContext)_localctx).from = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==SECOND) ) {
					((DayTimeIntervalDataTypeContext)_localctx).from = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4034);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
				case 1:
					{
					setState(4032);
					match(TO);
					setState(4033);
					((DayTimeIntervalDataTypeContext)_localctx).to = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==HOUR || _la==MINUTE || _la==SECOND) ) {
						((DayTimeIntervalDataTypeContext)_localctx).to = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new PrimitiveDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4036);
				type();
				setState(4047);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
				case 1:
					{
					setState(4037);
					match(LEFT_PAREN);
					setState(4038);
					match(INTEGER_VALUE);
					setState(4043);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4039);
						match(COMMA);
						setState(4040);
						match(INTEGER_VALUE);
						}
						}
						setState(4045);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4046);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QualifiedColTypeWithPositionListContext extends ParserRuleContext {
		public List<QualifiedColTypeWithPositionContext> qualifiedColTypeWithPosition() {
			return getRuleContexts(QualifiedColTypeWithPositionContext.class);
		}
		public QualifiedColTypeWithPositionContext qualifiedColTypeWithPosition(int i) {
			return getRuleContext(QualifiedColTypeWithPositionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public QualifiedColTypeWithPositionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedColTypeWithPositionList; }
	}

	public final QualifiedColTypeWithPositionListContext qualifiedColTypeWithPositionList() throws RecognitionException {
		QualifiedColTypeWithPositionListContext _localctx = new QualifiedColTypeWithPositionListContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_qualifiedColTypeWithPositionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4051);
			qualifiedColTypeWithPosition();
			setState(4056);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4052);
				match(COMMA);
				setState(4053);
				qualifiedColTypeWithPosition();
				}
				}
				setState(4058);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QualifiedColTypeWithPositionContext extends ParserRuleContext {
		public MultipartIdentifierContext name;
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public List<ColDefinitionDescriptorWithPositionContext> colDefinitionDescriptorWithPosition() {
			return getRuleContexts(ColDefinitionDescriptorWithPositionContext.class);
		}
		public ColDefinitionDescriptorWithPositionContext colDefinitionDescriptorWithPosition(int i) {
			return getRuleContext(ColDefinitionDescriptorWithPositionContext.class,i);
		}
		public QualifiedColTypeWithPositionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedColTypeWithPosition; }
	}

	public final QualifiedColTypeWithPositionContext qualifiedColTypeWithPosition() throws RecognitionException {
		QualifiedColTypeWithPositionContext _localctx = new QualifiedColTypeWithPositionContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_qualifiedColTypeWithPosition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4059);
			((QualifiedColTypeWithPositionContext)_localctx).name = multipartIdentifier();
			setState(4060);
			dataType();
			setState(4064);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 288230376151713024L) != 0) || _la==DEFAULT || _la==FIRST || _la==NOT) {
				{
				{
				setState(4061);
				colDefinitionDescriptorWithPosition();
				}
				}
				setState(4066);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColDefinitionDescriptorWithPositionContext extends ParserRuleContext {
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public DefaultExpressionContext defaultExpression() {
			return getRuleContext(DefaultExpressionContext.class,0);
		}
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public ColPositionContext colPosition() {
			return getRuleContext(ColPositionContext.class,0);
		}
		public ColDefinitionDescriptorWithPositionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colDefinitionDescriptorWithPosition; }
	}

	public final ColDefinitionDescriptorWithPositionContext colDefinitionDescriptorWithPosition() throws RecognitionException {
		ColDefinitionDescriptorWithPositionContext _localctx = new ColDefinitionDescriptorWithPositionContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_colDefinitionDescriptorWithPosition);
		try {
			setState(4073);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BANG:
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4067);
				errorCapturingNot();
				setState(4068);
				match(NULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4070);
				defaultExpression();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(4071);
				commentSpec();
				}
				break;
			case AFTER:
			case FIRST:
				enterOuterAlt(_localctx, 4);
				{
				setState(4072);
				colPosition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefaultExpressionContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DefaultExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultExpression; }
	}

	public final DefaultExpressionContext defaultExpression() throws RecognitionException {
		DefaultExpressionContext _localctx = new DefaultExpressionContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_defaultExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4075);
			match(DEFAULT);
			setState(4076);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariableDefaultExpressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public TerminalNode EQ() { return getToken(SqlBaseParser.EQ, 0); }
		public VariableDefaultExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableDefaultExpression; }
	}

	public final VariableDefaultExpressionContext variableDefaultExpression() throws RecognitionException {
		VariableDefaultExpressionContext _localctx = new VariableDefaultExpressionContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_variableDefaultExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4078);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==EQ) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4079);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColTypeListContext extends ParserRuleContext {
		public List<ColTypeContext> colType() {
			return getRuleContexts(ColTypeContext.class);
		}
		public ColTypeContext colType(int i) {
			return getRuleContext(ColTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ColTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colTypeList; }
	}

	public final ColTypeListContext colTypeList() throws RecognitionException {
		ColTypeListContext _localctx = new ColTypeListContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_colTypeList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4081);
			colType();
			setState(4086);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,512,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4082);
					match(COMMA);
					setState(4083);
					colType();
					}
					} 
				}
				setState(4088);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,512,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColTypeContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext colName;
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public ColTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colType; }
	}

	public final ColTypeContext colType() throws RecognitionException {
		ColTypeContext _localctx = new ColTypeContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_colType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4089);
			((ColTypeContext)_localctx).colName = errorCapturingIdentifier();
			setState(4090);
			dataType();
			setState(4094);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
			case 1:
				{
				setState(4091);
				errorCapturingNot();
				setState(4092);
				match(NULL);
				}
				break;
			}
			setState(4097);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
			case 1:
				{
				setState(4096);
				commentSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColDefinitionListContext extends ParserRuleContext {
		public List<ColDefinitionContext> colDefinition() {
			return getRuleContexts(ColDefinitionContext.class);
		}
		public ColDefinitionContext colDefinition(int i) {
			return getRuleContext(ColDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ColDefinitionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colDefinitionList; }
	}

	public final ColDefinitionListContext colDefinitionList() throws RecognitionException {
		ColDefinitionListContext _localctx = new ColDefinitionListContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_colDefinitionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4099);
			colDefinition();
			setState(4104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4100);
				match(COMMA);
				setState(4101);
				colDefinition();
				}
				}
				setState(4106);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColDefinitionContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext colName;
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public List<ColDefinitionOptionContext> colDefinitionOption() {
			return getRuleContexts(ColDefinitionOptionContext.class);
		}
		public ColDefinitionOptionContext colDefinitionOption(int i) {
			return getRuleContext(ColDefinitionOptionContext.class,i);
		}
		public ColDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colDefinition; }
	}

	public final ColDefinitionContext colDefinition() throws RecognitionException {
		ColDefinitionContext _localctx = new ColDefinitionContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_colDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4107);
			((ColDefinitionContext)_localctx).colName = errorCapturingIdentifier();
			setState(4108);
			dataType();
			setState(4112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==BANG || _la==COMMENT || _la==DEFAULT || _la==GENERATED || _la==NOT) {
				{
				{
				setState(4109);
				colDefinitionOption();
				}
				}
				setState(4114);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ColDefinitionOptionContext extends ParserRuleContext {
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public DefaultExpressionContext defaultExpression() {
			return getRuleContext(DefaultExpressionContext.class,0);
		}
		public GenerationExpressionContext generationExpression() {
			return getRuleContext(GenerationExpressionContext.class,0);
		}
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public ColDefinitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colDefinitionOption; }
	}

	public final ColDefinitionOptionContext colDefinitionOption() throws RecognitionException {
		ColDefinitionOptionContext _localctx = new ColDefinitionOptionContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_colDefinitionOption);
		try {
			setState(4121);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BANG:
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4115);
				errorCapturingNot();
				setState(4116);
				match(NULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4118);
				defaultExpression();
				}
				break;
			case GENERATED:
				enterOuterAlt(_localctx, 3);
				{
				setState(4119);
				generationExpression();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(4120);
				commentSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GenerationExpressionContext extends ParserRuleContext {
		public GenerationExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generationExpression; }
	 
		public GenerationExpressionContext() { }
		public void copyFrom(GenerationExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GeneratedColumnContext extends GenerationExpressionContext {
		public TerminalNode GENERATED() { return getToken(SqlBaseParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(SqlBaseParser.ALWAYS, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public GeneratedColumnContext(GenerationExpressionContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IdentityColumnContext extends GenerationExpressionContext {
		public TerminalNode GENERATED() { return getToken(SqlBaseParser.GENERATED, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(SqlBaseParser.IDENTITY, 0); }
		public TerminalNode ALWAYS() { return getToken(SqlBaseParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public IdentityColSpecContext identityColSpec() {
			return getRuleContext(IdentityColSpecContext.class,0);
		}
		public IdentityColumnContext(GenerationExpressionContext ctx) { copyFrom(ctx); }
	}

	public final GenerationExpressionContext generationExpression() throws RecognitionException {
		GenerationExpressionContext _localctx = new GenerationExpressionContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_generationExpression);
		int _la;
		try {
			setState(4141);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
			case 1:
				_localctx = new GeneratedColumnContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4123);
				match(GENERATED);
				setState(4124);
				match(ALWAYS);
				setState(4125);
				match(AS);
				setState(4126);
				match(LEFT_PAREN);
				setState(4127);
				expression();
				setState(4128);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				_localctx = new IdentityColumnContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4130);
				match(GENERATED);
				setState(4134);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(4131);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					setState(4132);
					match(BY);
					setState(4133);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4136);
				match(AS);
				setState(4137);
				match(IDENTITY);
				setState(4139);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4138);
					identityColSpec();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentityColSpecContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public List<SequenceGeneratorOptionContext> sequenceGeneratorOption() {
			return getRuleContexts(SequenceGeneratorOptionContext.class);
		}
		public SequenceGeneratorOptionContext sequenceGeneratorOption(int i) {
			return getRuleContext(SequenceGeneratorOptionContext.class,i);
		}
		public IdentityColSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identityColSpec; }
	}

	public final IdentityColSpecContext identityColSpec() throws RecognitionException {
		IdentityColSpecContext _localctx = new IdentityColSpecContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_identityColSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4143);
			match(LEFT_PAREN);
			setState(4147);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INCREMENT || _la==START) {
				{
				{
				setState(4144);
				sequenceGeneratorOption();
				}
				}
				setState(4149);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4150);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SequenceGeneratorOptionContext extends ParserRuleContext {
		public SequenceGeneratorStartOrStepContext start;
		public SequenceGeneratorStartOrStepContext step;
		public TerminalNode START() { return getToken(SqlBaseParser.START, 0); }
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public SequenceGeneratorStartOrStepContext sequenceGeneratorStartOrStep() {
			return getRuleContext(SequenceGeneratorStartOrStepContext.class,0);
		}
		public TerminalNode INCREMENT() { return getToken(SqlBaseParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public SequenceGeneratorOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceGeneratorOption; }
	}

	public final SequenceGeneratorOptionContext sequenceGeneratorOption() throws RecognitionException {
		SequenceGeneratorOptionContext _localctx = new SequenceGeneratorOptionContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_sequenceGeneratorOption);
		try {
			setState(4158);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case START:
				enterOuterAlt(_localctx, 1);
				{
				setState(4152);
				match(START);
				setState(4153);
				match(WITH);
				setState(4154);
				((SequenceGeneratorOptionContext)_localctx).start = sequenceGeneratorStartOrStep();
				}
				break;
			case INCREMENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4155);
				match(INCREMENT);
				setState(4156);
				match(BY);
				setState(4157);
				((SequenceGeneratorOptionContext)_localctx).step = sequenceGeneratorStartOrStep();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SequenceGeneratorStartOrStepContext extends ParserRuleContext {
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public TerminalNode BIGINT_LITERAL() { return getToken(SqlBaseParser.BIGINT_LITERAL, 0); }
		public SequenceGeneratorStartOrStepContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceGeneratorStartOrStep; }
	}

	public final SequenceGeneratorStartOrStepContext sequenceGeneratorStartOrStep() throws RecognitionException {
		SequenceGeneratorStartOrStepContext _localctx = new SequenceGeneratorStartOrStepContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_sequenceGeneratorStartOrStep);
		int _la;
		try {
			setState(4168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4161);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4160);
					match(MINUS);
					}
				}

				setState(4163);
				match(INTEGER_VALUE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4165);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4164);
					match(MINUS);
					}
				}

				setState(4167);
				match(BIGINT_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ComplexColTypeListContext extends ParserRuleContext {
		public List<ComplexColTypeContext> complexColType() {
			return getRuleContexts(ComplexColTypeContext.class);
		}
		public ComplexColTypeContext complexColType(int i) {
			return getRuleContext(ComplexColTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public ComplexColTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_complexColTypeList; }
	}

	public final ComplexColTypeListContext complexColTypeList() throws RecognitionException {
		ComplexColTypeListContext _localctx = new ComplexColTypeListContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_complexColTypeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4170);
			complexColType();
			setState(4175);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4171);
				match(COMMA);
				setState(4172);
				complexColType();
				}
				}
				setState(4177);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ComplexColTypeContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode COLON() { return getToken(SqlBaseParser.COLON, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public ComplexColTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_complexColType; }
	}

	public final ComplexColTypeContext complexColType() throws RecognitionException {
		ComplexColTypeContext _localctx = new ComplexColTypeContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_complexColType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4178);
			errorCapturingIdentifier();
			setState(4180);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				{
				setState(4179);
				match(COLON);
				}
				break;
			}
			setState(4182);
			dataType();
			setState(4186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BANG || _la==NOT) {
				{
				setState(4183);
				errorCapturingNot();
				setState(4184);
				match(NULL);
				}
			}

			setState(4189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(4188);
				commentSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoutineCharacteristicsContext extends ParserRuleContext {
		public List<RoutineLanguageContext> routineLanguage() {
			return getRuleContexts(RoutineLanguageContext.class);
		}
		public RoutineLanguageContext routineLanguage(int i) {
			return getRuleContext(RoutineLanguageContext.class,i);
		}
		public List<SpecificNameContext> specificName() {
			return getRuleContexts(SpecificNameContext.class);
		}
		public SpecificNameContext specificName(int i) {
			return getRuleContext(SpecificNameContext.class,i);
		}
		public List<DeterministicContext> deterministic() {
			return getRuleContexts(DeterministicContext.class);
		}
		public DeterministicContext deterministic(int i) {
			return getRuleContext(DeterministicContext.class,i);
		}
		public List<SqlDataAccessContext> sqlDataAccess() {
			return getRuleContexts(SqlDataAccessContext.class);
		}
		public SqlDataAccessContext sqlDataAccess(int i) {
			return getRuleContext(SqlDataAccessContext.class,i);
		}
		public List<NullCallContext> nullCall() {
			return getRuleContexts(NullCallContext.class);
		}
		public NullCallContext nullCall(int i) {
			return getRuleContext(NullCallContext.class,i);
		}
		public List<CommentSpecContext> commentSpec() {
			return getRuleContexts(CommentSpecContext.class);
		}
		public CommentSpecContext commentSpec(int i) {
			return getRuleContext(CommentSpecContext.class,i);
		}
		public List<RightsClauseContext> rightsClause() {
			return getRuleContexts(RightsClauseContext.class);
		}
		public RightsClauseContext rightsClause(int i) {
			return getRuleContext(RightsClauseContext.class,i);
		}
		public RoutineCharacteristicsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineCharacteristics; }
	}

	public final RoutineCharacteristicsContext routineCharacteristics() throws RecognitionException {
		RoutineCharacteristicsContext _localctx = new RoutineCharacteristicsContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_routineCharacteristics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 288230925907525888L) != 0) || _la==CONTAINS || _la==DETERMINISTIC || ((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & 5498631880705L) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & 6755399441317889L) != 0)) {
				{
				setState(4198);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LANGUAGE:
					{
					setState(4191);
					routineLanguage();
					}
					break;
				case SPECIFIC:
					{
					setState(4192);
					specificName();
					}
					break;
				case BANG:
				case DETERMINISTIC:
				case NOT:
					{
					setState(4193);
					deterministic();
					}
					break;
				case CONTAINS:
				case MODIFIES:
				case NO:
				case READS:
					{
					setState(4194);
					sqlDataAccess();
					}
					break;
				case CALLED:
				case RETURNS:
					{
					setState(4195);
					nullCall();
					}
					break;
				case COMMENT:
					{
					setState(4196);
					commentSpec();
					}
					break;
				case SQL:
					{
					setState(4197);
					rightsClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(4202);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RoutineLanguageContext extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(SqlBaseParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(SqlBaseParser.SQL, 0); }
		public TerminalNode IDENTIFIER() { return getToken(SqlBaseParser.IDENTIFIER, 0); }
		public RoutineLanguageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineLanguage; }
	}

	public final RoutineLanguageContext routineLanguage() throws RecognitionException {
		RoutineLanguageContext _localctx = new RoutineLanguageContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_routineLanguage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4203);
			match(LANGUAGE);
			setState(4204);
			_la = _input.LA(1);
			if ( !(_la==SQL || _la==IDENTIFIER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SpecificNameContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext specific;
		public TerminalNode SPECIFIC() { return getToken(SqlBaseParser.SPECIFIC, 0); }
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public SpecificNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificName; }
	}

	public final SpecificNameContext specificName() throws RecognitionException {
		SpecificNameContext _localctx = new SpecificNameContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_specificName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4206);
			match(SPECIFIC);
			setState(4207);
			((SpecificNameContext)_localctx).specific = errorCapturingIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeterministicContext extends ParserRuleContext {
		public TerminalNode DETERMINISTIC() { return getToken(SqlBaseParser.DETERMINISTIC, 0); }
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public DeterministicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deterministic; }
	}

	public final DeterministicContext deterministic() throws RecognitionException {
		DeterministicContext _localctx = new DeterministicContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_deterministic);
		try {
			setState(4213);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DETERMINISTIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(4209);
				match(DETERMINISTIC);
				}
				break;
			case BANG:
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4210);
				errorCapturingNot();
				setState(4211);
				match(DETERMINISTIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SqlDataAccessContext extends ParserRuleContext {
		public Token access;
		public TerminalNode SQL() { return getToken(SqlBaseParser.SQL, 0); }
		public TerminalNode NO() { return getToken(SqlBaseParser.NO, 0); }
		public TerminalNode CONTAINS() { return getToken(SqlBaseParser.CONTAINS, 0); }
		public TerminalNode DATA() { return getToken(SqlBaseParser.DATA, 0); }
		public TerminalNode READS() { return getToken(SqlBaseParser.READS, 0); }
		public TerminalNode MODIFIES() { return getToken(SqlBaseParser.MODIFIES, 0); }
		public SqlDataAccessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlDataAccess; }
	}

	public final SqlDataAccessContext sqlDataAccess() throws RecognitionException {
		SqlDataAccessContext _localctx = new SqlDataAccessContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_sqlDataAccess);
		try {
			setState(4225);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(4215);
				((SqlDataAccessContext)_localctx).access = match(NO);
				setState(4216);
				match(SQL);
				}
				break;
			case CONTAINS:
				enterOuterAlt(_localctx, 2);
				{
				setState(4217);
				((SqlDataAccessContext)_localctx).access = match(CONTAINS);
				setState(4218);
				match(SQL);
				}
				break;
			case READS:
				enterOuterAlt(_localctx, 3);
				{
				setState(4219);
				((SqlDataAccessContext)_localctx).access = match(READS);
				setState(4220);
				match(SQL);
				setState(4221);
				match(DATA);
				}
				break;
			case MODIFIES:
				enterOuterAlt(_localctx, 4);
				{
				setState(4222);
				((SqlDataAccessContext)_localctx).access = match(MODIFIES);
				setState(4223);
				match(SQL);
				setState(4224);
				match(DATA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NullCallContext extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(SqlBaseParser.RETURNS, 0); }
		public List<TerminalNode> NULL() { return getTokens(SqlBaseParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(SqlBaseParser.NULL, i);
		}
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public TerminalNode INPUT() { return getToken(SqlBaseParser.INPUT, 0); }
		public TerminalNode CALLED() { return getToken(SqlBaseParser.CALLED, 0); }
		public NullCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullCall; }
	}

	public final NullCallContext nullCall() throws RecognitionException {
		NullCallContext _localctx = new NullCallContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_nullCall);
		try {
			setState(4236);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETURNS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4227);
				match(RETURNS);
				setState(4228);
				match(NULL);
				setState(4229);
				match(ON);
				setState(4230);
				match(NULL);
				setState(4231);
				match(INPUT);
				}
				break;
			case CALLED:
				enterOuterAlt(_localctx, 2);
				{
				setState(4232);
				match(CALLED);
				setState(4233);
				match(ON);
				setState(4234);
				match(NULL);
				setState(4235);
				match(INPUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RightsClauseContext extends ParserRuleContext {
		public TerminalNode SQL() { return getToken(SqlBaseParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(SqlBaseParser.SECURITY, 0); }
		public TerminalNode INVOKER() { return getToken(SqlBaseParser.INVOKER, 0); }
		public TerminalNode DEFINER() { return getToken(SqlBaseParser.DEFINER, 0); }
		public RightsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rightsClause; }
	}

	public final RightsClauseContext rightsClause() throws RecognitionException {
		RightsClauseContext _localctx = new RightsClauseContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_rightsClause);
		try {
			setState(4244);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4238);
				match(SQL);
				setState(4239);
				match(SECURITY);
				setState(4240);
				match(INVOKER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4241);
				match(SQL);
				setState(4242);
				match(SECURITY);
				setState(4243);
				match(DEFINER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhenClauseContext extends ParserRuleContext {
		public ExpressionContext condition;
		public ExpressionContext result;
		public TerminalNode WHEN() { return getToken(SqlBaseParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(SqlBaseParser.THEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public WhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenClause; }
	}

	public final WhenClauseContext whenClause() throws RecognitionException {
		WhenClauseContext _localctx = new WhenClauseContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_whenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4246);
			match(WHEN);
			setState(4247);
			((WhenClauseContext)_localctx).condition = expression();
			setState(4248);
			match(THEN);
			setState(4249);
			((WhenClauseContext)_localctx).result = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(SqlBaseParser.WINDOW, 0); }
		public List<NamedWindowContext> namedWindow() {
			return getRuleContexts(NamedWindowContext.class);
		}
		public NamedWindowContext namedWindow(int i) {
			return getRuleContext(NamedWindowContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_windowClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4251);
			match(WINDOW);
			setState(4252);
			namedWindow();
			setState(4257);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,536,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4253);
					match(COMMA);
					setState(4254);
					namedWindow();
					}
					} 
				}
				setState(4259);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,536,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NamedWindowContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext name;
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public NamedWindowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedWindow; }
	}

	public final NamedWindowContext namedWindow() throws RecognitionException {
		NamedWindowContext _localctx = new NamedWindowContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_namedWindow);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4260);
			((NamedWindowContext)_localctx).name = errorCapturingIdentifier();
			setState(4261);
			match(AS);
			setState(4262);
			windowSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowSpecContext extends ParserRuleContext {
		public WindowSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpec; }
	 
		public WindowSpecContext() { }
		public void copyFrom(WindowSpecContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class WindowRefContext extends WindowSpecContext {
		public ErrorCapturingIdentifierContext name;
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public WindowRefContext(WindowSpecContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class WindowDefContext extends WindowSpecContext {
		public ExpressionContext expression;
		public List<ExpressionContext> partition = new ArrayList<ExpressionContext>();
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public TerminalNode CLUSTER() { return getToken(SqlBaseParser.CLUSTER, 0); }
		public List<TerminalNode> BY() { return getTokens(SqlBaseParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SqlBaseParser.BY, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public WindowFrameContext windowFrame() {
			return getRuleContext(WindowFrameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public List<SortItemContext> sortItem() {
			return getRuleContexts(SortItemContext.class);
		}
		public SortItemContext sortItem(int i) {
			return getRuleContext(SortItemContext.class,i);
		}
		public TerminalNode PARTITION() { return getToken(SqlBaseParser.PARTITION, 0); }
		public TerminalNode DISTRIBUTE() { return getToken(SqlBaseParser.DISTRIBUTE, 0); }
		public TerminalNode ORDER() { return getToken(SqlBaseParser.ORDER, 0); }
		public TerminalNode SORT() { return getToken(SqlBaseParser.SORT, 0); }
		public WindowDefContext(WindowSpecContext ctx) { copyFrom(ctx); }
	}

	public final WindowSpecContext windowSpec() throws RecognitionException {
		WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_windowSpec);
		int _la;
		try {
			setState(4310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
			case 1:
				_localctx = new WindowRefContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4264);
				((WindowRefContext)_localctx).name = errorCapturingIdentifier();
				}
				break;
			case 2:
				_localctx = new WindowRefContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4265);
				match(LEFT_PAREN);
				setState(4266);
				((WindowRefContext)_localctx).name = errorCapturingIdentifier();
				setState(4267);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				_localctx = new WindowDefContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4269);
				match(LEFT_PAREN);
				setState(4304);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CLUSTER:
					{
					setState(4270);
					match(CLUSTER);
					setState(4271);
					match(BY);
					setState(4272);
					((WindowDefContext)_localctx).expression = expression();
					((WindowDefContext)_localctx).partition.add(((WindowDefContext)_localctx).expression);
					setState(4277);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4273);
						match(COMMA);
						setState(4274);
						((WindowDefContext)_localctx).expression = expression();
						((WindowDefContext)_localctx).partition.add(((WindowDefContext)_localctx).expression);
						}
						}
						setState(4279);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case RIGHT_PAREN:
				case DISTRIBUTE:
				case ORDER:
				case PARTITION:
				case RANGE:
				case ROWS:
				case SORT:
					{
					setState(4290);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DISTRIBUTE || _la==PARTITION) {
						{
						setState(4280);
						_la = _input.LA(1);
						if ( !(_la==DISTRIBUTE || _la==PARTITION) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4281);
						match(BY);
						setState(4282);
						((WindowDefContext)_localctx).expression = expression();
						((WindowDefContext)_localctx).partition.add(((WindowDefContext)_localctx).expression);
						setState(4287);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(4283);
							match(COMMA);
							setState(4284);
							((WindowDefContext)_localctx).expression = expression();
							((WindowDefContext)_localctx).partition.add(((WindowDefContext)_localctx).expression);
							}
							}
							setState(4289);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					setState(4302);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ORDER || _la==SORT) {
						{
						setState(4292);
						_la = _input.LA(1);
						if ( !(_la==ORDER || _la==SORT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4293);
						match(BY);
						setState(4294);
						sortItem();
						setState(4299);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(4295);
							match(COMMA);
							setState(4296);
							sortItem();
							}
							}
							setState(4301);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4307);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(4306);
					windowFrame();
					}
				}

				setState(4309);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WindowFrameContext extends ParserRuleContext {
		public Token frameType;
		public FrameBoundContext start;
		public FrameBoundContext end;
		public TerminalNode RANGE() { return getToken(SqlBaseParser.RANGE, 0); }
		public List<FrameBoundContext> frameBound() {
			return getRuleContexts(FrameBoundContext.class);
		}
		public FrameBoundContext frameBound(int i) {
			return getRuleContext(FrameBoundContext.class,i);
		}
		public TerminalNode ROWS() { return getToken(SqlBaseParser.ROWS, 0); }
		public TerminalNode BETWEEN() { return getToken(SqlBaseParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public WindowFrameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrame; }
	}

	public final WindowFrameContext windowFrame() throws RecognitionException {
		WindowFrameContext _localctx = new WindowFrameContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_windowFrame);
		try {
			setState(4328);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4312);
				((WindowFrameContext)_localctx).frameType = match(RANGE);
				setState(4313);
				((WindowFrameContext)_localctx).start = frameBound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4314);
				((WindowFrameContext)_localctx).frameType = match(ROWS);
				setState(4315);
				((WindowFrameContext)_localctx).start = frameBound();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4316);
				((WindowFrameContext)_localctx).frameType = match(RANGE);
				setState(4317);
				match(BETWEEN);
				setState(4318);
				((WindowFrameContext)_localctx).start = frameBound();
				setState(4319);
				match(AND);
				setState(4320);
				((WindowFrameContext)_localctx).end = frameBound();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4322);
				((WindowFrameContext)_localctx).frameType = match(ROWS);
				setState(4323);
				match(BETWEEN);
				setState(4324);
				((WindowFrameContext)_localctx).start = frameBound();
				setState(4325);
				match(AND);
				setState(4326);
				((WindowFrameContext)_localctx).end = frameBound();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FrameBoundContext extends ParserRuleContext {
		public Token boundType;
		public TerminalNode UNBOUNDED() { return getToken(SqlBaseParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(SqlBaseParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(SqlBaseParser.FOLLOWING, 0); }
		public TerminalNode ROW() { return getToken(SqlBaseParser.ROW, 0); }
		public TerminalNode CURRENT() { return getToken(SqlBaseParser.CURRENT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FrameBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBound; }
	}

	public final FrameBoundContext frameBound() throws RecognitionException {
		FrameBoundContext _localctx = new FrameBoundContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_frameBound);
		int _la;
		try {
			setState(4337);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4330);
				match(UNBOUNDED);
				setState(4331);
				((FrameBoundContext)_localctx).boundType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
					((FrameBoundContext)_localctx).boundType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4332);
				((FrameBoundContext)_localctx).boundType = match(CURRENT);
				setState(4333);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4334);
				expression();
				setState(4335);
				((FrameBoundContext)_localctx).boundType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
					((FrameBoundContext)_localctx).boundType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QualifiedNameListContext extends ParserRuleContext {
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedNameList; }
	}

	public final QualifiedNameListContext qualifiedNameList() throws RecognitionException {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_qualifiedNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4339);
			qualifiedName();
			setState(4344);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4340);
				match(COMMA);
				setState(4341);
				qualifiedName();
				}
				}
				setState(4346);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionNameContext extends ParserRuleContext {
		public Token identFunc;
		public TerminalNode IDENTIFIER_KW() { return getToken(SqlBaseParser.IDENTIFIER_KW, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SqlBaseParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SqlBaseParser.RIGHT_PAREN, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode FILTER() { return getToken(SqlBaseParser.FILTER, 0); }
		public TerminalNode LEFT() { return getToken(SqlBaseParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(SqlBaseParser.RIGHT, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionName; }
	}

	public final FunctionNameContext functionName() throws RecognitionException {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_functionName);
		try {
			setState(4357);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4347);
				match(IDENTIFIER_KW);
				setState(4348);
				match(LEFT_PAREN);
				setState(4349);
				expression();
				setState(4350);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4352);
				((FunctionNameContext)_localctx).identFunc = match(IDENTIFIER_KW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4353);
				qualifiedName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4354);
				match(FILTER);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4355);
				match(LEFT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4356);
				match(RIGHT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QualifiedNameContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(SqlBaseParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SqlBaseParser.DOT, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedName; }
	}

	public final QualifiedNameContext qualifiedName() throws RecognitionException {
		QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_qualifiedName);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4359);
			identifier();
			setState(4364);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,549,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4360);
					match(DOT);
					setState(4361);
					identifier();
					}
					} 
				}
				setState(4366);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,549,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ErrorCapturingIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ErrorCapturingIdentifierExtraContext errorCapturingIdentifierExtra() {
			return getRuleContext(ErrorCapturingIdentifierExtraContext.class,0);
		}
		public ErrorCapturingIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_errorCapturingIdentifier; }
	}

	public final ErrorCapturingIdentifierContext errorCapturingIdentifier() throws RecognitionException {
		ErrorCapturingIdentifierContext _localctx = new ErrorCapturingIdentifierContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_errorCapturingIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4367);
			identifier();
			setState(4368);
			errorCapturingIdentifierExtra();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ErrorCapturingIdentifierExtraContext extends ParserRuleContext {
		public ErrorCapturingIdentifierExtraContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_errorCapturingIdentifierExtra; }
	 
		public ErrorCapturingIdentifierExtraContext() { }
		public void copyFrom(ErrorCapturingIdentifierExtraContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ErrorIdentContext extends ErrorCapturingIdentifierExtraContext {
		public List<TerminalNode> MINUS() { return getTokens(SqlBaseParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(SqlBaseParser.MINUS, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public ErrorIdentContext(ErrorCapturingIdentifierExtraContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RealIdentContext extends ErrorCapturingIdentifierExtraContext {
		public RealIdentContext(ErrorCapturingIdentifierExtraContext ctx) { copyFrom(ctx); }
	}

	public final ErrorCapturingIdentifierExtraContext errorCapturingIdentifierExtra() throws RecognitionException {
		ErrorCapturingIdentifierExtraContext _localctx = new ErrorCapturingIdentifierExtraContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_errorCapturingIdentifierExtra);
		try {
			int _alt;
			setState(4377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
			case 1:
				_localctx = new ErrorIdentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4372); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4370);
						match(MINUS);
						setState(4371);
						identifier();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4374); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,550,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				_localctx = new RealIdentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierContext extends ParserRuleContext {
		public StrictIdentifierContext strictIdentifier() {
			return getRuleContext(StrictIdentifierContext.class,0);
		}
		public StrictNonReservedContext strictNonReserved() {
			return getRuleContext(StrictNonReservedContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_identifier);
		try {
			setState(4382);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,552,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4379);
				strictIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4380);
				if (!(!SQL_standard_keyword_behavior)) throw new FailedPredicateException(this, "!SQL_standard_keyword_behavior");
				setState(4381);
				strictNonReserved();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StrictIdentifierContext extends ParserRuleContext {
		public StrictIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_strictIdentifier; }
	 
		public StrictIdentifierContext() { }
		public void copyFrom(StrictIdentifierContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class QuotedIdentifierAlternativeContext extends StrictIdentifierContext {
		public QuotedIdentifierContext quotedIdentifier() {
			return getRuleContext(QuotedIdentifierContext.class,0);
		}
		public QuotedIdentifierAlternativeContext(StrictIdentifierContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class UnquotedIdentifierContext extends StrictIdentifierContext {
		public TerminalNode IDENTIFIER() { return getToken(SqlBaseParser.IDENTIFIER, 0); }
		public AnsiNonReservedContext ansiNonReserved() {
			return getRuleContext(AnsiNonReservedContext.class,0);
		}
		public NonReservedContext nonReserved() {
			return getRuleContext(NonReservedContext.class,0);
		}
		public UnquotedIdentifierContext(StrictIdentifierContext ctx) { copyFrom(ctx); }
	}

	public final StrictIdentifierContext strictIdentifier() throws RecognitionException {
		StrictIdentifierContext _localctx = new StrictIdentifierContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_strictIdentifier);
		try {
			setState(4390);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
			case 1:
				_localctx = new UnquotedIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4384);
				match(IDENTIFIER);
				}
				break;
			case 2:
				_localctx = new QuotedIdentifierAlternativeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4385);
				quotedIdentifier();
				}
				break;
			case 3:
				_localctx = new UnquotedIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4386);
				if (!(SQL_standard_keyword_behavior)) throw new FailedPredicateException(this, "SQL_standard_keyword_behavior");
				setState(4387);
				ansiNonReserved();
				}
				break;
			case 4:
				_localctx = new UnquotedIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4388);
				if (!(!SQL_standard_keyword_behavior)) throw new FailedPredicateException(this, "!SQL_standard_keyword_behavior");
				setState(4389);
				nonReserved();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QuotedIdentifierContext extends ParserRuleContext {
		public TerminalNode BACKQUOTED_IDENTIFIER() { return getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0); }
		public TerminalNode DOUBLEQUOTED_STRING() { return getToken(SqlBaseParser.DOUBLEQUOTED_STRING, 0); }
		public QuotedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quotedIdentifier; }
	}

	public final QuotedIdentifierContext quotedIdentifier() throws RecognitionException {
		QuotedIdentifierContext _localctx = new QuotedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_quotedIdentifier);
		try {
			setState(4395);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4392);
				match(BACKQUOTED_IDENTIFIER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4393);
				if (!(double_quoted_identifiers)) throw new FailedPredicateException(this, "double_quoted_identifiers");
				setState(4394);
				match(DOUBLEQUOTED_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BackQuotedIdentifierContext extends ParserRuleContext {
		public TerminalNode BACKQUOTED_IDENTIFIER() { return getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0); }
		public BackQuotedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backQuotedIdentifier; }
	}

	public final BackQuotedIdentifierContext backQuotedIdentifier() throws RecognitionException {
		BackQuotedIdentifierContext _localctx = new BackQuotedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_backQuotedIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4397);
			match(BACKQUOTED_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumberContext extends ParserRuleContext {
		public NumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_number; }
	 
		public NumberContext() { }
		public void copyFrom(NumberContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DecimalLiteralContext extends NumberContext {
		public TerminalNode DECIMAL_VALUE() { return getToken(SqlBaseParser.DECIMAL_VALUE, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public DecimalLiteralContext(NumberContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class BigIntLiteralContext extends NumberContext {
		public TerminalNode BIGINT_LITERAL() { return getToken(SqlBaseParser.BIGINT_LITERAL, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public BigIntLiteralContext(NumberContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class TinyIntLiteralContext extends NumberContext {
		public TerminalNode TINYINT_LITERAL() { return getToken(SqlBaseParser.TINYINT_LITERAL, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public TinyIntLiteralContext(NumberContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class LegacyDecimalLiteralContext extends NumberContext {
		public TerminalNode EXPONENT_VALUE() { return getToken(SqlBaseParser.EXPONENT_VALUE, 0); }
		public TerminalNode DECIMAL_VALUE() { return getToken(SqlBaseParser.DECIMAL_VALUE, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public LegacyDecimalLiteralContext(NumberContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class BigDecimalLiteralContext extends NumberContext {
		public TerminalNode BIGDECIMAL_LITERAL() { return getToken(SqlBaseParser.BIGDECIMAL_LITERAL, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public BigDecimalLiteralContext(NumberContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ExponentLiteralContext extends NumberContext {
		public TerminalNode EXPONENT_VALUE() { return getToken(SqlBaseParser.EXPONENT_VALUE, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public ExponentLiteralContext(NumberContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DoubleLiteralContext extends NumberContext {
		public TerminalNode DOUBLE_LITERAL() { return getToken(SqlBaseParser.DOUBLE_LITERAL, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public DoubleLiteralContext(NumberContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class IntegerLiteralContext extends NumberContext {
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public IntegerLiteralContext(NumberContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class FloatLiteralContext extends NumberContext {
		public TerminalNode FLOAT_LITERAL() { return getToken(SqlBaseParser.FLOAT_LITERAL, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public FloatLiteralContext(NumberContext ctx) { copyFrom(ctx); }
	}
	@SuppressWarnings("CheckReturnValue")
	public static class SmallIntLiteralContext extends NumberContext {
		public TerminalNode SMALLINT_LITERAL() { return getToken(SqlBaseParser.SMALLINT_LITERAL, 0); }
		public TerminalNode MINUS() { return getToken(SqlBaseParser.MINUS, 0); }
		public SmallIntLiteralContext(NumberContext ctx) { copyFrom(ctx); }
	}

	public final NumberContext number() throws RecognitionException {
		NumberContext _localctx = new NumberContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_number);
		int _la;
		try {
			setState(4442);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,565,_ctx) ) {
			case 1:
				_localctx = new ExponentLiteralContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4399);
				if (!(!legacy_exponent_literal_as_decimal_enabled)) throw new FailedPredicateException(this, "!legacy_exponent_literal_as_decimal_enabled");
				setState(4401);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4400);
					match(MINUS);
					}
				}

				setState(4403);
				match(EXPONENT_VALUE);
				}
				break;
			case 2:
				_localctx = new DecimalLiteralContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4404);
				if (!(!legacy_exponent_literal_as_decimal_enabled)) throw new FailedPredicateException(this, "!legacy_exponent_literal_as_decimal_enabled");
				setState(4406);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4405);
					match(MINUS);
					}
				}

				setState(4408);
				match(DECIMAL_VALUE);
				}
				break;
			case 3:
				_localctx = new LegacyDecimalLiteralContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4409);
				if (!(legacy_exponent_literal_as_decimal_enabled)) throw new FailedPredicateException(this, "legacy_exponent_literal_as_decimal_enabled");
				setState(4411);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4410);
					match(MINUS);
					}
				}

				setState(4413);
				_la = _input.LA(1);
				if ( !(_la==EXPONENT_VALUE || _la==DECIMAL_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				_localctx = new IntegerLiteralContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4415);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4414);
					match(MINUS);
					}
				}

				setState(4417);
				match(INTEGER_VALUE);
				}
				break;
			case 5:
				_localctx = new BigIntLiteralContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4418);
					match(MINUS);
					}
				}

				setState(4421);
				match(BIGINT_LITERAL);
				}
				break;
			case 6:
				_localctx = new SmallIntLiteralContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4423);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4422);
					match(MINUS);
					}
				}

				setState(4425);
				match(SMALLINT_LITERAL);
				}
				break;
			case 7:
				_localctx = new TinyIntLiteralContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4426);
					match(MINUS);
					}
				}

				setState(4429);
				match(TINYINT_LITERAL);
				}
				break;
			case 8:
				_localctx = new DoubleLiteralContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(4431);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4430);
					match(MINUS);
					}
				}

				setState(4433);
				match(DOUBLE_LITERAL);
				}
				break;
			case 9:
				_localctx = new FloatLiteralContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(4435);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4434);
					match(MINUS);
					}
				}

				setState(4437);
				match(FLOAT_LITERAL);
				}
				break;
			case 10:
				_localctx = new BigDecimalLiteralContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(4439);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4438);
					match(MINUS);
					}
				}

				setState(4441);
				match(BIGDECIMAL_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterColumnSpecListContext extends ParserRuleContext {
		public List<AlterColumnSpecContext> alterColumnSpec() {
			return getRuleContexts(AlterColumnSpecContext.class);
		}
		public AlterColumnSpecContext alterColumnSpec(int i) {
			return getRuleContext(AlterColumnSpecContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public AlterColumnSpecListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnSpecList; }
	}

	public final AlterColumnSpecListContext alterColumnSpecList() throws RecognitionException {
		AlterColumnSpecListContext _localctx = new AlterColumnSpecListContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_alterColumnSpecList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4444);
			alterColumnSpec();
			setState(4449);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4445);
				match(COMMA);
				setState(4446);
				alterColumnSpec();
				}
				}
				setState(4451);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterColumnSpecContext extends ParserRuleContext {
		public MultipartIdentifierContext column;
		public MultipartIdentifierContext multipartIdentifier() {
			return getRuleContext(MultipartIdentifierContext.class,0);
		}
		public AlterColumnActionContext alterColumnAction() {
			return getRuleContext(AlterColumnActionContext.class,0);
		}
		public AlterColumnSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnSpec; }
	}

	public final AlterColumnSpecContext alterColumnSpec() throws RecognitionException {
		AlterColumnSpecContext _localctx = new AlterColumnSpecContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_alterColumnSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4452);
			((AlterColumnSpecContext)_localctx).column = multipartIdentifier();
			setState(4454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AFTER || _la==COMMENT || _la==DROP || _la==FIRST || _la==SET || _la==TYPE) {
				{
				setState(4453);
				alterColumnAction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AlterColumnActionContext extends ParserRuleContext {
		public Token setOrDrop;
		public Token dropDefault;
		public TerminalNode TYPE() { return getToken(SqlBaseParser.TYPE, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CommentSpecContext commentSpec() {
			return getRuleContext(CommentSpecContext.class,0);
		}
		public ColPositionContext colPosition() {
			return getRuleContext(ColPositionContext.class,0);
		}
		public ErrorCapturingNotContext errorCapturingNot() {
			return getRuleContext(ErrorCapturingNotContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public DefaultExpressionContext defaultExpression() {
			return getRuleContext(DefaultExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public AlterColumnActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnAction; }
	}

	public final AlterColumnActionContext alterColumnAction() throws RecognitionException {
		AlterColumnActionContext _localctx = new AlterColumnActionContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_alterColumnAction);
		int _la;
		try {
			setState(4468);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4456);
				match(TYPE);
				setState(4457);
				dataType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4458);
				commentSpec();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4459);
				colPosition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4460);
				((AlterColumnActionContext)_localctx).setOrDrop = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==SET) ) {
					((AlterColumnActionContext)_localctx).setOrDrop = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4461);
				errorCapturingNot();
				setState(4462);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4464);
				match(SET);
				setState(4465);
				defaultExpression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4466);
				((AlterColumnActionContext)_localctx).dropDefault = match(DROP);
				setState(4467);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StringLitContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(SqlBaseParser.STRING_LITERAL, 0); }
		public TerminalNode DOUBLEQUOTED_STRING() { return getToken(SqlBaseParser.DOUBLEQUOTED_STRING, 0); }
		public StringLitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLit; }
	}

	public final StringLitContext stringLit() throws RecognitionException {
		StringLitContext _localctx = new StringLitContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_stringLit);
		try {
			setState(4473);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4470);
				match(STRING_LITERAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4471);
				if (!(!double_quoted_identifiers)) throw new FailedPredicateException(this, "!double_quoted_identifiers");
				setState(4472);
				match(DOUBLEQUOTED_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommentContext extends ParserRuleContext {
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment; }
	}

	public final CommentContext comment() throws RecognitionException {
		CommentContext _localctx = new CommentContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_comment);
		try {
			setState(4477);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4475);
				stringLit();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4476);
				match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VersionContext extends ParserRuleContext {
		public TerminalNode INTEGER_VALUE() { return getToken(SqlBaseParser.INTEGER_VALUE, 0); }
		public StringLitContext stringLit() {
			return getRuleContext(StringLitContext.class,0);
		}
		public VersionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_version; }
	}

	public final VersionContext version() throws RecognitionException {
		VersionContext _localctx = new VersionContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_version);
		try {
			setState(4481);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4479);
				match(INTEGER_VALUE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4480);
				stringLit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OperatorPipeRightSideContext extends ParserRuleContext {
		public NamedExpressionSeqContext extendList;
		public Token operator;
		public QueryPrimaryContext right;
		public SelectClauseContext selectClause() {
			return getRuleContext(SelectClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public TerminalNode EXTEND() { return getToken(SqlBaseParser.EXTEND, 0); }
		public NamedExpressionSeqContext namedExpressionSeq() {
			return getRuleContext(NamedExpressionSeqContext.class,0);
		}
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public OperatorPipeSetAssignmentSeqContext operatorPipeSetAssignmentSeq() {
			return getRuleContext(OperatorPipeSetAssignmentSeqContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public IdentifierSeqContext identifierSeq() {
			return getRuleContext(IdentifierSeqContext.class,0);
		}
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
			return getRuleContext(ErrorCapturingIdentifierContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public PivotClauseContext pivotClause() {
			return getRuleContext(PivotClauseContext.class,0);
		}
		public UnpivotClauseContext unpivotClause() {
			return getRuleContext(UnpivotClauseContext.class,0);
		}
		public SampleContext sample() {
			return getRuleContext(SampleContext.class,0);
		}
		public JoinRelationContext joinRelation() {
			return getRuleContext(JoinRelationContext.class,0);
		}
		public QueryPrimaryContext queryPrimary() {
			return getRuleContext(QueryPrimaryContext.class,0);
		}
		public TerminalNode UNION() { return getToken(SqlBaseParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(SqlBaseParser.EXCEPT, 0); }
		public TerminalNode SETMINUS() { return getToken(SqlBaseParser.SETMINUS, 0); }
		public TerminalNode INTERSECT() { return getToken(SqlBaseParser.INTERSECT, 0); }
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public QueryOrganizationContext queryOrganization() {
			return getRuleContext(QueryOrganizationContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(SqlBaseParser.AGGREGATE, 0); }
		public AggregationClauseContext aggregationClause() {
			return getRuleContext(AggregationClauseContext.class,0);
		}
		public OperatorPipeRightSideContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorPipeRightSide; }
	}

	public final OperatorPipeRightSideContext operatorPipeRightSide() throws RecognitionException {
		OperatorPipeRightSideContext _localctx = new OperatorPipeRightSideContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_operatorPipeRightSide);
		int _la;
		try {
			setState(4522);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4483);
				selectClause();
				setState(4485);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,572,_ctx) ) {
				case 1:
					{
					setState(4484);
					windowClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4487);
				match(EXTEND);
				setState(4488);
				((OperatorPipeRightSideContext)_localctx).extendList = namedExpressionSeq();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4489);
				match(SET);
				setState(4490);
				operatorPipeSetAssignmentSeq();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4491);
				match(DROP);
				setState(4492);
				identifierSeq();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4493);
				match(AS);
				setState(4494);
				errorCapturingIdentifier();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4495);
				whereClause();
				setState(4497);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
				case 1:
					{
					setState(4496);
					windowClause();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4499);
				pivotClause();
				setState(4501);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
				case 1:
					{
					setState(4500);
					unpivotClause();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4503);
				unpivotClause();
				setState(4505);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,575,_ctx) ) {
				case 1:
					{
					setState(4504);
					pivotClause();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4507);
				sample();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4508);
				joinRelation();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4509);
				((OperatorPipeRightSideContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXCEPT || _la==INTERSECT || _la==SETMINUS || _la==UNION) ) {
					((OperatorPipeRightSideContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(4510);
					setQuantifier();
					}
				}

				setState(4513);
				((OperatorPipeRightSideContext)_localctx).right = queryPrimary();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4514);
				queryOrganization();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4515);
				match(AGGREGATE);
				setState(4517);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,577,_ctx) ) {
				case 1:
					{
					setState(4516);
					namedExpressionSeq();
					}
					break;
				}
				setState(4520);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
				case 1:
					{
					setState(4519);
					aggregationClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OperatorPipeSetAssignmentSeqContext extends ParserRuleContext {
		public ErrorCapturingIdentifierContext errorCapturingIdentifier;
		public List<ErrorCapturingIdentifierContext> ident = new ArrayList<ErrorCapturingIdentifierContext>();
		public List<TerminalNode> EQ() { return getTokens(SqlBaseParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SqlBaseParser.EQ, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
			return getRuleContexts(ErrorCapturingIdentifierContext.class);
		}
		public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
			return getRuleContext(ErrorCapturingIdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(SqlBaseParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SqlBaseParser.DOT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SqlBaseParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SqlBaseParser.COMMA, i);
		}
		public OperatorPipeSetAssignmentSeqContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorPipeSetAssignmentSeq; }
	}

	public final OperatorPipeSetAssignmentSeqContext operatorPipeSetAssignmentSeq() throws RecognitionException {
		OperatorPipeSetAssignmentSeqContext _localctx = new OperatorPipeSetAssignmentSeqContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_operatorPipeSetAssignmentSeq);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4524);
			((OperatorPipeSetAssignmentSeqContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
			((OperatorPipeSetAssignmentSeqContext)_localctx).ident.add(((OperatorPipeSetAssignmentSeqContext)_localctx).errorCapturingIdentifier);
			setState(4529);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DOT) {
				{
				{
				setState(4525);
				match(DOT);
				setState(4526);
				errorCapturingIdentifier();
				}
				}
				setState(4531);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4532);
			match(EQ);
			setState(4533);
			expression();
			setState(4548);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,582,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4534);
					match(COMMA);
					setState(4535);
					((OperatorPipeSetAssignmentSeqContext)_localctx).errorCapturingIdentifier = errorCapturingIdentifier();
					((OperatorPipeSetAssignmentSeqContext)_localctx).ident.add(((OperatorPipeSetAssignmentSeqContext)_localctx).errorCapturingIdentifier);
					setState(4540);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==DOT) {
						{
						{
						setState(4536);
						match(DOT);
						setState(4537);
						errorCapturingIdentifier();
						}
						}
						setState(4542);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4543);
					match(EQ);
					setState(4544);
					expression();
					}
					} 
				}
				setState(4550);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,582,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AnsiNonReservedContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(SqlBaseParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(SqlBaseParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(SqlBaseParser.AGGREGATE, 0); }
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(SqlBaseParser.ALWAYS, 0); }
		public TerminalNode ANALYZE() { return getToken(SqlBaseParser.ANALYZE, 0); }
		public TerminalNode ANTI() { return getToken(SqlBaseParser.ANTI, 0); }
		public TerminalNode ANY_VALUE() { return getToken(SqlBaseParser.ANY_VALUE, 0); }
		public TerminalNode ARCHIVE() { return getToken(SqlBaseParser.ARCHIVE, 0); }
		public TerminalNode ARRAY() { return getToken(SqlBaseParser.ARRAY, 0); }
		public TerminalNode ASC() { return getToken(SqlBaseParser.ASC, 0); }
		public TerminalNode AT() { return getToken(SqlBaseParser.AT, 0); }
		public TerminalNode BEGIN() { return getToken(SqlBaseParser.BEGIN, 0); }
		public TerminalNode BETWEEN() { return getToken(SqlBaseParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(SqlBaseParser.BIGINT, 0); }
		public TerminalNode BINARY() { return getToken(SqlBaseParser.BINARY, 0); }
		public TerminalNode BINARY_HEX() { return getToken(SqlBaseParser.BINARY_HEX, 0); }
		public TerminalNode BINDING() { return getToken(SqlBaseParser.BINDING, 0); }
		public TerminalNode BOOLEAN() { return getToken(SqlBaseParser.BOOLEAN, 0); }
		public TerminalNode BUCKET() { return getToken(SqlBaseParser.BUCKET, 0); }
		public TerminalNode BUCKETS() { return getToken(SqlBaseParser.BUCKETS, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode BYTE() { return getToken(SqlBaseParser.BYTE, 0); }
		public TerminalNode CACHE() { return getToken(SqlBaseParser.CACHE, 0); }
		public TerminalNode CALLED() { return getToken(SqlBaseParser.CALLED, 0); }
		public TerminalNode CASCADE() { return getToken(SqlBaseParser.CASCADE, 0); }
		public TerminalNode CATALOG() { return getToken(SqlBaseParser.CATALOG, 0); }
		public TerminalNode CATALOGS() { return getToken(SqlBaseParser.CATALOGS, 0); }
		public TerminalNode CHANGE() { return getToken(SqlBaseParser.CHANGE, 0); }
		public TerminalNode CHAR() { return getToken(SqlBaseParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(SqlBaseParser.CHARACTER, 0); }
		public TerminalNode CLEAR() { return getToken(SqlBaseParser.CLEAR, 0); }
		public TerminalNode CLUSTER() { return getToken(SqlBaseParser.CLUSTER, 0); }
		public TerminalNode CLUSTERED() { return getToken(SqlBaseParser.CLUSTERED, 0); }
		public TerminalNode CODEGEN() { return getToken(SqlBaseParser.CODEGEN, 0); }
		public TerminalNode COLLECTION() { return getToken(SqlBaseParser.COLLECTION, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(SqlBaseParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(SqlBaseParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(SqlBaseParser.COMPACT, 0); }
		public TerminalNode COMPACTIONS() { return getToken(SqlBaseParser.COMPACTIONS, 0); }
		public TerminalNode COMPENSATION() { return getToken(SqlBaseParser.COMPENSATION, 0); }
		public TerminalNode COMPUTE() { return getToken(SqlBaseParser.COMPUTE, 0); }
		public TerminalNode CONCATENATE() { return getToken(SqlBaseParser.CONCATENATE, 0); }
		public TerminalNode CONDITION() { return getToken(SqlBaseParser.CONDITION, 0); }
		public TerminalNode CONTAINS() { return getToken(SqlBaseParser.CONTAINS, 0); }
		public TerminalNode CONTINUE() { return getToken(SqlBaseParser.CONTINUE, 0); }
		public TerminalNode COST() { return getToken(SqlBaseParser.COST, 0); }
		public TerminalNode CUBE() { return getToken(SqlBaseParser.CUBE, 0); }
		public TerminalNode CURRENT() { return getToken(SqlBaseParser.CURRENT, 0); }
		public TerminalNode DATA() { return getToken(SqlBaseParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(SqlBaseParser.DATABASE, 0); }
		public TerminalNode DATABASES() { return getToken(SqlBaseParser.DATABASES, 0); }
		public TerminalNode DATE() { return getToken(SqlBaseParser.DATE, 0); }
		public TerminalNode DATEADD() { return getToken(SqlBaseParser.DATEADD, 0); }
		public TerminalNode DATE_ADD() { return getToken(SqlBaseParser.DATE_ADD, 0); }
		public TerminalNode DATEDIFF() { return getToken(SqlBaseParser.DATEDIFF, 0); }
		public TerminalNode DATE_DIFF() { return getToken(SqlBaseParser.DATE_DIFF, 0); }
		public TerminalNode DAY() { return getToken(SqlBaseParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(SqlBaseParser.DAYS, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(SqlBaseParser.DAYOFYEAR, 0); }
		public TerminalNode DBPROPERTIES() { return getToken(SqlBaseParser.DBPROPERTIES, 0); }
		public TerminalNode DEC() { return getToken(SqlBaseParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(SqlBaseParser.DECIMAL, 0); }
		public TerminalNode DECLARE() { return getToken(SqlBaseParser.DECLARE, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public TerminalNode DEFINED() { return getToken(SqlBaseParser.DEFINED, 0); }
		public TerminalNode DEFINER() { return getToken(SqlBaseParser.DEFINER, 0); }
		public TerminalNode DELETE() { return getToken(SqlBaseParser.DELETE, 0); }
		public TerminalNode DELIMITED() { return getToken(SqlBaseParser.DELIMITED, 0); }
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SqlBaseParser.DESCRIBE, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(SqlBaseParser.DETERMINISTIC, 0); }
		public TerminalNode DFS() { return getToken(SqlBaseParser.DFS, 0); }
		public TerminalNode DIRECTORIES() { return getToken(SqlBaseParser.DIRECTORIES, 0); }
		public TerminalNode DIRECTORY() { return getToken(SqlBaseParser.DIRECTORY, 0); }
		public TerminalNode DISTRIBUTE() { return getToken(SqlBaseParser.DISTRIBUTE, 0); }
		public TerminalNode DIV() { return getToken(SqlBaseParser.DIV, 0); }
		public TerminalNode DO() { return getToken(SqlBaseParser.DO, 0); }
		public TerminalNode DOUBLE() { return getToken(SqlBaseParser.DOUBLE, 0); }
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode ELSEIF() { return getToken(SqlBaseParser.ELSEIF, 0); }
		public TerminalNode ESCAPED() { return getToken(SqlBaseParser.ESCAPED, 0); }
		public TerminalNode EVOLUTION() { return getToken(SqlBaseParser.EVOLUTION, 0); }
		public TerminalNode EXCHANGE() { return getToken(SqlBaseParser.EXCHANGE, 0); }
		public TerminalNode EXCLUDE() { return getToken(SqlBaseParser.EXCLUDE, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode EXIT() { return getToken(SqlBaseParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(SqlBaseParser.EXPLAIN, 0); }
		public TerminalNode EXPORT() { return getToken(SqlBaseParser.EXPORT, 0); }
		public TerminalNode EXTEND() { return getToken(SqlBaseParser.EXTEND, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public TerminalNode EXTERNAL() { return getToken(SqlBaseParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(SqlBaseParser.EXTRACT, 0); }
		public TerminalNode FIELDS() { return getToken(SqlBaseParser.FIELDS, 0); }
		public TerminalNode FILEFORMAT() { return getToken(SqlBaseParser.FILEFORMAT, 0); }
		public TerminalNode FIRST() { return getToken(SqlBaseParser.FIRST, 0); }
		public TerminalNode FLOAT() { return getToken(SqlBaseParser.FLOAT, 0); }
		public TerminalNode FOLLOWING() { return getToken(SqlBaseParser.FOLLOWING, 0); }
		public TerminalNode FORMAT() { return getToken(SqlBaseParser.FORMAT, 0); }
		public TerminalNode FORMATTED() { return getToken(SqlBaseParser.FORMATTED, 0); }
		public TerminalNode FOUND() { return getToken(SqlBaseParser.FOUND, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SqlBaseParser.FUNCTIONS, 0); }
		public TerminalNode GENERATED() { return getToken(SqlBaseParser.GENERATED, 0); }
		public TerminalNode GLOBAL() { return getToken(SqlBaseParser.GLOBAL, 0); }
		public TerminalNode GROUPING() { return getToken(SqlBaseParser.GROUPING, 0); }
		public TerminalNode HANDLER() { return getToken(SqlBaseParser.HANDLER, 0); }
		public TerminalNode HOUR() { return getToken(SqlBaseParser.HOUR, 0); }
		public TerminalNode HOURS() { return getToken(SqlBaseParser.HOURS, 0); }
		public TerminalNode IDENTIFIER_KW() { return getToken(SqlBaseParser.IDENTIFIER_KW, 0); }
		public TerminalNode IDENTITY() { return getToken(SqlBaseParser.IDENTITY, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode IGNORE() { return getToken(SqlBaseParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SqlBaseParser.IMMEDIATE, 0); }
		public TerminalNode IMPORT() { return getToken(SqlBaseParser.IMPORT, 0); }
		public TerminalNode INCLUDE() { return getToken(SqlBaseParser.INCLUDE, 0); }
		public TerminalNode INCREMENT() { return getToken(SqlBaseParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(SqlBaseParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(SqlBaseParser.INDEXES, 0); }
		public TerminalNode INPATH() { return getToken(SqlBaseParser.INPATH, 0); }
		public TerminalNode INPUT() { return getToken(SqlBaseParser.INPUT, 0); }
		public TerminalNode INPUTFORMAT() { return getToken(SqlBaseParser.INPUTFORMAT, 0); }
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode INT() { return getToken(SqlBaseParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(SqlBaseParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(SqlBaseParser.INTERVAL, 0); }
		public TerminalNode INVOKER() { return getToken(SqlBaseParser.INVOKER, 0); }
		public TerminalNode ITEMS() { return getToken(SqlBaseParser.ITEMS, 0); }
		public TerminalNode ITERATE() { return getToken(SqlBaseParser.ITERATE, 0); }
		public TerminalNode JSON() { return getToken(SqlBaseParser.JSON, 0); }
		public TerminalNode KEYS() { return getToken(SqlBaseParser.KEYS, 0); }
		public TerminalNode LANGUAGE() { return getToken(SqlBaseParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(SqlBaseParser.LAST, 0); }
		public TerminalNode LAZY() { return getToken(SqlBaseParser.LAZY, 0); }
		public TerminalNode LEAVE() { return getToken(SqlBaseParser.LEAVE, 0); }
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public TerminalNode ILIKE() { return getToken(SqlBaseParser.ILIKE, 0); }
		public TerminalNode LIMIT() { return getToken(SqlBaseParser.LIMIT, 0); }
		public TerminalNode LINES() { return getToken(SqlBaseParser.LINES, 0); }
		public TerminalNode LIST() { return getToken(SqlBaseParser.LIST, 0); }
		public TerminalNode LOAD() { return getToken(SqlBaseParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(SqlBaseParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(SqlBaseParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(SqlBaseParser.LOCK, 0); }
		public TerminalNode LOCKS() { return getToken(SqlBaseParser.LOCKS, 0); }
		public TerminalNode LOGICAL() { return getToken(SqlBaseParser.LOGICAL, 0); }
		public TerminalNode LONG() { return getToken(SqlBaseParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(SqlBaseParser.LOOP, 0); }
		public TerminalNode MACRO() { return getToken(SqlBaseParser.MACRO, 0); }
		public TerminalNode MAP() { return getToken(SqlBaseParser.MAP, 0); }
		public TerminalNode MATCHED() { return getToken(SqlBaseParser.MATCHED, 0); }
		public TerminalNode MERGE() { return getToken(SqlBaseParser.MERGE, 0); }
		public TerminalNode MICROSECOND() { return getToken(SqlBaseParser.MICROSECOND, 0); }
		public TerminalNode MICROSECONDS() { return getToken(SqlBaseParser.MICROSECONDS, 0); }
		public TerminalNode MILLISECOND() { return getToken(SqlBaseParser.MILLISECOND, 0); }
		public TerminalNode MILLISECONDS() { return getToken(SqlBaseParser.MILLISECONDS, 0); }
		public TerminalNode MINUTE() { return getToken(SqlBaseParser.MINUTE, 0); }
		public TerminalNode MINUTES() { return getToken(SqlBaseParser.MINUTES, 0); }
		public TerminalNode MODIFIES() { return getToken(SqlBaseParser.MODIFIES, 0); }
		public TerminalNode MONTH() { return getToken(SqlBaseParser.MONTH, 0); }
		public TerminalNode MONTHS() { return getToken(SqlBaseParser.MONTHS, 0); }
		public TerminalNode MSCK() { return getToken(SqlBaseParser.MSCK, 0); }
		public TerminalNode NAME() { return getToken(SqlBaseParser.NAME, 0); }
		public TerminalNode NAMESPACE() { return getToken(SqlBaseParser.NAMESPACE, 0); }
		public TerminalNode NAMESPACES() { return getToken(SqlBaseParser.NAMESPACES, 0); }
		public TerminalNode NANOSECOND() { return getToken(SqlBaseParser.NANOSECOND, 0); }
		public TerminalNode NANOSECONDS() { return getToken(SqlBaseParser.NANOSECONDS, 0); }
		public TerminalNode NO() { return getToken(SqlBaseParser.NO, 0); }
		public TerminalNode NONE() { return getToken(SqlBaseParser.NONE, 0); }
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public TerminalNode NUMERIC() { return getToken(SqlBaseParser.NUMERIC, 0); }
		public TerminalNode OF() { return getToken(SqlBaseParser.OF, 0); }
		public TerminalNode OPTION() { return getToken(SqlBaseParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public TerminalNode OUT() { return getToken(SqlBaseParser.OUT, 0); }
		public TerminalNode OUTPUTFORMAT() { return getToken(SqlBaseParser.OUTPUTFORMAT, 0); }
		public TerminalNode OVER() { return getToken(SqlBaseParser.OVER, 0); }
		public TerminalNode OVERLAY() { return getToken(SqlBaseParser.OVERLAY, 0); }
		public TerminalNode OVERWRITE() { return getToken(SqlBaseParser.OVERWRITE, 0); }
		public TerminalNode PARTITION() { return getToken(SqlBaseParser.PARTITION, 0); }
		public TerminalNode PARTITIONED() { return getToken(SqlBaseParser.PARTITIONED, 0); }
		public TerminalNode PARTITIONS() { return getToken(SqlBaseParser.PARTITIONS, 0); }
		public TerminalNode PERCENTLIT() { return getToken(SqlBaseParser.PERCENTLIT, 0); }
		public TerminalNode PIVOT() { return getToken(SqlBaseParser.PIVOT, 0); }
		public TerminalNode PLACING() { return getToken(SqlBaseParser.PLACING, 0); }
		public TerminalNode POSITION() { return getToken(SqlBaseParser.POSITION, 0); }
		public TerminalNode PRECEDING() { return getToken(SqlBaseParser.PRECEDING, 0); }
		public TerminalNode PRINCIPALS() { return getToken(SqlBaseParser.PRINCIPALS, 0); }
		public TerminalNode PROPERTIES() { return getToken(SqlBaseParser.PROPERTIES, 0); }
		public TerminalNode PURGE() { return getToken(SqlBaseParser.PURGE, 0); }
		public TerminalNode QUARTER() { return getToken(SqlBaseParser.QUARTER, 0); }
		public TerminalNode QUERY() { return getToken(SqlBaseParser.QUERY, 0); }
		public TerminalNode RANGE() { return getToken(SqlBaseParser.RANGE, 0); }
		public TerminalNode READS() { return getToken(SqlBaseParser.READS, 0); }
		public TerminalNode REAL() { return getToken(SqlBaseParser.REAL, 0); }
		public TerminalNode RECORDREADER() { return getToken(SqlBaseParser.RECORDREADER, 0); }
		public TerminalNode RECORDWRITER() { return getToken(SqlBaseParser.RECORDWRITER, 0); }
		public TerminalNode RECOVER() { return getToken(SqlBaseParser.RECOVER, 0); }
		public TerminalNode REDUCE() { return getToken(SqlBaseParser.REDUCE, 0); }
		public TerminalNode REFRESH() { return getToken(SqlBaseParser.REFRESH, 0); }
		public TerminalNode RENAME() { return getToken(SqlBaseParser.RENAME, 0); }
		public TerminalNode REPAIR() { return getToken(SqlBaseParser.REPAIR, 0); }
		public TerminalNode REPEAT() { return getToken(SqlBaseParser.REPEAT, 0); }
		public TerminalNode REPEATABLE() { return getToken(SqlBaseParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode RESET() { return getToken(SqlBaseParser.RESET, 0); }
		public TerminalNode RESPECT() { return getToken(SqlBaseParser.RESPECT, 0); }
		public TerminalNode RESTRICT() { return getToken(SqlBaseParser.RESTRICT, 0); }
		public TerminalNode RETURN() { return getToken(SqlBaseParser.RETURN, 0); }
		public TerminalNode RETURNS() { return getToken(SqlBaseParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(SqlBaseParser.REVOKE, 0); }
		public TerminalNode RLIKE() { return getToken(SqlBaseParser.RLIKE, 0); }
		public TerminalNode ROLE() { return getToken(SqlBaseParser.ROLE, 0); }
		public TerminalNode ROLES() { return getToken(SqlBaseParser.ROLES, 0); }
		public TerminalNode ROLLBACK() { return getToken(SqlBaseParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(SqlBaseParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(SqlBaseParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(SqlBaseParser.ROWS, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlBaseParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(SqlBaseParser.SCHEMAS, 0); }
		public TerminalNode SECOND() { return getToken(SqlBaseParser.SECOND, 0); }
		public TerminalNode SECONDS() { return getToken(SqlBaseParser.SECONDS, 0); }
		public TerminalNode SECURITY() { return getToken(SqlBaseParser.SECURITY, 0); }
		public TerminalNode SEMI() { return getToken(SqlBaseParser.SEMI, 0); }
		public TerminalNode SEPARATED() { return getToken(SqlBaseParser.SEPARATED, 0); }
		public TerminalNode SERDE() { return getToken(SqlBaseParser.SERDE, 0); }
		public TerminalNode SERDEPROPERTIES() { return getToken(SqlBaseParser.SERDEPROPERTIES, 0); }
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode SETMINUS() { return getToken(SqlBaseParser.SETMINUS, 0); }
		public TerminalNode SETS() { return getToken(SqlBaseParser.SETS, 0); }
		public TerminalNode SHORT() { return getToken(SqlBaseParser.SHORT, 0); }
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode SINGLE() { return getToken(SqlBaseParser.SINGLE, 0); }
		public TerminalNode SKEWED() { return getToken(SqlBaseParser.SKEWED, 0); }
		public TerminalNode SMALLINT() { return getToken(SqlBaseParser.SMALLINT, 0); }
		public TerminalNode SORT() { return getToken(SqlBaseParser.SORT, 0); }
		public TerminalNode SORTED() { return getToken(SqlBaseParser.SORTED, 0); }
		public TerminalNode SOURCE() { return getToken(SqlBaseParser.SOURCE, 0); }
		public TerminalNode SPECIFIC() { return getToken(SqlBaseParser.SPECIFIC, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(SqlBaseParser.SQLEXCEPTION, 0); }
		public TerminalNode SQLSTATE() { return getToken(SqlBaseParser.SQLSTATE, 0); }
		public TerminalNode START() { return getToken(SqlBaseParser.START, 0); }
		public TerminalNode STATISTICS() { return getToken(SqlBaseParser.STATISTICS, 0); }
		public TerminalNode STORED() { return getToken(SqlBaseParser.STORED, 0); }
		public TerminalNode STRATIFY() { return getToken(SqlBaseParser.STRATIFY, 0); }
		public TerminalNode STRING() { return getToken(SqlBaseParser.STRING, 0); }
		public TerminalNode STRUCT() { return getToken(SqlBaseParser.STRUCT, 0); }
		public TerminalNode SUBSTR() { return getToken(SqlBaseParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(SqlBaseParser.SUBSTRING, 0); }
		public TerminalNode SYNC() { return getToken(SqlBaseParser.SYNC, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(SqlBaseParser.SYSTEM_TIME, 0); }
		public TerminalNode SYSTEM_VERSION() { return getToken(SqlBaseParser.SYSTEM_VERSION, 0); }
		public TerminalNode TABLES() { return getToken(SqlBaseParser.TABLES, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(SqlBaseParser.TABLESAMPLE, 0); }
		public TerminalNode TARGET() { return getToken(SqlBaseParser.TARGET, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(SqlBaseParser.TBLPROPERTIES, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode TERMINATED() { return getToken(SqlBaseParser.TERMINATED, 0); }
		public TerminalNode TIMEDIFF() { return getToken(SqlBaseParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SqlBaseParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ() { return getToken(SqlBaseParser.TIMESTAMP_LTZ, 0); }
		public TerminalNode TIMESTAMP_NTZ() { return getToken(SqlBaseParser.TIMESTAMP_NTZ, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(SqlBaseParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(SqlBaseParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TINYINT() { return getToken(SqlBaseParser.TINYINT, 0); }
		public TerminalNode TOUCH() { return getToken(SqlBaseParser.TOUCH, 0); }
		public TerminalNode TRANSACTION() { return getToken(SqlBaseParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONS() { return getToken(SqlBaseParser.TRANSACTIONS, 0); }
		public TerminalNode TRANSFORM() { return getToken(SqlBaseParser.TRANSFORM, 0); }
		public TerminalNode TRIM() { return getToken(SqlBaseParser.TRIM, 0); }
		public TerminalNode TRUE() { return getToken(SqlBaseParser.TRUE, 0); }
		public TerminalNode TRUNCATE() { return getToken(SqlBaseParser.TRUNCATE, 0); }
		public TerminalNode TRY_CAST() { return getToken(SqlBaseParser.TRY_CAST, 0); }
		public TerminalNode TYPE() { return getToken(SqlBaseParser.TYPE, 0); }
		public TerminalNode UNARCHIVE() { return getToken(SqlBaseParser.UNARCHIVE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(SqlBaseParser.UNBOUNDED, 0); }
		public TerminalNode UNCACHE() { return getToken(SqlBaseParser.UNCACHE, 0); }
		public TerminalNode UNLOCK() { return getToken(SqlBaseParser.UNLOCK, 0); }
		public TerminalNode UNPIVOT() { return getToken(SqlBaseParser.UNPIVOT, 0); }
		public TerminalNode UNSET() { return getToken(SqlBaseParser.UNSET, 0); }
		public TerminalNode UNTIL() { return getToken(SqlBaseParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(SqlBaseParser.UPDATE, 0); }
		public TerminalNode USE() { return getToken(SqlBaseParser.USE, 0); }
		public TerminalNode VALUE() { return getToken(SqlBaseParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(SqlBaseParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(SqlBaseParser.VARCHAR, 0); }
		public TerminalNode VAR() { return getToken(SqlBaseParser.VAR, 0); }
		public TerminalNode VARIABLE() { return getToken(SqlBaseParser.VARIABLE, 0); }
		public TerminalNode VARIANT() { return getToken(SqlBaseParser.VARIANT, 0); }
		public TerminalNode VERSION() { return getToken(SqlBaseParser.VERSION, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(SqlBaseParser.VIEWS, 0); }
		public TerminalNode VOID() { return getToken(SqlBaseParser.VOID, 0); }
		public TerminalNode WEEK() { return getToken(SqlBaseParser.WEEK, 0); }
		public TerminalNode WEEKS() { return getToken(SqlBaseParser.WEEKS, 0); }
		public TerminalNode WHILE() { return getToken(SqlBaseParser.WHILE, 0); }
		public TerminalNode WINDOW() { return getToken(SqlBaseParser.WINDOW, 0); }
		public TerminalNode YEAR() { return getToken(SqlBaseParser.YEAR, 0); }
		public TerminalNode YEARS() { return getToken(SqlBaseParser.YEARS, 0); }
		public TerminalNode ZONE() { return getToken(SqlBaseParser.ZONE, 0); }
		public AnsiNonReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ansiNonReserved; }
	}

	public final AnsiNonReservedContext ansiNonReserved() throws RecognitionException {
		AnsiNonReservedContext _localctx = new AnsiNonReservedContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_ansiNonReserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4551);
			_la = _input.LA(1);
			if ( !(((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & -7061838292949475977L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 4413517049876185057L) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & -2960581363508761L) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & -4612812564484587521L) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & -288248519200870401L) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & 129759912489112569L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StrictNonReservedContext extends ParserRuleContext {
		public TerminalNode ANTI() { return getToken(SqlBaseParser.ANTI, 0); }
		public TerminalNode CROSS() { return getToken(SqlBaseParser.CROSS, 0); }
		public TerminalNode EXCEPT() { return getToken(SqlBaseParser.EXCEPT, 0); }
		public TerminalNode FULL() { return getToken(SqlBaseParser.FULL, 0); }
		public TerminalNode INNER() { return getToken(SqlBaseParser.INNER, 0); }
		public TerminalNode INTERSECT() { return getToken(SqlBaseParser.INTERSECT, 0); }
		public TerminalNode JOIN() { return getToken(SqlBaseParser.JOIN, 0); }
		public TerminalNode LATERAL() { return getToken(SqlBaseParser.LATERAL, 0); }
		public TerminalNode LEFT() { return getToken(SqlBaseParser.LEFT, 0); }
		public TerminalNode NATURAL() { return getToken(SqlBaseParser.NATURAL, 0); }
		public TerminalNode ON() { return getToken(SqlBaseParser.ON, 0); }
		public TerminalNode RIGHT() { return getToken(SqlBaseParser.RIGHT, 0); }
		public TerminalNode SEMI() { return getToken(SqlBaseParser.SEMI, 0); }
		public TerminalNode SETMINUS() { return getToken(SqlBaseParser.SETMINUS, 0); }
		public TerminalNode UNION() { return getToken(SqlBaseParser.UNION, 0); }
		public TerminalNode USING() { return getToken(SqlBaseParser.USING, 0); }
		public StrictNonReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_strictNonReserved; }
	}

	public final StrictNonReservedContext strictNonReserved() throws RecognitionException {
		StrictNonReservedContext _localctx = new StrictNonReservedContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_strictNonReserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4553);
			_la = _input.LA(1);
			if ( !(_la==ANTI || _la==CROSS || ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & -9204794688358318079L) != 0) || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & 70506183131153L) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & 1064961L) != 0) || _la==UNION || _la==USING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NonReservedContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(SqlBaseParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(SqlBaseParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(SqlBaseParser.AGGREGATE, 0); }
		public TerminalNode ALL() { return getToken(SqlBaseParser.ALL, 0); }
		public TerminalNode ALTER() { return getToken(SqlBaseParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(SqlBaseParser.ALWAYS, 0); }
		public TerminalNode ANALYZE() { return getToken(SqlBaseParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(SqlBaseParser.AND, 0); }
		public TerminalNode ANY() { return getToken(SqlBaseParser.ANY, 0); }
		public TerminalNode ANY_VALUE() { return getToken(SqlBaseParser.ANY_VALUE, 0); }
		public TerminalNode ARCHIVE() { return getToken(SqlBaseParser.ARCHIVE, 0); }
		public TerminalNode ARRAY() { return getToken(SqlBaseParser.ARRAY, 0); }
		public TerminalNode AS() { return getToken(SqlBaseParser.AS, 0); }
		public TerminalNode ASC() { return getToken(SqlBaseParser.ASC, 0); }
		public TerminalNode AT() { return getToken(SqlBaseParser.AT, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(SqlBaseParser.AUTHORIZATION, 0); }
		public TerminalNode BEGIN() { return getToken(SqlBaseParser.BEGIN, 0); }
		public TerminalNode BETWEEN() { return getToken(SqlBaseParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(SqlBaseParser.BIGINT, 0); }
		public TerminalNode BINARY() { return getToken(SqlBaseParser.BINARY, 0); }
		public TerminalNode BINARY_HEX() { return getToken(SqlBaseParser.BINARY_HEX, 0); }
		public TerminalNode BINDING() { return getToken(SqlBaseParser.BINDING, 0); }
		public TerminalNode BOOLEAN() { return getToken(SqlBaseParser.BOOLEAN, 0); }
		public TerminalNode BOTH() { return getToken(SqlBaseParser.BOTH, 0); }
		public TerminalNode BUCKET() { return getToken(SqlBaseParser.BUCKET, 0); }
		public TerminalNode BUCKETS() { return getToken(SqlBaseParser.BUCKETS, 0); }
		public TerminalNode BY() { return getToken(SqlBaseParser.BY, 0); }
		public TerminalNode BYTE() { return getToken(SqlBaseParser.BYTE, 0); }
		public TerminalNode CACHE() { return getToken(SqlBaseParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(SqlBaseParser.CALL, 0); }
		public TerminalNode CALLED() { return getToken(SqlBaseParser.CALLED, 0); }
		public TerminalNode CASCADE() { return getToken(SqlBaseParser.CASCADE, 0); }
		public TerminalNode CASE() { return getToken(SqlBaseParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(SqlBaseParser.CAST, 0); }
		public TerminalNode CATALOG() { return getToken(SqlBaseParser.CATALOG, 0); }
		public TerminalNode CATALOGS() { return getToken(SqlBaseParser.CATALOGS, 0); }
		public TerminalNode CHANGE() { return getToken(SqlBaseParser.CHANGE, 0); }
		public TerminalNode CHAR() { return getToken(SqlBaseParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(SqlBaseParser.CHARACTER, 0); }
		public TerminalNode CHECK() { return getToken(SqlBaseParser.CHECK, 0); }
		public TerminalNode CLEAR() { return getToken(SqlBaseParser.CLEAR, 0); }
		public TerminalNode CLUSTER() { return getToken(SqlBaseParser.CLUSTER, 0); }
		public TerminalNode CLUSTERED() { return getToken(SqlBaseParser.CLUSTERED, 0); }
		public TerminalNode CODEGEN() { return getToken(SqlBaseParser.CODEGEN, 0); }
		public TerminalNode COLLATE() { return getToken(SqlBaseParser.COLLATE, 0); }
		public TerminalNode COLLATION() { return getToken(SqlBaseParser.COLLATION, 0); }
		public TerminalNode COLLECTION() { return getToken(SqlBaseParser.COLLECTION, 0); }
		public TerminalNode COLUMN() { return getToken(SqlBaseParser.COLUMN, 0); }
		public TerminalNode COLUMNS() { return getToken(SqlBaseParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(SqlBaseParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(SqlBaseParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(SqlBaseParser.COMPACT, 0); }
		public TerminalNode COMPACTIONS() { return getToken(SqlBaseParser.COMPACTIONS, 0); }
		public TerminalNode COMPENSATION() { return getToken(SqlBaseParser.COMPENSATION, 0); }
		public TerminalNode COMPUTE() { return getToken(SqlBaseParser.COMPUTE, 0); }
		public TerminalNode CONCATENATE() { return getToken(SqlBaseParser.CONCATENATE, 0); }
		public TerminalNode CONDITION() { return getToken(SqlBaseParser.CONDITION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SqlBaseParser.CONSTRAINT, 0); }
		public TerminalNode CONTAINS() { return getToken(SqlBaseParser.CONTAINS, 0); }
		public TerminalNode CONTINUE() { return getToken(SqlBaseParser.CONTINUE, 0); }
		public TerminalNode COST() { return getToken(SqlBaseParser.COST, 0); }
		public TerminalNode CREATE() { return getToken(SqlBaseParser.CREATE, 0); }
		public TerminalNode CUBE() { return getToken(SqlBaseParser.CUBE, 0); }
		public TerminalNode CURRENT() { return getToken(SqlBaseParser.CURRENT, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(SqlBaseParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(SqlBaseParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(SqlBaseParser.CURRENT_USER, 0); }
		public TerminalNode DATA() { return getToken(SqlBaseParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(SqlBaseParser.DATABASE, 0); }
		public TerminalNode DATABASES() { return getToken(SqlBaseParser.DATABASES, 0); }
		public TerminalNode DATE() { return getToken(SqlBaseParser.DATE, 0); }
		public TerminalNode DATEADD() { return getToken(SqlBaseParser.DATEADD, 0); }
		public TerminalNode DATE_ADD() { return getToken(SqlBaseParser.DATE_ADD, 0); }
		public TerminalNode DATEDIFF() { return getToken(SqlBaseParser.DATEDIFF, 0); }
		public TerminalNode DATE_DIFF() { return getToken(SqlBaseParser.DATE_DIFF, 0); }
		public TerminalNode DAY() { return getToken(SqlBaseParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(SqlBaseParser.DAYS, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(SqlBaseParser.DAYOFYEAR, 0); }
		public TerminalNode DBPROPERTIES() { return getToken(SqlBaseParser.DBPROPERTIES, 0); }
		public TerminalNode DEC() { return getToken(SqlBaseParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(SqlBaseParser.DECIMAL, 0); }
		public TerminalNode DECLARE() { return getToken(SqlBaseParser.DECLARE, 0); }
		public TerminalNode DEFAULT() { return getToken(SqlBaseParser.DEFAULT, 0); }
		public TerminalNode DEFINED() { return getToken(SqlBaseParser.DEFINED, 0); }
		public TerminalNode DEFINER() { return getToken(SqlBaseParser.DEFINER, 0); }
		public TerminalNode DELETE() { return getToken(SqlBaseParser.DELETE, 0); }
		public TerminalNode DELIMITED() { return getToken(SqlBaseParser.DELIMITED, 0); }
		public TerminalNode DESC() { return getToken(SqlBaseParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SqlBaseParser.DESCRIBE, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(SqlBaseParser.DETERMINISTIC, 0); }
		public TerminalNode DFS() { return getToken(SqlBaseParser.DFS, 0); }
		public TerminalNode DIRECTORIES() { return getToken(SqlBaseParser.DIRECTORIES, 0); }
		public TerminalNode DIRECTORY() { return getToken(SqlBaseParser.DIRECTORY, 0); }
		public TerminalNode DISTINCT() { return getToken(SqlBaseParser.DISTINCT, 0); }
		public TerminalNode DISTRIBUTE() { return getToken(SqlBaseParser.DISTRIBUTE, 0); }
		public TerminalNode DIV() { return getToken(SqlBaseParser.DIV, 0); }
		public TerminalNode DO() { return getToken(SqlBaseParser.DO, 0); }
		public TerminalNode DOUBLE() { return getToken(SqlBaseParser.DOUBLE, 0); }
		public TerminalNode DROP() { return getToken(SqlBaseParser.DROP, 0); }
		public TerminalNode ELSE() { return getToken(SqlBaseParser.ELSE, 0); }
		public TerminalNode ELSEIF() { return getToken(SqlBaseParser.ELSEIF, 0); }
		public TerminalNode END() { return getToken(SqlBaseParser.END, 0); }
		public TerminalNode ESCAPE() { return getToken(SqlBaseParser.ESCAPE, 0); }
		public TerminalNode ESCAPED() { return getToken(SqlBaseParser.ESCAPED, 0); }
		public TerminalNode EVOLUTION() { return getToken(SqlBaseParser.EVOLUTION, 0); }
		public TerminalNode EXCHANGE() { return getToken(SqlBaseParser.EXCHANGE, 0); }
		public TerminalNode EXCLUDE() { return getToken(SqlBaseParser.EXCLUDE, 0); }
		public TerminalNode EXECUTE() { return getToken(SqlBaseParser.EXECUTE, 0); }
		public TerminalNode EXISTS() { return getToken(SqlBaseParser.EXISTS, 0); }
		public TerminalNode EXIT() { return getToken(SqlBaseParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(SqlBaseParser.EXPLAIN, 0); }
		public TerminalNode EXPORT() { return getToken(SqlBaseParser.EXPORT, 0); }
		public TerminalNode EXTEND() { return getToken(SqlBaseParser.EXTEND, 0); }
		public TerminalNode EXTENDED() { return getToken(SqlBaseParser.EXTENDED, 0); }
		public TerminalNode EXTERNAL() { return getToken(SqlBaseParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(SqlBaseParser.EXTRACT, 0); }
		public TerminalNode FALSE() { return getToken(SqlBaseParser.FALSE, 0); }
		public TerminalNode FETCH() { return getToken(SqlBaseParser.FETCH, 0); }
		public TerminalNode FILTER() { return getToken(SqlBaseParser.FILTER, 0); }
		public TerminalNode FIELDS() { return getToken(SqlBaseParser.FIELDS, 0); }
		public TerminalNode FILEFORMAT() { return getToken(SqlBaseParser.FILEFORMAT, 0); }
		public TerminalNode FIRST() { return getToken(SqlBaseParser.FIRST, 0); }
		public TerminalNode FLOAT() { return getToken(SqlBaseParser.FLOAT, 0); }
		public TerminalNode FOLLOWING() { return getToken(SqlBaseParser.FOLLOWING, 0); }
		public TerminalNode FOR() { return getToken(SqlBaseParser.FOR, 0); }
		public TerminalNode FOREIGN() { return getToken(SqlBaseParser.FOREIGN, 0); }
		public TerminalNode FORMAT() { return getToken(SqlBaseParser.FORMAT, 0); }
		public TerminalNode FORMATTED() { return getToken(SqlBaseParser.FORMATTED, 0); }
		public TerminalNode FROM() { return getToken(SqlBaseParser.FROM, 0); }
		public TerminalNode FOUND() { return getToken(SqlBaseParser.FOUND, 0); }
		public TerminalNode FUNCTION() { return getToken(SqlBaseParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SqlBaseParser.FUNCTIONS, 0); }
		public TerminalNode GENERATED() { return getToken(SqlBaseParser.GENERATED, 0); }
		public TerminalNode GLOBAL() { return getToken(SqlBaseParser.GLOBAL, 0); }
		public TerminalNode GRANT() { return getToken(SqlBaseParser.GRANT, 0); }
		public TerminalNode GROUP() { return getToken(SqlBaseParser.GROUP, 0); }
		public TerminalNode GROUPING() { return getToken(SqlBaseParser.GROUPING, 0); }
		public TerminalNode HANDLER() { return getToken(SqlBaseParser.HANDLER, 0); }
		public TerminalNode HAVING() { return getToken(SqlBaseParser.HAVING, 0); }
		public TerminalNode HOUR() { return getToken(SqlBaseParser.HOUR, 0); }
		public TerminalNode HOURS() { return getToken(SqlBaseParser.HOURS, 0); }
		public TerminalNode IDENTIFIER_KW() { return getToken(SqlBaseParser.IDENTIFIER_KW, 0); }
		public TerminalNode IDENTITY() { return getToken(SqlBaseParser.IDENTITY, 0); }
		public TerminalNode IF() { return getToken(SqlBaseParser.IF, 0); }
		public TerminalNode IGNORE() { return getToken(SqlBaseParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SqlBaseParser.IMMEDIATE, 0); }
		public TerminalNode IMPORT() { return getToken(SqlBaseParser.IMPORT, 0); }
		public TerminalNode IN() { return getToken(SqlBaseParser.IN, 0); }
		public TerminalNode INCLUDE() { return getToken(SqlBaseParser.INCLUDE, 0); }
		public TerminalNode INCREMENT() { return getToken(SqlBaseParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(SqlBaseParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(SqlBaseParser.INDEXES, 0); }
		public TerminalNode INPATH() { return getToken(SqlBaseParser.INPATH, 0); }
		public TerminalNode INPUT() { return getToken(SqlBaseParser.INPUT, 0); }
		public TerminalNode INPUTFORMAT() { return getToken(SqlBaseParser.INPUTFORMAT, 0); }
		public TerminalNode INSERT() { return getToken(SqlBaseParser.INSERT, 0); }
		public TerminalNode INT() { return getToken(SqlBaseParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(SqlBaseParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(SqlBaseParser.INTERVAL, 0); }
		public TerminalNode INTO() { return getToken(SqlBaseParser.INTO, 0); }
		public TerminalNode INVOKER() { return getToken(SqlBaseParser.INVOKER, 0); }
		public TerminalNode IS() { return getToken(SqlBaseParser.IS, 0); }
		public TerminalNode ITEMS() { return getToken(SqlBaseParser.ITEMS, 0); }
		public TerminalNode ITERATE() { return getToken(SqlBaseParser.ITERATE, 0); }
		public TerminalNode JSON() { return getToken(SqlBaseParser.JSON, 0); }
		public TerminalNode KEYS() { return getToken(SqlBaseParser.KEYS, 0); }
		public TerminalNode LANGUAGE() { return getToken(SqlBaseParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(SqlBaseParser.LAST, 0); }
		public TerminalNode LAZY() { return getToken(SqlBaseParser.LAZY, 0); }
		public TerminalNode LEADING() { return getToken(SqlBaseParser.LEADING, 0); }
		public TerminalNode LEAVE() { return getToken(SqlBaseParser.LEAVE, 0); }
		public TerminalNode LIKE() { return getToken(SqlBaseParser.LIKE, 0); }
		public TerminalNode LONG() { return getToken(SqlBaseParser.LONG, 0); }
		public TerminalNode ILIKE() { return getToken(SqlBaseParser.ILIKE, 0); }
		public TerminalNode LIMIT() { return getToken(SqlBaseParser.LIMIT, 0); }
		public TerminalNode LINES() { return getToken(SqlBaseParser.LINES, 0); }
		public TerminalNode LIST() { return getToken(SqlBaseParser.LIST, 0); }
		public TerminalNode LOAD() { return getToken(SqlBaseParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(SqlBaseParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(SqlBaseParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(SqlBaseParser.LOCK, 0); }
		public TerminalNode LOCKS() { return getToken(SqlBaseParser.LOCKS, 0); }
		public TerminalNode LOGICAL() { return getToken(SqlBaseParser.LOGICAL, 0); }
		public TerminalNode LOOP() { return getToken(SqlBaseParser.LOOP, 0); }
		public TerminalNode MACRO() { return getToken(SqlBaseParser.MACRO, 0); }
		public TerminalNode MAP() { return getToken(SqlBaseParser.MAP, 0); }
		public TerminalNode MATCHED() { return getToken(SqlBaseParser.MATCHED, 0); }
		public TerminalNode MERGE() { return getToken(SqlBaseParser.MERGE, 0); }
		public TerminalNode MICROSECOND() { return getToken(SqlBaseParser.MICROSECOND, 0); }
		public TerminalNode MICROSECONDS() { return getToken(SqlBaseParser.MICROSECONDS, 0); }
		public TerminalNode MILLISECOND() { return getToken(SqlBaseParser.MILLISECOND, 0); }
		public TerminalNode MILLISECONDS() { return getToken(SqlBaseParser.MILLISECONDS, 0); }
		public TerminalNode MINUTE() { return getToken(SqlBaseParser.MINUTE, 0); }
		public TerminalNode MINUTES() { return getToken(SqlBaseParser.MINUTES, 0); }
		public TerminalNode MODIFIES() { return getToken(SqlBaseParser.MODIFIES, 0); }
		public TerminalNode MONTH() { return getToken(SqlBaseParser.MONTH, 0); }
		public TerminalNode MONTHS() { return getToken(SqlBaseParser.MONTHS, 0); }
		public TerminalNode MSCK() { return getToken(SqlBaseParser.MSCK, 0); }
		public TerminalNode NAME() { return getToken(SqlBaseParser.NAME, 0); }
		public TerminalNode NAMESPACE() { return getToken(SqlBaseParser.NAMESPACE, 0); }
		public TerminalNode NAMESPACES() { return getToken(SqlBaseParser.NAMESPACES, 0); }
		public TerminalNode NANOSECOND() { return getToken(SqlBaseParser.NANOSECOND, 0); }
		public TerminalNode NANOSECONDS() { return getToken(SqlBaseParser.NANOSECONDS, 0); }
		public TerminalNode NO() { return getToken(SqlBaseParser.NO, 0); }
		public TerminalNode NONE() { return getToken(SqlBaseParser.NONE, 0); }
		public TerminalNode NOT() { return getToken(SqlBaseParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(SqlBaseParser.NULL, 0); }
		public TerminalNode NULLS() { return getToken(SqlBaseParser.NULLS, 0); }
		public TerminalNode NUMERIC() { return getToken(SqlBaseParser.NUMERIC, 0); }
		public TerminalNode OF() { return getToken(SqlBaseParser.OF, 0); }
		public TerminalNode OFFSET() { return getToken(SqlBaseParser.OFFSET, 0); }
		public TerminalNode ONLY() { return getToken(SqlBaseParser.ONLY, 0); }
		public TerminalNode OPTION() { return getToken(SqlBaseParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(SqlBaseParser.OPTIONS, 0); }
		public TerminalNode OR() { return getToken(SqlBaseParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(SqlBaseParser.ORDER, 0); }
		public TerminalNode OUT() { return getToken(SqlBaseParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(SqlBaseParser.OUTER, 0); }
		public TerminalNode OUTPUTFORMAT() { return getToken(SqlBaseParser.OUTPUTFORMAT, 0); }
		public TerminalNode OVER() { return getToken(SqlBaseParser.OVER, 0); }
		public TerminalNode OVERLAPS() { return getToken(SqlBaseParser.OVERLAPS, 0); }
		public TerminalNode OVERLAY() { return getToken(SqlBaseParser.OVERLAY, 0); }
		public TerminalNode OVERWRITE() { return getToken(SqlBaseParser.OVERWRITE, 0); }
		public TerminalNode PARTITION() { return getToken(SqlBaseParser.PARTITION, 0); }
		public TerminalNode PARTITIONED() { return getToken(SqlBaseParser.PARTITIONED, 0); }
		public TerminalNode PARTITIONS() { return getToken(SqlBaseParser.PARTITIONS, 0); }
		public TerminalNode PERCENTLIT() { return getToken(SqlBaseParser.PERCENTLIT, 0); }
		public TerminalNode PIVOT() { return getToken(SqlBaseParser.PIVOT, 0); }
		public TerminalNode PLACING() { return getToken(SqlBaseParser.PLACING, 0); }
		public TerminalNode POSITION() { return getToken(SqlBaseParser.POSITION, 0); }
		public TerminalNode PRECEDING() { return getToken(SqlBaseParser.PRECEDING, 0); }
		public TerminalNode PRIMARY() { return getToken(SqlBaseParser.PRIMARY, 0); }
		public TerminalNode PRINCIPALS() { return getToken(SqlBaseParser.PRINCIPALS, 0); }
		public TerminalNode PROPERTIES() { return getToken(SqlBaseParser.PROPERTIES, 0); }
		public TerminalNode PURGE() { return getToken(SqlBaseParser.PURGE, 0); }
		public TerminalNode QUARTER() { return getToken(SqlBaseParser.QUARTER, 0); }
		public TerminalNode QUERY() { return getToken(SqlBaseParser.QUERY, 0); }
		public TerminalNode RANGE() { return getToken(SqlBaseParser.RANGE, 0); }
		public TerminalNode READS() { return getToken(SqlBaseParser.READS, 0); }
		public TerminalNode REAL() { return getToken(SqlBaseParser.REAL, 0); }
		public TerminalNode RECORDREADER() { return getToken(SqlBaseParser.RECORDREADER, 0); }
		public TerminalNode RECORDWRITER() { return getToken(SqlBaseParser.RECORDWRITER, 0); }
		public TerminalNode RECOVER() { return getToken(SqlBaseParser.RECOVER, 0); }
		public TerminalNode RECURSIVE() { return getToken(SqlBaseParser.RECURSIVE, 0); }
		public TerminalNode REDUCE() { return getToken(SqlBaseParser.REDUCE, 0); }
		public TerminalNode REFERENCES() { return getToken(SqlBaseParser.REFERENCES, 0); }
		public TerminalNode REFRESH() { return getToken(SqlBaseParser.REFRESH, 0); }
		public TerminalNode RENAME() { return getToken(SqlBaseParser.RENAME, 0); }
		public TerminalNode REPAIR() { return getToken(SqlBaseParser.REPAIR, 0); }
		public TerminalNode REPEAT() { return getToken(SqlBaseParser.REPEAT, 0); }
		public TerminalNode REPEATABLE() { return getToken(SqlBaseParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(SqlBaseParser.REPLACE, 0); }
		public TerminalNode RESET() { return getToken(SqlBaseParser.RESET, 0); }
		public TerminalNode RESPECT() { return getToken(SqlBaseParser.RESPECT, 0); }
		public TerminalNode RESTRICT() { return getToken(SqlBaseParser.RESTRICT, 0); }
		public TerminalNode RETURN() { return getToken(SqlBaseParser.RETURN, 0); }
		public TerminalNode RETURNS() { return getToken(SqlBaseParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(SqlBaseParser.REVOKE, 0); }
		public TerminalNode RLIKE() { return getToken(SqlBaseParser.RLIKE, 0); }
		public TerminalNode ROLE() { return getToken(SqlBaseParser.ROLE, 0); }
		public TerminalNode ROLES() { return getToken(SqlBaseParser.ROLES, 0); }
		public TerminalNode ROLLBACK() { return getToken(SqlBaseParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(SqlBaseParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(SqlBaseParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(SqlBaseParser.ROWS, 0); }
		public TerminalNode SCHEMA() { return getToken(SqlBaseParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(SqlBaseParser.SCHEMAS, 0); }
		public TerminalNode SECOND() { return getToken(SqlBaseParser.SECOND, 0); }
		public TerminalNode SECONDS() { return getToken(SqlBaseParser.SECONDS, 0); }
		public TerminalNode SECURITY() { return getToken(SqlBaseParser.SECURITY, 0); }
		public TerminalNode SELECT() { return getToken(SqlBaseParser.SELECT, 0); }
		public TerminalNode SEPARATED() { return getToken(SqlBaseParser.SEPARATED, 0); }
		public TerminalNode SERDE() { return getToken(SqlBaseParser.SERDE, 0); }
		public TerminalNode SERDEPROPERTIES() { return getToken(SqlBaseParser.SERDEPROPERTIES, 0); }
		public TerminalNode SESSION_USER() { return getToken(SqlBaseParser.SESSION_USER, 0); }
		public TerminalNode SET() { return getToken(SqlBaseParser.SET, 0); }
		public TerminalNode SETS() { return getToken(SqlBaseParser.SETS, 0); }
		public TerminalNode SHORT() { return getToken(SqlBaseParser.SHORT, 0); }
		public TerminalNode SHOW() { return getToken(SqlBaseParser.SHOW, 0); }
		public TerminalNode SINGLE() { return getToken(SqlBaseParser.SINGLE, 0); }
		public TerminalNode SKEWED() { return getToken(SqlBaseParser.SKEWED, 0); }
		public TerminalNode SMALLINT() { return getToken(SqlBaseParser.SMALLINT, 0); }
		public TerminalNode SOME() { return getToken(SqlBaseParser.SOME, 0); }
		public TerminalNode SORT() { return getToken(SqlBaseParser.SORT, 0); }
		public TerminalNode SORTED() { return getToken(SqlBaseParser.SORTED, 0); }
		public TerminalNode SOURCE() { return getToken(SqlBaseParser.SOURCE, 0); }
		public TerminalNode SPECIFIC() { return getToken(SqlBaseParser.SPECIFIC, 0); }
		public TerminalNode SQL() { return getToken(SqlBaseParser.SQL, 0); }
		public TerminalNode SQLEXCEPTION() { return getToken(SqlBaseParser.SQLEXCEPTION, 0); }
		public TerminalNode SQLSTATE() { return getToken(SqlBaseParser.SQLSTATE, 0); }
		public TerminalNode START() { return getToken(SqlBaseParser.START, 0); }
		public TerminalNode STATISTICS() { return getToken(SqlBaseParser.STATISTICS, 0); }
		public TerminalNode STORED() { return getToken(SqlBaseParser.STORED, 0); }
		public TerminalNode STRATIFY() { return getToken(SqlBaseParser.STRATIFY, 0); }
		public TerminalNode STRING() { return getToken(SqlBaseParser.STRING, 0); }
		public TerminalNode STRUCT() { return getToken(SqlBaseParser.STRUCT, 0); }
		public TerminalNode SUBSTR() { return getToken(SqlBaseParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(SqlBaseParser.SUBSTRING, 0); }
		public TerminalNode SYNC() { return getToken(SqlBaseParser.SYNC, 0); }
		public TerminalNode SYSTEM_TIME() { return getToken(SqlBaseParser.SYSTEM_TIME, 0); }
		public TerminalNode SYSTEM_VERSION() { return getToken(SqlBaseParser.SYSTEM_VERSION, 0); }
		public TerminalNode TABLE() { return getToken(SqlBaseParser.TABLE, 0); }
		public TerminalNode TABLES() { return getToken(SqlBaseParser.TABLES, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(SqlBaseParser.TABLESAMPLE, 0); }
		public TerminalNode TARGET() { return getToken(SqlBaseParser.TARGET, 0); }
		public TerminalNode TBLPROPERTIES() { return getToken(SqlBaseParser.TBLPROPERTIES, 0); }
		public TerminalNode TEMPORARY() { return getToken(SqlBaseParser.TEMPORARY, 0); }
		public TerminalNode TERMINATED() { return getToken(SqlBaseParser.TERMINATED, 0); }
		public TerminalNode THEN() { return getToken(SqlBaseParser.THEN, 0); }
		public TerminalNode TIME() { return getToken(SqlBaseParser.TIME, 0); }
		public TerminalNode TIMEDIFF() { return getToken(SqlBaseParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SqlBaseParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ() { return getToken(SqlBaseParser.TIMESTAMP_LTZ, 0); }
		public TerminalNode TIMESTAMP_NTZ() { return getToken(SqlBaseParser.TIMESTAMP_NTZ, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(SqlBaseParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(SqlBaseParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TINYINT() { return getToken(SqlBaseParser.TINYINT, 0); }
		public TerminalNode TO() { return getToken(SqlBaseParser.TO, 0); }
		public TerminalNode TOUCH() { return getToken(SqlBaseParser.TOUCH, 0); }
		public TerminalNode TRAILING() { return getToken(SqlBaseParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(SqlBaseParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONS() { return getToken(SqlBaseParser.TRANSACTIONS, 0); }
		public TerminalNode TRANSFORM() { return getToken(SqlBaseParser.TRANSFORM, 0); }
		public TerminalNode TRIM() { return getToken(SqlBaseParser.TRIM, 0); }
		public TerminalNode TRUE() { return getToken(SqlBaseParser.TRUE, 0); }
		public TerminalNode TRUNCATE() { return getToken(SqlBaseParser.TRUNCATE, 0); }
		public TerminalNode TRY_CAST() { return getToken(SqlBaseParser.TRY_CAST, 0); }
		public TerminalNode TYPE() { return getToken(SqlBaseParser.TYPE, 0); }
		public TerminalNode UNARCHIVE() { return getToken(SqlBaseParser.UNARCHIVE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(SqlBaseParser.UNBOUNDED, 0); }
		public TerminalNode UNCACHE() { return getToken(SqlBaseParser.UNCACHE, 0); }
		public TerminalNode UNIQUE() { return getToken(SqlBaseParser.UNIQUE, 0); }
		public TerminalNode UNKNOWN() { return getToken(SqlBaseParser.UNKNOWN, 0); }
		public TerminalNode UNLOCK() { return getToken(SqlBaseParser.UNLOCK, 0); }
		public TerminalNode UNPIVOT() { return getToken(SqlBaseParser.UNPIVOT, 0); }
		public TerminalNode UNSET() { return getToken(SqlBaseParser.UNSET, 0); }
		public TerminalNode UNTIL() { return getToken(SqlBaseParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(SqlBaseParser.UPDATE, 0); }
		public TerminalNode USE() { return getToken(SqlBaseParser.USE, 0); }
		public TerminalNode USER() { return getToken(SqlBaseParser.USER, 0); }
		public TerminalNode VALUE() { return getToken(SqlBaseParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(SqlBaseParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(SqlBaseParser.VARCHAR, 0); }
		public TerminalNode VAR() { return getToken(SqlBaseParser.VAR, 0); }
		public TerminalNode VARIABLE() { return getToken(SqlBaseParser.VARIABLE, 0); }
		public TerminalNode VARIANT() { return getToken(SqlBaseParser.VARIANT, 0); }
		public TerminalNode VERSION() { return getToken(SqlBaseParser.VERSION, 0); }
		public TerminalNode VIEW() { return getToken(SqlBaseParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(SqlBaseParser.VIEWS, 0); }
		public TerminalNode VOID() { return getToken(SqlBaseParser.VOID, 0); }
		public TerminalNode WEEK() { return getToken(SqlBaseParser.WEEK, 0); }
		public TerminalNode WEEKS() { return getToken(SqlBaseParser.WEEKS, 0); }
		public TerminalNode WHILE() { return getToken(SqlBaseParser.WHILE, 0); }
		public TerminalNode WHEN() { return getToken(SqlBaseParser.WHEN, 0); }
		public TerminalNode WHERE() { return getToken(SqlBaseParser.WHERE, 0); }
		public TerminalNode WINDOW() { return getToken(SqlBaseParser.WINDOW, 0); }
		public TerminalNode WITH() { return getToken(SqlBaseParser.WITH, 0); }
		public TerminalNode WITHIN() { return getToken(SqlBaseParser.WITHIN, 0); }
		public TerminalNode YEAR() { return getToken(SqlBaseParser.YEAR, 0); }
		public TerminalNode YEARS() { return getToken(SqlBaseParser.YEARS, 0); }
		public TerminalNode ZONE() { return getToken(SqlBaseParser.ZONE, 0); }
		public NonReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReserved; }
	}

	public final NonReservedContext nonReserved() throws RecognitionException {
		NonReservedContext _localctx = new NonReservedContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_nonReserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4555);
			_la = _input.LA(1);
			if ( !(((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & -4611686018427388161L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & -8796093022209L) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & -2396944206921745L) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & -537919489L) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & -8724160513L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & 288230307365126143L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 79:
			return queryTerm_sempred((QueryTermContext)_localctx, predIndex);
		case 164:
			return booleanExpression_sempred((BooleanExpressionContext)_localctx, predIndex);
		case 167:
			return valueExpression_sempred((ValueExpressionContext)_localctx, predIndex);
		case 170:
			return primaryExpression_sempred((PrimaryExpressionContext)_localctx, predIndex);
		case 224:
			return identifier_sempred((IdentifierContext)_localctx, predIndex);
		case 225:
			return strictIdentifier_sempred((StrictIdentifierContext)_localctx, predIndex);
		case 226:
			return quotedIdentifier_sempred((QuotedIdentifierContext)_localctx, predIndex);
		case 228:
			return number_sempred((NumberContext)_localctx, predIndex);
		case 232:
			return stringLit_sempred((StringLitContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean queryTerm_sempred(QueryTermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 4);
		case 1:
			return legacy_setops_precedence_enabled;
		case 2:
			return precpred(_ctx, 3);
		case 3:
			return !legacy_setops_precedence_enabled;
		case 4:
			return precpred(_ctx, 2);
		case 5:
			return !legacy_setops_precedence_enabled;
		case 6:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean booleanExpression_sempred(BooleanExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 2);
		case 8:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean valueExpression_sempred(ValueExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return precpred(_ctx, 7);
		case 10:
			return precpred(_ctx, 6);
		case 11:
			return precpred(_ctx, 5);
		case 12:
			return precpred(_ctx, 4);
		case 13:
			return precpred(_ctx, 3);
		case 14:
			return precpred(_ctx, 2);
		case 15:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean primaryExpression_sempred(PrimaryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16:
			return precpred(_ctx, 23);
		case 17:
			return precpred(_ctx, 22);
		case 18:
			return precpred(_ctx, 8);
		case 19:
			return precpred(_ctx, 6);
		}
		return true;
	}
	private boolean identifier_sempred(IdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20:
			return !SQL_standard_keyword_behavior;
		}
		return true;
	}
	private boolean strictIdentifier_sempred(StrictIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21:
			return SQL_standard_keyword_behavior;
		case 22:
			return !SQL_standard_keyword_behavior;
		}
		return true;
	}
	private boolean quotedIdentifier_sempred(QuotedIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23:
			return double_quoted_identifiers;
		}
		return true;
	}
	private boolean number_sempred(NumberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24:
			return !legacy_exponent_literal_as_decimal_enabled;
		case 25:
			return !legacy_exponent_literal_as_decimal_enabled;
		case 26:
			return legacy_exponent_literal_as_decimal_enabled;
		}
		return true;
	}
	private boolean stringLit_sempred(StringLitContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27:
			return !double_quoted_identifiers;
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u01b0\u11ce\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0001\u0000\u0001\u0000\u0003\u0000\u01e3\b\u0000\u0001\u0001\u0001"+
		"\u0001\u0003\u0001\u01e7\b\u0001\u0001\u0001\u0001\u0001\u0003\u0001\u01eb"+
		"\b\u0001\u0001\u0001\u0001\u0001\u0001\u0002\u0003\u0002\u01f0\b\u0002"+
		"\u0001\u0002\u0001\u0002\u0003\u0002\u01f4\b\u0002\u0001\u0002\u0001\u0002"+
		"\u0003\u0002\u01f8\b\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0004\u0003"+
		"\u01fd\b\u0003\u000b\u0003\f\u0003\u01fe\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0003\u0004\u020e"+
		"\b\u0004\u0001\u0005\u0001\u0005\u0003\u0005\u0212\b\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0003\u0005\u0217\b\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0003\u0005\u0221\b\u0005\u0001\u0006\u0001\u0006\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u022b\b\u0007"+
		"\u0001\u0007\u0003\u0007\u022e\b\u0007\u0001\b\u0001\b\u0003\b\u0232\b"+
		"\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0003\b\u0239\b\b\u0001\t\u0001"+
		"\t\u0001\t\u0005\t\u023e\b\t\n\t\f\t\u0241\t\t\u0001\n\u0001\n\u0001\n"+
		"\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u024b\b\n\u0001\u000b"+
		"\u0003\u000b\u024e\b\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b"+
		"\u0001\u000b\u0001\u000b\u0001\u000b\u0003\u000b\u0257\b\u000b\u0001\f"+
		"\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0005"+
		"\f\u0262\b\f\n\f\f\f\u0265\t\f\u0001\f\u0001\f\u0003\f\u0269\b\f\u0001"+
		"\f\u0001\f\u0001\f\u0001\r\u0003\r\u026f\b\r\u0001\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0003\r\u0278\b\r\u0001\u000e\u0001\u000e\u0001"+
		"\u000e\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010\u0001"+
		"\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0004\u0010\u0286\b\u0010\u000b"+
		"\u0010\f\u0010\u0287\u0001\u0010\u0001\u0010\u0003\u0010\u028c\b\u0010"+
		"\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010"+
		"\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0004\u0010\u0298\b\u0010"+
		"\u000b\u0010\f\u0010\u0299\u0001\u0010\u0001\u0010\u0003\u0010\u029e\b"+
		"\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010\u02a3\b\u0010\u0001"+
		"\u0011\u0003\u0011\u02a6\b\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001"+
		"\u0011\u0001\u0011\u0003\u0011\u02ad\b\u0011\u0001\u0012\u0003\u0012\u02b0"+
		"\b\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003\u0012\u02b6"+
		"\b\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001"+
		"\u0012\u0003\u0012\u02be\b\u0012\u0001\u0013\u0001\u0013\u0003\u0013\u02c2"+
		"\b\u0013\u0001\u0013\u0005\u0013\u02c5\b\u0013\n\u0013\f\u0013\u02c8\t"+
		"\u0013\u0001\u0013\u0001\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0001"+
		"\u0015\u0001\u0015\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0017\u0001"+
		"\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0019\u0001"+
		"\u0019\u0001\u0019\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001b\u0001"+
		"\u001b\u0001\u001b\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u02e6"+
		"\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u02f8"+
		"\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0005\u001c\u0300\b\u001c\n\u001c\f\u001c\u0303\t\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c"+
		"\u031d\b\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0321\b\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0327\b\u001c\u0001"+
		"\u001c\u0003\u001c\u032a\b\u001c\u0001\u001c\u0003\u001c\u032d\b\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c"+
		"\u0334\b\u001c\u0001\u001c\u0003\u001c\u0337\b\u001c\u0001\u001c\u0001"+
		"\u001c\u0003\u001c\u033b\b\u001c\u0001\u001c\u0003\u001c\u033e\b\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0003\u001c\u0346\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0005\u001c"+
		"\u0351\b\u001c\n\u001c\f\u001c\u0354\t\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u035b\b\u001c\u0001\u001c\u0003"+
		"\u001c\u035e\b\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0362\b\u001c"+
		"\u0001\u001c\u0003\u001c\u0365\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u036b\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0003\u001c\u0376\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0003\u001c\u037c\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c"+
		"\u0381\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u03a3\b\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u03b0\b\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c"+
		"\u03c9\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0003\u001c\u03d2\b\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u03da\b\u001c"+
		"\u0001\u001c\u0001\u001c\u0003\u001c\u03de\b\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u03e3\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u03e9\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u03f5\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u03fd\b\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0403\b\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c"+
		"\u0411\b\u001c\u0001\u001c\u0004\u001c\u0414\b\u001c\u000b\u001c\f\u001c"+
		"\u0415\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0426\b\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0005\u001c\u042b\b\u001c\n\u001c\f\u001c\u042e\t\u001c"+
		"\u0001\u001c\u0003\u001c\u0431\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u0437\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u0449\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0003\u001c\u0454\b\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0458\b"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u045e"+
		"\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0464"+
		"\b\u001c\u0001\u001c\u0003\u001c\u0467\b\u001c\u0001\u001c\u0003\u001c"+
		"\u046a\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0003\u001c\u0471\b\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0475\b"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0005\u001c\u047f\b\u001c\n\u001c\f\u001c"+
		"\u0482\t\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u048a\b\u001c\u0001\u001c\u0003\u001c\u048d\b"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0003\u001c\u0496\b\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0003\u001c\u049b\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0003\u001c\u04a1\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0003\u001c\u04ad\b\u001c\u0001\u001c\u0003\u001c\u04b0\b\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c"+
		"\u04b7\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0005\u001c\u04c0\b\u001c\n\u001c\f\u001c\u04c3"+
		"\t\u001c\u0003\u001c\u04c5\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0003\u001c\u04ca\b\u001c\u0001\u001c\u0003\u001c\u04cd\b\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u04d4"+
		"\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u04d9\b\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0003\u001c\u04e3\b\u001c\u0003\u001c\u04e5\b"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u04eb"+
		"\b\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u04ef\b\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0003\u001c\u04f4\b\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0003\u001c\u04fa\b\u001c\u0001\u001c\u0003\u001c"+
		"\u04fd\b\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0501\b\u001c\u0001"+
		"\u001c\u0003\u001c\u0504\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0003\u001c\u050b\b\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0003\u001c\u0511\b\u001c\u0001\u001c\u0001\u001c\u0003"+
		"\u001c\u0515\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003"+
		"\u001c\u051b\b\u001c\u0001\u001c\u0003\u001c\u051e\b\u001c\u0001\u001c"+
		"\u0003\u001c\u0521\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u0528\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0003\u001c\u052d\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0536\b\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c"+
		"\u053e\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c"+
		"\u0544\b\u001c\u0001\u001c\u0003\u001c\u0547\b\u001c\u0001\u001c\u0003"+
		"\u001c\u054a\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003"+
		"\u001c\u0550\b\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0554\b\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0559\b\u001c\u0001\u001c"+
		"\u0003\u001c\u055c\b\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0560\b"+
		"\u001c\u0003\u001c\u0562\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u056a\b\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0572"+
		"\b\u001c\u0001\u001c\u0003\u001c\u0575\b\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u057a\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u0580\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u0586\b\u001c\u0001\u001c\u0003\u001c\u0589\b"+
		"\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u058d\b\u001c\u0001\u001c\u0003"+
		"\u001c\u0590\b\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0594\b\u001c"+
		"\u0001\u001c\u0001\u001c\u0003\u001c\u0598\b\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0005\u001c\u05b2\b\u001c"+
		"\n\u001c\f\u001c\u05b5\t\u001c\u0003\u001c\u05b7\b\u001c\u0001\u001c\u0001"+
		"\u001c\u0003\u001c\u05bb\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0003\u001c\u05c1\b\u001c\u0001\u001c\u0003\u001c\u05c4\b\u001c"+
		"\u0001\u001c\u0003\u001c\u05c7\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u05cd\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u05d5\b\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0003\u001c\u05da\b\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0003\u001c\u05e0\b\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0003\u001c\u05e6\b\u001c\u0001\u001c\u0003\u001c"+
		"\u05e9\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0003\u001c\u05f0\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0005\u001c"+
		"\u05f5\b\u001c\n\u001c\f\u001c\u05f8\t\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0600\b\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0605\b\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0003\u001c\u060a\b\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0611\b\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u0617\b\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0003\u001c\u061c\b\u001c\u0001\u001c\u0001\u001c\u0001"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0005"+
		"\u001c\u0626\b\u001c\n\u001c\f\u001c\u0629\t\u001c\u0003\u001c\u062b\b"+
		"\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0005\u001c\u0631"+
		"\b\u001c\n\u001c\f\u001c\u0634\t\u001c\u0003\u001c\u0636\b\u001c\u0001"+
		"\u001d\u0001\u001d\u0001\u001d\u0005\u001d\u063b\b\u001d\n\u001d\f\u001d"+
		"\u063e\t\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d"+
		"\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d"+
		"\u0001\u001d\u0005\u001d\u064c\b\u001d\n\u001d\f\u001d\u064f\t\u001d\u0001"+
		"\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001"+
		"\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001"+
		"\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001"+
		"\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001d\u0668"+
		"\b\u001d\n\u001d\f\u001d\u066b\t\u001d\u0003\u001d\u066d\b\u001d\u0001"+
		"\u001d\u0001\u001d\u0005\u001d\u0671\b\u001d\n\u001d\f\u001d\u0674\t\u001d"+
		"\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0005\u001d\u067a\b\u001d"+
		"\n\u001d\f\u001d\u067d\t\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001"+
		"\u001d\u0005\u001d\u0683\b\u001d\n\u001d\f\u001d\u0686\t\u001d\u0003\u001d"+
		"\u0688\b\u001d\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e"+
		"\u0003\u001e\u068f\b\u001e\u0001\u001e\u0003\u001e\u0692\b\u001e\u0001"+
		"\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001"+
		"\u001f\u0003\u001f\u069b\b\u001f\u0001 \u0001 \u0003 \u069f\b \u0001!"+
		"\u0001!\u0003!\u06a3\b!\u0001!\u0001!\u0003!\u06a7\b!\u0001\"\u0001\""+
		"\u0001\"\u0005\"\u06ac\b\"\n\"\f\"\u06af\t\"\u0001#\u0001#\u0003#\u06b3"+
		"\b#\u0001$\u0001$\u0001%\u0001%\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0003&\u06bf\b&\u0001&\u0001&\u0003&\u06c3\b&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0003&\u06ca\b&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0003&\u073e\b&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0001&\u0003&\u0746\b&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0003&\u074e\b&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0003&\u0757\b&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0003&\u0761\b&\u0001\'\u0001\'\u0003\'\u0765\b\'\u0001"+
		"\'\u0003\'\u0768\b\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0003\'\u076f"+
		"\b\'\u0001\'\u0001\'\u0001(\u0001(\u0003(\u0775\b(\u0001(\u0001(\u0001"+
		"(\u0001(\u0001)\u0001)\u0001)\u0001)\u0001)\u0001)\u0001*\u0001*\u0001"+
		"*\u0001*\u0001*\u0001*\u0003*\u0787\b*\u0001*\u0001*\u0001*\u0001*\u0001"+
		"+\u0001+\u0001+\u0001+\u0001+\u0001+\u0003+\u0793\b+\u0001+\u0001+\u0001"+
		"+\u0003+\u0798\b+\u0001,\u0001,\u0001,\u0001-\u0001-\u0001-\u0001-\u0001"+
		"-\u0001-\u0001-\u0003-\u07a4\b-\u0001.\u0001.\u0001.\u0001/\u0001/\u0001"+
		"/\u00010\u00030\u07ad\b0\u00010\u00010\u00010\u00011\u00011\u00011\u0003"+
		"1\u07b5\b1\u00011\u00011\u00031\u07b9\b1\u00011\u00011\u00011\u00011\u0001"+
		"1\u00031\u07c0\b1\u00031\u07c2\b1\u00011\u00011\u00011\u00031\u07c7\b"+
		"1\u00011\u00011\u00011\u00031\u07cc\b1\u00011\u00011\u00031\u07d0\b1\u0001"+
		"1\u00031\u07d3\b1\u00011\u00011\u00011\u00011\u00031\u07d9\b1\u00011\u0001"+
		"1\u00011\u00031\u07de\b1\u00011\u00011\u00011\u00031\u07e3\b1\u00011\u0001"+
		"1\u00031\u07e7\b1\u00011\u00011\u00011\u00011\u00011\u00011\u00031\u07ef"+
		"\b1\u00011\u00011\u00011\u00031\u07f4\b1\u00011\u00031\u07f7\b1\u0001"+
		"1\u00011\u00011\u00031\u07fc\b1\u00011\u00011\u00031\u0800\b1\u00011\u0001"+
		"1\u00011\u00031\u0805\b1\u00031\u0807\b1\u00012\u00012\u00032\u080b\b"+
		"2\u00013\u00013\u00013\u00013\u00013\u00053\u0812\b3\n3\f3\u0815\t3\u0001"+
		"3\u00013\u00014\u00014\u00014\u00034\u081c\b4\u00014\u00014\u00014\u0001"+
		"4\u00034\u0822\b4\u00015\u00015\u00016\u00016\u00017\u00017\u00018\u0001"+
		"8\u00018\u00018\u00018\u00018\u00018\u00038\u0831\b8\u00019\u00019\u0001"+
		"9\u00059\u0836\b9\n9\f9\u0839\t9\u0001:\u0001:\u0003:\u083d\b:\u0001:"+
		"\u0001:\u0001:\u0005:\u0842\b:\n:\f:\u0845\t:\u0001;\u0001;\u0003;\u0849"+
		"\b;\u0001;\u0003;\u084c\b;\u0001;\u0001;\u0001;\u0001;\u0001<\u0001<\u0001"+
		"<\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001"+
		"=\u0001=\u0001=\u0001=\u0001=\u0001=\u0005=\u0864\b=\n=\f=\u0867\t=\u0001"+
		">\u0001>\u0001>\u0001>\u0005>\u086d\b>\n>\f>\u0870\t>\u0001>\u0001>\u0001"+
		"?\u0001?\u0003?\u0876\b?\u0001?\u0003?\u0879\b?\u0001@\u0001@\u0001@\u0005"+
		"@\u087e\b@\n@\f@\u0881\t@\u0001@\u0003@\u0884\b@\u0001A\u0001A\u0001A"+
		"\u0001A\u0003A\u088a\bA\u0001B\u0001B\u0001B\u0001B\u0005B\u0890\bB\n"+
		"B\fB\u0893\tB\u0001B\u0001B\u0001C\u0001C\u0003C\u0899\bC\u0001C\u0003"+
		"C\u089c\bC\u0001D\u0001D\u0001D\u0001D\u0005D\u08a2\bD\nD\fD\u08a5\tD"+
		"\u0001D\u0001D\u0001E\u0001E\u0001E\u0001E\u0005E\u08ad\bE\nE\fE\u08b0"+
		"\tE\u0001E\u0001E\u0001F\u0001F\u0001F\u0001F\u0001F\u0001F\u0003F\u08ba"+
		"\bF\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0003G\u08c2\bG\u0001H\u0001"+
		"H\u0001H\u0001H\u0003H\u08c8\bH\u0001I\u0001I\u0001I\u0001J\u0001J\u0001"+
		"J\u0001J\u0001J\u0004J\u08d2\bJ\u000bJ\fJ\u08d3\u0001J\u0001J\u0001J\u0001"+
		"J\u0001J\u0003J\u08db\bJ\u0001J\u0001J\u0001J\u0001J\u0001J\u0003J\u08e2"+
		"\bJ\u0001J\u0001J\u0001J\u0001J\u0003J\u08e8\bJ\u0001J\u0001J\u0001J\u0001"+
		"J\u0001J\u0001J\u0001J\u0001J\u0001J\u0003J\u08f3\bJ\u0001J\u0001J\u0001"+
		"J\u0001J\u0005J\u08f9\bJ\nJ\fJ\u08fc\tJ\u0001J\u0005J\u08ff\bJ\nJ\fJ\u0902"+
		"\tJ\u0001J\u0005J\u0905\bJ\nJ\fJ\u0908\tJ\u0003J\u090a\bJ\u0001K\u0001"+
		"K\u0001K\u0001K\u0001K\u0001K\u0003K\u0912\bK\u0001L\u0001L\u0001L\u0001"+
		"L\u0001L\u0001L\u0001L\u0003L\u091b\bL\u0001M\u0001M\u0001M\u0001M\u0001"+
		"M\u0005M\u0922\bM\nM\fM\u0925\tM\u0003M\u0927\bM\u0001M\u0001M\u0001M"+
		"\u0001M\u0001M\u0005M\u092e\bM\nM\fM\u0931\tM\u0003M\u0933\bM\u0001M\u0001"+
		"M\u0001M\u0001M\u0001M\u0005M\u093a\bM\nM\fM\u093d\tM\u0003M\u093f\bM"+
		"\u0001M\u0001M\u0001M\u0001M\u0001M\u0005M\u0946\bM\nM\fM\u0949\tM\u0003"+
		"M\u094b\bM\u0001M\u0003M\u094e\bM\u0001M\u0001M\u0001M\u0003M\u0953\b"+
		"M\u0003M\u0955\bM\u0001M\u0001M\u0003M\u0959\bM\u0001N\u0001N\u0001N\u0001"+
		"O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0003O\u0965\bO\u0001O\u0001"+
		"O\u0001O\u0001O\u0001O\u0003O\u096c\bO\u0001O\u0001O\u0001O\u0001O\u0001"+
		"O\u0003O\u0973\bO\u0001O\u0001O\u0001O\u0001O\u0005O\u0979\bO\nO\fO\u097c"+
		"\tO\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0001P\u0003"+
		"P\u0987\bP\u0001Q\u0001Q\u0003Q\u098b\bQ\u0001Q\u0001Q\u0003Q\u098f\b"+
		"Q\u0001R\u0001R\u0005R\u0993\bR\nR\fR\u0996\tR\u0001S\u0001S\u0003S\u099a"+
		"\bS\u0001S\u0001S\u0001S\u0001S\u0005S\u09a0\bS\nS\fS\u09a3\tS\u0001S"+
		"\u0003S\u09a6\bS\u0001S\u0003S\u09a9\bS\u0001S\u0003S\u09ac\bS\u0001S"+
		"\u0003S\u09af\bS\u0001S\u0001S\u0003S\u09b3\bS\u0001T\u0001T\u0003T\u09b7"+
		"\bT\u0001T\u0005T\u09ba\bT\nT\fT\u09bd\tT\u0001T\u0003T\u09c0\bT\u0001"+
		"T\u0003T\u09c3\bT\u0001T\u0003T\u09c6\bT\u0001T\u0003T\u09c9\bT\u0001"+
		"T\u0001T\u0003T\u09cd\bT\u0001T\u0005T\u09d0\bT\nT\fT\u09d3\tT\u0001T"+
		"\u0003T\u09d6\bT\u0001T\u0003T\u09d9\bT\u0001T\u0003T\u09dc\bT\u0001T"+
		"\u0003T\u09df\bT\u0003T\u09e1\bT\u0001U\u0001U\u0001U\u0001U\u0003U\u09e7"+
		"\bU\u0001U\u0001U\u0001U\u0001U\u0001U\u0003U\u09ee\bU\u0001U\u0001U\u0001"+
		"U\u0003U\u09f3\bU\u0001U\u0003U\u09f6\bU\u0001U\u0003U\u09f9\bU\u0001"+
		"U\u0001U\u0003U\u09fd\bU\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001"+
		"U\u0001U\u0003U\u0a07\bU\u0001U\u0001U\u0003U\u0a0b\bU\u0003U\u0a0d\b"+
		"U\u0001U\u0003U\u0a10\bU\u0001U\u0001U\u0003U\u0a14\bU\u0001V\u0001V\u0005"+
		"V\u0a18\bV\nV\fV\u0a1b\tV\u0001V\u0003V\u0a1e\bV\u0001V\u0001V\u0001W"+
		"\u0001W\u0001W\u0001X\u0001X\u0001X\u0001X\u0003X\u0a29\bX\u0001X\u0001"+
		"X\u0001X\u0001Y\u0001Y\u0001Y\u0001Y\u0001Y\u0003Y\u0a33\bY\u0001Y\u0001"+
		"Y\u0003Y\u0a37\bY\u0001Y\u0001Y\u0001Y\u0001Z\u0001Z\u0001Z\u0001Z\u0001"+
		"Z\u0001Z\u0001Z\u0003Z\u0a43\bZ\u0001Z\u0001Z\u0001Z\u0001[\u0001[\u0001"+
		"[\u0001[\u0001[\u0001[\u0001[\u0003[\u0a4f\b[\u0001\\\u0001\\\u0001\\"+
		"\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0005"+
		"\\\u0a5c\b\\\n\\\f\\\u0a5f\t\\\u0001\\\u0001\\\u0003\\\u0a63\b\\\u0001"+
		"]\u0001]\u0001]\u0001]\u0003]\u0a69\b]\u0001^\u0001^\u0001^\u0001^\u0001"+
		"^\u0001_\u0001_\u0001_\u0005_\u0a73\b_\n_\f_\u0a76\t_\u0001`\u0001`\u0001"+
		"`\u0001`\u0001a\u0001a\u0001a\u0001b\u0001b\u0001b\u0001c\u0001c\u0001"+
		"c\u0003c\u0a85\bc\u0001c\u0005c\u0a88\bc\nc\fc\u0a8b\tc\u0001c\u0001c"+
		"\u0001d\u0001d\u0001d\u0001d\u0001d\u0001d\u0005d\u0a95\bd\nd\fd\u0a98"+
		"\td\u0001d\u0001d\u0003d\u0a9c\bd\u0001e\u0001e\u0001e\u0001e\u0005e\u0aa2"+
		"\be\ne\fe\u0aa5\te\u0001e\u0005e\u0aa8\be\ne\fe\u0aab\te\u0001e\u0003"+
		"e\u0aae\be\u0001e\u0003e\u0ab1\be\u0001f\u0003f\u0ab4\bf\u0001f\u0001"+
		"f\u0001f\u0001f\u0001f\u0003f\u0abb\bf\u0001f\u0001f\u0001f\u0001f\u0003"+
		"f\u0ac1\bf\u0001g\u0001g\u0001g\u0001g\u0001g\u0005g\u0ac8\bg\ng\fg\u0acb"+
		"\tg\u0001g\u0001g\u0001g\u0001g\u0001g\u0005g\u0ad2\bg\ng\fg\u0ad5\tg"+
		"\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001"+
		"g\u0005g\u0ae1\bg\ng\fg\u0ae4\tg\u0001g\u0001g\u0003g\u0ae8\bg\u0003g"+
		"\u0aea\bg\u0001h\u0001h\u0003h\u0aee\bh\u0001i\u0001i\u0001i\u0001i\u0001"+
		"i\u0005i\u0af5\bi\ni\fi\u0af8\ti\u0001i\u0001i\u0001i\u0001i\u0001i\u0001"+
		"i\u0001i\u0001i\u0005i\u0b02\bi\ni\fi\u0b05\ti\u0001i\u0001i\u0003i\u0b09"+
		"\bi\u0001j\u0001j\u0003j\u0b0d\bj\u0001k\u0001k\u0001k\u0001k\u0005k\u0b13"+
		"\bk\nk\fk\u0b16\tk\u0003k\u0b18\bk\u0001k\u0001k\u0003k\u0b1c\bk\u0001"+
		"l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0005"+
		"l\u0b28\bl\nl\fl\u0b2b\tl\u0001l\u0001l\u0001l\u0001m\u0001m\u0001m\u0001"+
		"m\u0001m\u0005m\u0b35\bm\nm\fm\u0b38\tm\u0001m\u0001m\u0003m\u0b3c\bm"+
		"\u0001n\u0001n\u0003n\u0b40\bn\u0001n\u0003n\u0b43\bn\u0001o\u0001o\u0003"+
		"o\u0b47\bo\u0001o\u0001o\u0001o\u0001o\u0003o\u0b4d\bo\u0001o\u0003o\u0b50"+
		"\bo\u0001p\u0001p\u0001p\u0001q\u0001q\u0003q\u0b57\bq\u0001r\u0001r\u0001"+
		"r\u0001r\u0001r\u0001r\u0001r\u0001r\u0005r\u0b61\br\nr\fr\u0b64\tr\u0001"+
		"r\u0001r\u0001s\u0001s\u0001s\u0001s\u0005s\u0b6c\bs\ns\fs\u0b6f\ts\u0001"+
		"s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0005s\u0b79\bs\ns"+
		"\fs\u0b7c\ts\u0001s\u0001s\u0001t\u0001t\u0001t\u0001t\u0005t\u0b84\b"+
		"t\nt\ft\u0b87\tt\u0001t\u0001t\u0003t\u0b8b\bt\u0001u\u0001u\u0001v\u0001"+
		"v\u0001w\u0001w\u0003w\u0b93\bw\u0001x\u0001x\u0001y\u0003y\u0b98\by\u0001"+
		"y\u0001y\u0001z\u0001z\u0001z\u0003z\u0b9f\bz\u0001z\u0001z\u0001z\u0001"+
		"z\u0001z\u0005z\u0ba6\bz\nz\fz\u0ba9\tz\u0003z\u0bab\bz\u0001z\u0001z"+
		"\u0001z\u0003z\u0bb0\bz\u0001z\u0001z\u0001z\u0005z\u0bb5\bz\nz\fz\u0bb8"+
		"\tz\u0003z\u0bba\bz\u0001{\u0001{\u0001|\u0003|\u0bbf\b|\u0001|\u0001"+
		"|\u0005|\u0bc3\b|\n|\f|\u0bc6\t|\u0001}\u0001}\u0001}\u0003}\u0bcb\b}"+
		"\u0001~\u0001~\u0001~\u0003~\u0bd0\b~\u0001~\u0001~\u0003~\u0bd4\b~\u0001"+
		"~\u0001~\u0001~\u0001~\u0003~\u0bda\b~\u0001~\u0001~\u0003~\u0bde\b~\u0001"+
		"\u007f\u0003\u007f\u0be1\b\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003"+
		"\u007f\u0be6\b\u007f\u0001\u007f\u0003\u007f\u0be9\b\u007f\u0001\u007f"+
		"\u0001\u007f\u0001\u007f\u0003\u007f\u0bee\b\u007f\u0001\u007f\u0001\u007f"+
		"\u0003\u007f\u0bf2\b\u007f\u0001\u007f\u0003\u007f\u0bf5\b\u007f\u0001"+
		"\u007f\u0003\u007f\u0bf8\b\u007f\u0001\u0080\u0001\u0080\u0001\u0080\u0001"+
		"\u0080\u0003\u0080\u0bfe\b\u0080\u0001\u0081\u0001\u0081\u0001\u0081\u0003"+
		"\u0081\u0c03\b\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001"+
		"\u0081\u0003\u0081\u0c0a\b\u0081\u0001\u0082\u0003\u0082\u0c0d\b\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0003\u0082\u0c1f\b\u0082"+
		"\u0003\u0082\u0c21\b\u0082\u0001\u0082\u0003\u0082\u0c24\b\u0082\u0001"+
		"\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0084\u0001\u0084\u0001"+
		"\u0084\u0005\u0084\u0c2d\b\u0084\n\u0084\f\u0084\u0c30\t\u0084\u0001\u0085"+
		"\u0001\u0085\u0001\u0085\u0001\u0085\u0005\u0085\u0c36\b\u0085\n\u0085"+
		"\f\u0085\u0c39\t\u0085\u0001\u0085\u0001\u0085\u0001\u0086\u0001\u0086"+
		"\u0003\u0086\u0c3f\b\u0086\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087"+
		"\u0005\u0087\u0c45\b\u0087\n\u0087\f\u0087\u0c48\t\u0087\u0001\u0087\u0001"+
		"\u0087\u0001\u0088\u0001\u0088\u0003\u0088\u0c4e\b\u0088\u0001\u0089\u0001"+
		"\u0089\u0003\u0089\u0c52\b\u0089\u0001\u0089\u0003\u0089\u0c55\b\u0089"+
		"\u0001\u0089\u0003\u0089\u0c58\b\u0089\u0001\u0089\u0001\u0089\u0001\u0089"+
		"\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089\u0c60\b\u0089\u0001\u0089"+
		"\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089"+
		"\u0c68\b\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089"+
		"\u0c6e\b\u0089\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008b\u0001\u008b"+
		"\u0001\u008b\u0001\u008b\u0005\u008b\u0c77\b\u008b\n\u008b\f\u008b\u0c7a"+
		"\t\u008b\u0001\u008b\u0001\u008b\u0001\u008c\u0001\u008c\u0001\u008c\u0003"+
		"\u008c\u0c81\b\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001"+
		"\u008c\u0003\u008c\u0c88\b\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001"+
		"\u008c\u0001\u008c\u0003\u008c\u0c8f\b\u008c\u0003\u008c\u0c91\b\u008c"+
		"\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d"+
		"\u0001\u008d\u0001\u008d\u0001\u008d\u0005\u008d\u0c9c\b\u008d\n\u008d"+
		"\f\u008d\u0c9f\t\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d"+
		"\u0001\u008d\u0004\u008d\u0ca6\b\u008d\u000b\u008d\f\u008d\u0ca7\u0001"+
		"\u008d\u0003\u008d\u0cab\b\u008d\u0003\u008d\u0cad\b\u008d\u0001\u008d"+
		"\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008d\u0005\u008d"+
		"\u0cb5\b\u008d\n\u008d\f\u008d\u0cb8\t\u008d\u0001\u008d\u0001\u008d\u0001"+
		"\u008d\u0001\u008d\u0001\u008d\u0004\u008d\u0cbf\b\u008d\u000b\u008d\f"+
		"\u008d\u0cc0\u0001\u008d\u0003\u008d\u0cc4\b\u008d\u0003\u008d\u0cc6\b"+
		"\u008d\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008f\u0001"+
		"\u008f\u0003\u008f\u0cce\b\u008f\u0001\u0090\u0001\u0090\u0003\u0090\u0cd2"+
		"\b\u0090\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0005"+
		"\u0091\u0cd9\b\u0091\n\u0091\f\u0091\u0cdc\t\u0091\u0003\u0091\u0cde\b"+
		"\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0092\u0003\u0092\u0ce4"+
		"\b\u0092\u0001\u0092\u0001\u0092\u0003\u0092\u0ce8\b\u0092\u0003\u0092"+
		"\u0cea\b\u0092\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093"+
		"\u0001\u0093\u0001\u0093\u0003\u0093\u0cf3\b\u0093\u0001\u0093\u0001\u0093"+
		"\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093"+
		"\u0001\u0093\u0001\u0093\u0003\u0093\u0cff\b\u0093\u0003\u0093\u0d01\b"+
		"\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0003"+
		"\u0093\u0d08\b\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001"+
		"\u0093\u0003\u0093\u0d0f\b\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001"+
		"\u0093\u0003\u0093\u0d15\b\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001"+
		"\u0093\u0003\u0093\u0d1b\b\u0093\u0003\u0093\u0d1d\b\u0093\u0001\u0094"+
		"\u0001\u0094\u0001\u0094\u0005\u0094\u0d22\b\u0094\n\u0094\f\u0094\u0d25"+
		"\t\u0094\u0001\u0095\u0001\u0095\u0001\u0095\u0005\u0095\u0d2a\b\u0095"+
		"\n\u0095\f\u0095\u0d2d\t\u0095\u0001\u0096\u0001\u0096\u0001\u0096\u0005"+
		"\u0096\u0d32\b\u0096\n\u0096\f\u0096\u0d35\t\u0096\u0001\u0097\u0001\u0097"+
		"\u0001\u0097\u0003\u0097\u0d3a\b\u0097\u0001\u0098\u0001\u0098\u0001\u0098"+
		"\u0003\u0098\u0d3f\b\u0098\u0001\u0098\u0001\u0098\u0001\u0099\u0001\u0099"+
		"\u0001\u0099\u0003\u0099\u0d46\b\u0099\u0001\u0099\u0001\u0099\u0001\u009a"+
		"\u0001\u009a\u0003\u009a\u0d4c\b\u009a\u0001\u009a\u0001\u009a\u0003\u009a"+
		"\u0d50\b\u009a\u0003\u009a\u0d52\b\u009a\u0001\u009b\u0001\u009b\u0001"+
		"\u009b\u0005\u009b\u0d57\b\u009b\n\u009b\f\u009b\u0d5a\t\u009b\u0001\u009c"+
		"\u0001\u009c\u0001\u009c\u0001\u009c\u0005\u009c\u0d60\b\u009c\n\u009c"+
		"\f\u009c\u0d63\t\u009c\u0001\u009c\u0001\u009c\u0001\u009d\u0001\u009d"+
		"\u0003\u009d\u0d69\b\u009d\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e"+
		"\u0001\u009e\u0001\u009e\u0005\u009e\u0d71\b\u009e\n\u009e\f\u009e\u0d74"+
		"\t\u009e\u0001\u009e\u0001\u009e\u0003\u009e\u0d78\b\u009e\u0001\u009f"+
		"\u0001\u009f\u0003\u009f\u0d7c\b\u009f\u0001\u00a0\u0001\u00a0\u0001\u00a1"+
		"\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a2\u0001\u00a2\u0003\u00a2"+
		"\u0d86\b\u00a2\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0005\u00a3\u0d8b\b"+
		"\u00a3\n\u00a3\f\u00a3\u0d8e\t\u00a3\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0003\u00a4\u0d9a\b\u00a4\u0003\u00a4\u0d9c\b\u00a4\u0001"+
		"\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0005"+
		"\u00a4\u0da4\b\u00a4\n\u00a4\f\u00a4\u0da7\t\u00a4\u0001\u00a5\u0003\u00a5"+
		"\u0daa\b\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5"+
		"\u0001\u00a5\u0003\u00a5\u0db2\b\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5"+
		"\u0001\u00a5\u0001\u00a5\u0005\u00a5\u0db9\b\u00a5\n\u00a5\f\u00a5\u0dbc"+
		"\t\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0003\u00a5\u0dc1\b\u00a5"+
		"\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5"+
		"\u0003\u00a5\u0dc9\b\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0003\u00a5"+
		"\u0dce\b\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5"+
		"\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0005\u00a5\u0dd8\b\u00a5\n\u00a5"+
		"\f\u00a5\u0ddb\t\u00a5\u0001\u00a5\u0001\u00a5\u0003\u00a5\u0ddf\b\u00a5"+
		"\u0001\u00a5\u0003\u00a5\u0de2\b\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5"+
		"\u0001\u00a5\u0003\u00a5\u0de8\b\u00a5\u0001\u00a5\u0001\u00a5\u0003\u00a5"+
		"\u0dec\b\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0003\u00a5\u0df1\b"+
		"\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0003\u00a5\u0df6\b\u00a5\u0001"+
		"\u00a5\u0001\u00a5\u0001\u00a5\u0003\u00a5\u0dfb\b\u00a5\u0001\u00a6\u0001"+
		"\u00a6\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0003\u00a7\u0e03"+
		"\b\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001"+
		"\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001"+
		"\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001"+
		"\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0005"+
		"\u00a7\u0e1c\b\u00a7\n\u00a7\f\u00a7\u0e1f\t\u00a7\u0001\u00a8\u0001\u00a8"+
		"\u0001\u00a9\u0001\u00a9\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa"+
		"\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0e2b\b\u00aa\u0001\u00aa\u0001\u00aa"+
		"\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa"+
		"\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0e37\b\u00aa\u0001\u00aa\u0001\u00aa"+
		"\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa"+
		"\u0004\u00aa\u0e41\b\u00aa\u000b\u00aa\f\u00aa\u0e42\u0001\u00aa\u0001"+
		"\u00aa\u0003\u00aa\u0e47\b\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0004\u00aa\u0e4e\b\u00aa\u000b\u00aa\f\u00aa\u0e4f"+
		"\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0e54\b\u00aa\u0001\u00aa\u0001\u00aa"+
		"\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa"+
		"\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa"+
		"\u0005\u00aa\u0e64\b\u00aa\n\u00aa\f\u00aa\u0e67\t\u00aa\u0003\u00aa\u0e69"+
		"\b\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0003\u00aa\u0e71\b\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0e7a\b\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0003\u00aa\u0e83\b\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0e91\b\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0e97\b\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0004\u00aa\u0e9d\b\u00aa\u000b\u00aa\f"+
		"\u00aa\u0e9e\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa"+
		"\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0eaa\b\u00aa"+
		"\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0005\u00aa\u0eaf\b\u00aa\n\u00aa"+
		"\f\u00aa\u0eb2\t\u00aa\u0003\u00aa\u0eb4\b\u00aa\u0001\u00aa\u0001\u00aa"+
		"\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa"+
		"\u0001\u00aa\u0005\u00aa\u0ebf\b\u00aa\n\u00aa\f\u00aa\u0ec2\t\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0003\u00aa\u0ec6\b\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0ece\b\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0003\u00aa\u0ed2\b\u00aa\u0001\u00aa\u0001\u00aa\u0003"+
		"\u00aa\u0ed6\b\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0004\u00aa\u0ee0\b\u00aa\u000b"+
		"\u00aa\f\u00aa\u0ee1\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0003\u00aa\u0efb\b\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0003\u00aa\u0f02\b\u00aa\u0001\u00aa\u0003\u00aa\u0f05"+
		"\b\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0003\u00aa\u0f14\b\u00aa\u0001\u00aa\u0001\u00aa\u0003"+
		"\u00aa\u0f18\b\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0005\u00aa\u0f27\b\u00aa\n\u00aa\f\u00aa"+
		"\u0f2a\t\u00aa\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab"+
		"\u0001\u00ab\u0001\u00ab\u0003\u00ab\u0f33\b\u00ab\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0004\u00ac\u0f40\b\u00ac\u000b\u00ac"+
		"\f\u00ac\u0f41\u0003\u00ac\u0f44\b\u00ac\u0001\u00ad\u0001\u00ad\u0001"+
		"\u00ae\u0001\u00ae\u0001\u00af\u0001\u00af\u0001\u00b0\u0001\u00b0\u0001"+
		"\u00b1\u0001\u00b1\u0001\u00b1\u0003\u00b1\u0f51\b\u00b1\u0001\u00b2\u0001"+
		"\u00b2\u0003\u00b2\u0f55\b\u00b2\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0004"+
		"\u00b3\u0f5a\b\u00b3\u000b\u00b3\f\u00b3\u0f5b\u0001\u00b4\u0001\u00b4"+
		"\u0001\u00b4\u0003\u00b4\u0f61\b\u00b4\u0001\u00b5\u0001\u00b5\u0001\u00b5"+
		"\u0001\u00b5\u0001\u00b5\u0001\u00b6\u0003\u00b6\u0f69\b\u00b6\u0001\u00b6"+
		"\u0001\u00b6\u0001\u00b6\u0003\u00b6\u0f6e\b\u00b6\u0001\u00b7\u0001\u00b7"+
		"\u0001\u00b8\u0001\u00b8\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0003\u00b9"+
		"\u0f77\b\u00b9\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00bb"+
		"\u0001\u00bb\u0001\u00bb\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc"+
		"\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc"+
		"\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc"+
		"\u0001\u00bc\u0001\u00bc\u0003\u00bc\u0f92\b\u00bc\u0001\u00bc\u0001\u00bc"+
		"\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc"+
		"\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc"+
		"\u0003\u00bc\u0fa2\b\u00bc\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd"+
		"\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd"+
		"\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0003\u00bd"+
		"\u0fb3\b\u00bd\u0001\u00bd\u0001\u00bd\u0003\u00bd\u0fb7\b\u00bd\u0001"+
		"\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0003\u00bd\u0fbd\b\u00bd\u0001"+
		"\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0003\u00bd\u0fc3\b\u00bd\u0001"+
		"\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0005\u00bd\u0fca"+
		"\b\u00bd\n\u00bd\f\u00bd\u0fcd\t\u00bd\u0001\u00bd\u0003\u00bd\u0fd0\b"+
		"\u00bd\u0003\u00bd\u0fd2\b\u00bd\u0001\u00be\u0001\u00be\u0001\u00be\u0005"+
		"\u00be\u0fd7\b\u00be\n\u00be\f\u00be\u0fda\t\u00be\u0001\u00bf\u0001\u00bf"+
		"\u0001\u00bf\u0005\u00bf\u0fdf\b\u00bf\n\u00bf\f\u00bf\u0fe2\t\u00bf\u0001"+
		"\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0003"+
		"\u00c0\u0fea\b\u00c0\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0001\u00c2\u0001"+
		"\u00c2\u0001\u00c2\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0005\u00c3\u0ff5"+
		"\b\u00c3\n\u00c3\f\u00c3\u0ff8\t\u00c3\u0001\u00c4\u0001\u00c4\u0001\u00c4"+
		"\u0001\u00c4\u0001\u00c4\u0003\u00c4\u0fff\b\u00c4\u0001\u00c4\u0003\u00c4"+
		"\u1002\b\u00c4\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0005\u00c5\u1007\b"+
		"\u00c5\n\u00c5\f\u00c5\u100a\t\u00c5\u0001\u00c6\u0001\u00c6\u0001\u00c6"+
		"\u0005\u00c6\u100f\b\u00c6\n\u00c6\f\u00c6\u1012\t\u00c6\u0001\u00c7\u0001"+
		"\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0003\u00c7\u101a"+
		"\b\u00c7\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001"+
		"\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003"+
		"\u00c8\u1027\b\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u102c"+
		"\b\u00c8\u0003\u00c8\u102e\b\u00c8\u0001\u00c9\u0001\u00c9\u0005\u00c9"+
		"\u1032\b\u00c9\n\u00c9\f\u00c9\u1035\t\u00c9\u0001\u00c9\u0001\u00c9\u0001"+
		"\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0003"+
		"\u00ca\u103f\b\u00ca\u0001\u00cb\u0003\u00cb\u1042\b\u00cb\u0001\u00cb"+
		"\u0001\u00cb\u0003\u00cb\u1046\b\u00cb\u0001\u00cb\u0003\u00cb\u1049\b"+
		"\u00cb\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0005\u00cc\u104e\b\u00cc\n"+
		"\u00cc\f\u00cc\u1051\t\u00cc\u0001\u00cd\u0001\u00cd\u0003\u00cd\u1055"+
		"\b\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0003\u00cd\u105b"+
		"\b\u00cd\u0001\u00cd\u0003\u00cd\u105e\b\u00cd\u0001\u00ce\u0001\u00ce"+
		"\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0005\u00ce"+
		"\u1067\b\u00ce\n\u00ce\f\u00ce\u106a\t\u00ce\u0001\u00cf\u0001\u00cf\u0001"+
		"\u00cf\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d1\u0001\u00d1\u0001"+
		"\u00d1\u0001\u00d1\u0003\u00d1\u1076\b\u00d1\u0001\u00d2\u0001\u00d2\u0001"+
		"\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001"+
		"\u00d2\u0001\u00d2\u0003\u00d2\u1082\b\u00d2\u0001\u00d3\u0001\u00d3\u0001"+
		"\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001"+
		"\u00d3\u0003\u00d3\u108d\b\u00d3\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001"+
		"\u00d4\u0001\u00d4\u0001\u00d4\u0003\u00d4\u1095\b\u00d4\u0001\u00d5\u0001"+
		"\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d6\u0001\u00d6\u0001"+
		"\u00d6\u0001\u00d6\u0005\u00d6\u10a0\b\u00d6\n\u00d6\f\u00d6\u10a3\t\u00d6"+
		"\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d8\u0001\u00d8"+
		"\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8"+
		"\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0005\u00d8\u10b4\b\u00d8\n\u00d8"+
		"\f\u00d8\u10b7\t\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8"+
		"\u0001\u00d8\u0005\u00d8\u10be\b\u00d8\n\u00d8\f\u00d8\u10c1\t\u00d8\u0003"+
		"\u00d8\u10c3\b\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d8\u0001"+
		"\u00d8\u0005\u00d8\u10ca\b\u00d8\n\u00d8\f\u00d8\u10cd\t\u00d8\u0003\u00d8"+
		"\u10cf\b\u00d8\u0003\u00d8\u10d1\b\u00d8\u0001\u00d8\u0003\u00d8\u10d4"+
		"\b\u00d8\u0001\u00d8\u0003\u00d8\u10d7\b\u00d8\u0001\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0003\u00d9\u10e9\b\u00d9\u0001\u00da\u0001\u00da"+
		"\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0003\u00da"+
		"\u10f2\b\u00da\u0001\u00db\u0001\u00db\u0001\u00db\u0005\u00db\u10f7\b"+
		"\u00db\n\u00db\f\u00db\u10fa\t\u00db\u0001\u00dc\u0001\u00dc\u0001\u00dc"+
		"\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dc"+
		"\u0001\u00dc\u0003\u00dc\u1106\b\u00dc\u0001\u00dd\u0001\u00dd\u0001\u00dd"+
		"\u0005\u00dd\u110b\b\u00dd\n\u00dd\f\u00dd\u110e\t\u00dd\u0001\u00de\u0001"+
		"\u00de\u0001\u00de\u0001\u00df\u0001\u00df\u0004\u00df\u1115\b\u00df\u000b"+
		"\u00df\f\u00df\u1116\u0001\u00df\u0003\u00df\u111a\b\u00df\u0001\u00e0"+
		"\u0001\u00e0\u0001\u00e0\u0003\u00e0\u111f\b\u00e0\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u1127\b\u00e1"+
		"\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0003\u00e2\u112c\b\u00e2\u0001\u00e3"+
		"\u0001\u00e3\u0001\u00e4\u0001\u00e4\u0003\u00e4\u1132\b\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0003\u00e4\u1137\b\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0003\u00e4\u113c\b\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4"+
		"\u1140\b\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4\u1144\b\u00e4\u0001"+
		"\u00e4\u0001\u00e4\u0003\u00e4\u1148\b\u00e4\u0001\u00e4\u0001\u00e4\u0003"+
		"\u00e4\u114c\b\u00e4\u0001\u00e4\u0001\u00e4\u0003\u00e4\u1150\b\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0003\u00e4\u1154\b\u00e4\u0001\u00e4\u0001\u00e4"+
		"\u0003\u00e4\u1158\b\u00e4\u0001\u00e4\u0003\u00e4\u115b\b\u00e4\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e5\u0005\u00e5\u1160\b\u00e5\n\u00e5\f\u00e5"+
		"\u1163\t\u00e5\u0001\u00e6\u0001\u00e6\u0003\u00e6\u1167\b\u00e6\u0001"+
		"\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001"+
		"\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0003"+
		"\u00e7\u1175\b\u00e7\u0001\u00e8\u0001\u00e8\u0001\u00e8\u0003\u00e8\u117a"+
		"\b\u00e8\u0001\u00e9\u0001\u00e9\u0003\u00e9\u117e\b\u00e9\u0001\u00ea"+
		"\u0001\u00ea\u0003\u00ea\u1182\b\u00ea\u0001\u00eb\u0001\u00eb\u0003\u00eb"+
		"\u1186\b\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb"+
		"\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0001\u00eb\u0003\u00eb"+
		"\u1192\b\u00eb\u0001\u00eb\u0001\u00eb\u0003\u00eb\u1196\b\u00eb\u0001"+
		"\u00eb\u0001\u00eb\u0003\u00eb\u119a\b\u00eb\u0001\u00eb\u0001\u00eb\u0001"+
		"\u00eb\u0001\u00eb\u0003\u00eb\u11a0\b\u00eb\u0001\u00eb\u0001\u00eb\u0001"+
		"\u00eb\u0001\u00eb\u0003\u00eb\u11a6\b\u00eb\u0001\u00eb\u0003\u00eb\u11a9"+
		"\b\u00eb\u0003\u00eb\u11ab\b\u00eb\u0001\u00ec\u0001\u00ec\u0001\u00ec"+
		"\u0005\u00ec\u11b0\b\u00ec\n\u00ec\f\u00ec\u11b3\t\u00ec\u0001\u00ec\u0001"+
		"\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec\u0005\u00ec\u11bb"+
		"\b\u00ec\n\u00ec\f\u00ec\u11be\t\u00ec\u0001\u00ec\u0001\u00ec\u0001\u00ec"+
		"\u0005\u00ec\u11c3\b\u00ec\n\u00ec\f\u00ec\u11c6\t\u00ec\u0001\u00ed\u0001"+
		"\u00ed\u0001\u00ee\u0001\u00ee\u0001\u00ef\u0001\u00ef\u0001\u00ef\t\u05b3"+
		"\u05f6\u0632\u063c\u064d\u0669\u0672\u067b\u0684\u0004\u009e\u0148\u014e"+
		"\u0154\u00f0\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016"+
		"\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprt"+
		"vxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094"+
		"\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac"+
		"\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4"+
		"\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc"+
		"\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4"+
		"\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c"+
		"\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124"+
		"\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c"+
		"\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154"+
		"\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c"+
		"\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184"+
		"\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c"+
		"\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4"+
		"\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc"+
		"\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u0000?\u0002\u0000"+
		"DDxx\u0002\u0000YY\u00fd\u00fd\u0002\u0000((\u0112\u0112\u0002\u0000\u008c"+
		"\u008c\u00a0\u00a0\u0001\u000089\u0002\u0000\u0144\u0144\u0175\u0175\u0002"+
		"\u0000\r\r--\u0005\u000044EE||\u008a\u008a\u00c7\u00c7\u0001\u0000bc\u0002"+
		"\u0000||\u008a\u008a\u0003\u0000\t\tmm\u0141\u0141\u0002\u0000\t\t\u00c1"+
		"\u00c1\u0003\u0000SS\u00d9\u00d9\u0120\u0120\u0003\u0000TT\u00da\u00da"+
		"\u0121\u0121\u0001\u0000\u0171\u0172\u0004\u0000tt\u00aa\u00aa\u012a\u012a"+
		"\u0163\u0163\u0003\u0000tt\u012a\u012a\u0163\u0163\u0002\u0000\u0017\u0017"+
		"bb\u0002\u0000\u0084\u0084\u00b7\u00b7\u0002\u0000\u0143\u0143\u0174\u0174"+
		"\u0002\u0000\u0142\u0142\u014e\u014e\u0002\u0000HH\u011b\u011b\u0002\u0000"+
		"vv\u00a1\u00a1\u0002\u0000\f\fhh\u0002\u0000\u01a5\u01a5\u01a7\u01a7\u0002"+
		"\u0000ii\u00f3\u00f3\u0002\u0000\u00eb\u00eb\u0132\u0132\u0002\u0000\b"+
		"\b\u00e0\u00e0\u0001\u0000\u00bd\u00be\u0003\u0000\f\f\u0012\u0012\u0131"+
		"\u0131\u0003\u0000\u007f\u007f\u015c\u015c\u0165\u0165\u0002\u0000\u018e"+
		"\u018f\u0193\u0193\u0002\u0000jj\u0190\u0192\u0002\u0000\u018e\u018f\u0196"+
		"\u0196\u0001\u0000\u018b\u018d\u000b\u0000NNPP\u0098\u0098\u00ce\u00ce"+
		"\u00d0\u00d0\u00d2\u00d2\u00d5\u00d5\u00ff\u00ff\u011e\u011e\u0178\u0178"+
		"\u0180\u0180\u0004\u0000JJLM\u0128\u0128\u016c\u016c\u0002\u0000UV\u0151"+
		"\u0151\u0003\u0000WX\u014d\u014d\u0152\u0152\u0002\u0000**\u015e\u015e"+
		"\u0002\u0000\u009d\u009d\u0111\u0111\u0001\u0000\u013f\u0140\u0002\u0000"+
		"\u0004\u0004\u008c\u008c\u0002\u0000\u0004\u0004\u0087\u0087\u0003\u0000"+
		"  \u00ba\u00ba\u0157\u0157\u0001\u0000\u0183\u018a\u0003\u0000jj\u018e"+
		"\u0196\u0198\u0198\u0004\u0000\u0010\u0010\u00a0\u00a0\u00e0\u00e0\u00ea"+
		"\u00ea\u0002\u0000\u007f\u007f\u015c\u015c\u0001\u0000\u018e\u018f\b\u0000"+
		"NO\u0098\u0099\u00ce\u00d3\u00d5\u00d6\u00db\u00dc\u011e\u011f\u0178\u0179"+
		"\u0180\u0181\u0006\u0000NN\u0098\u0098\u00d2\u00d2\u00d5\u00d5\u011e\u011e"+
		"\u0180\u0180\u0002\u0000\u00d5\u00d5\u0180\u0180\u0004\u0000NN\u0098\u0098"+
		"\u00d2\u00d2\u011e\u011e\u0003\u0000\u0098\u0098\u00d2\u00d2\u011e\u011e"+
		"\u0002\u0000]]\u0183\u0183\u0002\u0000\u0136\u0136\u01ab\u01ab\u0002\u0000"+
		"\u0086\u0086\u00fa\u00fa\u0001\u0000\u01a6\u01a7\u0002\u0000mm\u0129\u0129"+
		"8\u0000\t\u000b\r\u000f\u0011\u0011\u0013\u0015\u0017\u0018\u001a\u001f"+
		"!%\'(+/14779ACEHINgimoorsu~\u0081\u0081\u0083\u0086\u0089\u008b\u008e"+
		"\u0091\u0094\u0095\u0097\u009f\u00a1\u00a4\u00a6\u00a9\u00ab\u00ad\u00af"+
		"\u00af\u00b1\u00b2\u00b4\u00b7\u00b9\u00b9\u00bb\u00bb\u00bd\u00dc\u00de"+
		"\u00df\u00e2\u00e4\u00e8\u00e9\u00ec\u00ec\u00ee\u00ef\u00f1\u00fa\u00fc"+
		"\u0106\u0108\u0108\u010a\u0115\u0117\u0122\u0124\u0127\u0129\u0130\u0132"+
		"\u0135\u0137\u0143\u0145\u014a\u014d\u0153\u0156\u0156\u0158\u0162\u0166"+
		"\u016b\u016e\u0179\u017c\u017d\u0180\u0182\u0010\u0000\u0011\u0011GGt"+
		"t\u008d\u008d\u00a5\u00a5\u00aa\u00aa\u00b3\u00b3\u00b8\u00b8\u00bc\u00bc"+
		"\u00dd\u00dd\u00e6\u00e6\u0116\u0116\u0124\u0124\u012a\u012a\u0163\u0163"+
		"\u016d\u016d\u0011\u0000\t\u0010\u0012FHsu\u008c\u008e\u00a4\u00a6\u00a9"+
		"\u00ab\u00b2\u00b4\u00b7\u00b9\u00bb\u00bd\u00dc\u00de\u00e5\u00e7\u0115"+
		"\u0117\u0123\u0125\u0129\u012b\u0162\u0164\u016c\u016e\u0182\u146f\u0000"+
		"\u01e2\u0001\u0000\u0000\u0000\u0002\u01e4\u0001\u0000\u0000\u0000\u0004"+
		"\u01ef\u0001\u0000\u0000\u0000\u0006\u01fc\u0001\u0000\u0000\u0000\b\u020d"+
		"\u0001\u0000\u0000\u0000\n\u0220\u0001\u0000\u0000\u0000\f\u0222\u0001"+
		"\u0000\u0000\u0000\u000e\u0224\u0001\u0000\u0000\u0000\u0010\u0238\u0001"+
		"\u0000\u0000\u0000\u0012\u023a\u0001\u0000\u0000\u0000\u0014\u0242\u0001"+
		"\u0000\u0000\u0000\u0016\u024d\u0001\u0000\u0000\u0000\u0018\u0258\u0001"+
		"\u0000\u0000\u0000\u001a\u026e\u0001\u0000\u0000\u0000\u001c\u0279\u0001"+
		"\u0000\u0000\u0000\u001e\u027c\u0001\u0000\u0000\u0000 \u02a2\u0001\u0000"+
		"\u0000\u0000\"\u02a5\u0001\u0000\u0000\u0000$\u02af\u0001\u0000\u0000"+
		"\u0000&\u02c1\u0001\u0000\u0000\u0000(\u02cb\u0001\u0000\u0000\u0000*"+
		"\u02ce\u0001\u0000\u0000\u0000,\u02d0\u0001\u0000\u0000\u0000.\u02d3\u0001"+
		"\u0000\u0000\u00000\u02d6\u0001\u0000\u0000\u00002\u02d9\u0001\u0000\u0000"+
		"\u00004\u02dc\u0001\u0000\u0000\u00006\u02df\u0001\u0000\u0000\u00008"+
		"\u0635\u0001\u0000\u0000\u0000:\u0687\u0001\u0000\u0000\u0000<\u0689\u0001"+
		"\u0000\u0000\u0000>\u069a\u0001\u0000\u0000\u0000@\u069e\u0001\u0000\u0000"+
		"\u0000B\u06a2\u0001\u0000\u0000\u0000D\u06a8\u0001\u0000\u0000\u0000F"+
		"\u06b2\u0001\u0000\u0000\u0000H\u06b4\u0001\u0000\u0000\u0000J\u06b6\u0001"+
		"\u0000\u0000\u0000L\u0760\u0001\u0000\u0000\u0000N\u0762\u0001\u0000\u0000"+
		"\u0000P\u0774\u0001\u0000\u0000\u0000R\u077a\u0001\u0000\u0000\u0000T"+
		"\u0780\u0001\u0000\u0000\u0000V\u078c\u0001\u0000\u0000\u0000X\u0799\u0001"+
		"\u0000\u0000\u0000Z\u079c\u0001\u0000\u0000\u0000\\\u07a5\u0001\u0000"+
		"\u0000\u0000^\u07a8\u0001\u0000\u0000\u0000`\u07ac\u0001\u0000\u0000\u0000"+
		"b\u0806\u0001\u0000\u0000\u0000d\u0808\u0001\u0000\u0000\u0000f\u080c"+
		"\u0001\u0000\u0000\u0000h\u0821\u0001\u0000\u0000\u0000j\u0823\u0001\u0000"+
		"\u0000\u0000l\u0825\u0001\u0000\u0000\u0000n\u0827\u0001\u0000\u0000\u0000"+
		"p\u0830\u0001\u0000\u0000\u0000r\u0832\u0001\u0000\u0000\u0000t\u083a"+
		"\u0001\u0000\u0000\u0000v\u0846\u0001\u0000\u0000\u0000x\u0851\u0001\u0000"+
		"\u0000\u0000z\u0865\u0001\u0000\u0000\u0000|\u0868\u0001\u0000\u0000\u0000"+
		"~\u0873\u0001\u0000\u0000\u0000\u0080\u0883\u0001\u0000\u0000\u0000\u0082"+
		"\u0889\u0001\u0000\u0000\u0000\u0084\u088b\u0001\u0000\u0000\u0000\u0086"+
		"\u0896\u0001\u0000\u0000\u0000\u0088\u089d\u0001\u0000\u0000\u0000\u008a"+
		"\u08a8\u0001\u0000\u0000\u0000\u008c\u08b9\u0001\u0000\u0000\u0000\u008e"+
		"\u08c1\u0001\u0000\u0000\u0000\u0090\u08c3\u0001\u0000\u0000\u0000\u0092"+
		"\u08c9\u0001\u0000\u0000\u0000\u0094\u0909\u0001\u0000\u0000\u0000\u0096"+
		"\u0911\u0001\u0000\u0000\u0000\u0098\u091a\u0001\u0000\u0000\u0000\u009a"+
		"\u0926\u0001\u0000\u0000\u0000\u009c\u095a\u0001\u0000\u0000\u0000\u009e"+
		"\u095d\u0001\u0000\u0000\u0000\u00a0\u0986\u0001\u0000\u0000\u0000\u00a2"+
		"\u0988\u0001\u0000\u0000\u0000\u00a4\u0990\u0001\u0000\u0000\u0000\u00a6"+
		"\u09b2\u0001\u0000\u0000\u0000\u00a8\u09e0\u0001\u0000\u0000\u0000\u00aa"+
		"\u09f5\u0001\u0000\u0000\u0000\u00ac\u0a15\u0001\u0000\u0000\u0000\u00ae"+
		"\u0a21\u0001\u0000\u0000\u0000\u00b0\u0a24\u0001\u0000\u0000\u0000\u00b2"+
		"\u0a2d\u0001\u0000\u0000\u0000\u00b4\u0a3b\u0001\u0000\u0000\u0000\u00b6"+
		"\u0a4e\u0001\u0000\u0000\u0000\u00b8\u0a62\u0001\u0000\u0000\u0000\u00ba"+
		"\u0a68\u0001\u0000\u0000\u0000\u00bc\u0a6a\u0001\u0000\u0000\u0000\u00be"+
		"\u0a6f\u0001\u0000\u0000\u0000\u00c0\u0a77\u0001\u0000\u0000\u0000\u00c2"+
		"\u0a7b\u0001\u0000\u0000\u0000\u00c4\u0a7e\u0001\u0000\u0000\u0000\u00c6"+
		"\u0a81\u0001\u0000\u0000\u0000\u00c8\u0a9b\u0001\u0000\u0000\u0000\u00ca"+
		"\u0a9d\u0001\u0000\u0000\u0000\u00cc\u0ac0\u0001\u0000\u0000\u0000\u00ce"+
		"\u0ae9\u0001\u0000\u0000\u0000\u00d0\u0aed\u0001\u0000\u0000\u0000\u00d2"+
		"\u0b08\u0001\u0000\u0000\u0000\u00d4\u0b0c\u0001\u0000\u0000\u0000\u00d6"+
		"\u0b1b\u0001\u0000\u0000\u0000\u00d8\u0b1d\u0001\u0000\u0000\u0000\u00da"+
		"\u0b3b\u0001\u0000\u0000\u0000\u00dc\u0b3d\u0001\u0000\u0000\u0000\u00de"+
		"\u0b44\u0001\u0000\u0000\u0000\u00e0\u0b51\u0001\u0000\u0000\u0000\u00e2"+
		"\u0b56\u0001\u0000\u0000\u0000\u00e4\u0b58\u0001\u0000\u0000\u0000\u00e6"+
		"\u0b67\u0001\u0000\u0000\u0000\u00e8\u0b7f\u0001\u0000\u0000\u0000\u00ea"+
		"\u0b8c\u0001\u0000\u0000\u0000\u00ec\u0b8e\u0001\u0000\u0000\u0000\u00ee"+
		"\u0b90\u0001\u0000\u0000\u0000\u00f0\u0b94\u0001\u0000\u0000\u0000\u00f2"+
		"\u0b97\u0001\u0000\u0000\u0000\u00f4\u0b9b\u0001\u0000\u0000\u0000\u00f6"+
		"\u0bbb\u0001\u0000\u0000\u0000\u00f8\u0bbe\u0001\u0000\u0000\u0000\u00fa"+
		"\u0bca\u0001\u0000\u0000\u0000\u00fc\u0bdd\u0001\u0000\u0000\u0000\u00fe"+
		"\u0bf7\u0001\u0000\u0000\u0000\u0100\u0bfd\u0001\u0000\u0000\u0000\u0102"+
		"\u0bff\u0001\u0000\u0000\u0000\u0104\u0c23\u0001\u0000\u0000\u0000\u0106"+
		"\u0c25\u0001\u0000\u0000\u0000\u0108\u0c29\u0001\u0000\u0000\u0000\u010a"+
		"\u0c31\u0001\u0000\u0000\u0000\u010c\u0c3c\u0001\u0000\u0000\u0000\u010e"+
		"\u0c40\u0001\u0000\u0000\u0000\u0110\u0c4b\u0001\u0000\u0000\u0000\u0112"+
		"\u0c6d\u0001\u0000\u0000\u0000\u0114\u0c6f\u0001\u0000\u0000\u0000\u0116"+
		"\u0c72\u0001\u0000\u0000\u0000\u0118\u0c90\u0001\u0000\u0000\u0000\u011a"+
		"\u0cac\u0001\u0000\u0000\u0000\u011c\u0cc7\u0001\u0000\u0000\u0000\u011e"+
		"\u0ccd\u0001\u0000\u0000\u0000\u0120\u0cd1\u0001\u0000\u0000\u0000\u0122"+
		"\u0cd3\u0001\u0000\u0000\u0000\u0124\u0ce9\u0001\u0000\u0000\u0000\u0126"+
		"\u0d1c\u0001\u0000\u0000\u0000\u0128\u0d1e\u0001\u0000\u0000\u0000\u012a"+
		"\u0d26\u0001\u0000\u0000\u0000\u012c\u0d2e\u0001\u0000\u0000\u0000\u012e"+
		"\u0d36\u0001\u0000\u0000\u0000\u0130\u0d3e\u0001\u0000\u0000\u0000\u0132"+
		"\u0d45\u0001\u0000\u0000\u0000\u0134\u0d49\u0001\u0000\u0000\u0000\u0136"+
		"\u0d53\u0001\u0000\u0000\u0000\u0138\u0d5b\u0001\u0000\u0000\u0000\u013a"+
		"\u0d68\u0001\u0000\u0000\u0000\u013c\u0d77\u0001\u0000\u0000\u0000\u013e"+
		"\u0d7b\u0001\u0000\u0000\u0000\u0140\u0d7d\u0001\u0000\u0000\u0000\u0142"+
		"\u0d7f\u0001\u0000\u0000\u0000\u0144\u0d85\u0001\u0000\u0000\u0000\u0146"+
		"\u0d87\u0001\u0000\u0000\u0000\u0148\u0d9b\u0001\u0000\u0000\u0000\u014a"+
		"\u0dfa\u0001\u0000\u0000\u0000\u014c\u0dfc\u0001\u0000\u0000\u0000\u014e"+
		"\u0e02\u0001\u0000\u0000\u0000\u0150\u0e20\u0001\u0000\u0000\u0000\u0152"+
		"\u0e22\u0001\u0000\u0000\u0000\u0154\u0f17\u0001\u0000\u0000\u0000\u0156"+
		"\u0f32\u0001\u0000\u0000\u0000\u0158\u0f43\u0001\u0000\u0000\u0000\u015a"+
		"\u0f45\u0001\u0000\u0000\u0000\u015c\u0f47\u0001\u0000\u0000\u0000\u015e"+
		"\u0f49\u0001\u0000\u0000\u0000\u0160\u0f4b\u0001\u0000\u0000\u0000\u0162"+
		"\u0f4d\u0001\u0000\u0000\u0000\u0164\u0f52\u0001\u0000\u0000\u0000\u0166"+
		"\u0f59\u0001\u0000\u0000\u0000\u0168\u0f5d\u0001\u0000\u0000\u0000\u016a"+
		"\u0f62\u0001\u0000\u0000\u0000\u016c\u0f68\u0001\u0000\u0000\u0000\u016e"+
		"\u0f6f\u0001\u0000\u0000\u0000\u0170\u0f71\u0001\u0000\u0000\u0000\u0172"+
		"\u0f76\u0001\u0000\u0000\u0000\u0174\u0f78\u0001\u0000\u0000\u0000\u0176"+
		"\u0f7c\u0001\u0000\u0000\u0000\u0178\u0fa1\u0001\u0000\u0000\u0000\u017a"+
		"\u0fd1\u0001\u0000\u0000\u0000\u017c\u0fd3\u0001\u0000\u0000\u0000\u017e"+
		"\u0fdb\u0001\u0000\u0000\u0000\u0180\u0fe9\u0001\u0000\u0000\u0000\u0182"+
		"\u0feb\u0001\u0000\u0000\u0000\u0184\u0fee\u0001\u0000\u0000\u0000\u0186"+
		"\u0ff1\u0001\u0000\u0000\u0000\u0188\u0ff9\u0001\u0000\u0000\u0000\u018a"+
		"\u1003\u0001\u0000\u0000\u0000\u018c\u100b\u0001\u0000\u0000\u0000\u018e"+
		"\u1019\u0001\u0000\u0000\u0000\u0190\u102d\u0001\u0000\u0000\u0000\u0192"+
		"\u102f\u0001\u0000\u0000\u0000\u0194\u103e\u0001\u0000\u0000\u0000\u0196"+
		"\u1048\u0001\u0000\u0000\u0000\u0198\u104a\u0001\u0000\u0000\u0000\u019a"+
		"\u1052\u0001\u0000\u0000\u0000\u019c\u1068\u0001\u0000\u0000\u0000\u019e"+
		"\u106b\u0001\u0000\u0000\u0000\u01a0\u106e\u0001\u0000\u0000\u0000\u01a2"+
		"\u1075\u0001\u0000\u0000\u0000\u01a4\u1081\u0001\u0000\u0000\u0000\u01a6"+
		"\u108c\u0001\u0000\u0000\u0000\u01a8\u1094\u0001\u0000\u0000\u0000\u01aa"+
		"\u1096\u0001\u0000\u0000\u0000\u01ac\u109b\u0001\u0000\u0000\u0000\u01ae"+
		"\u10a4\u0001\u0000\u0000\u0000\u01b0\u10d6\u0001\u0000\u0000\u0000\u01b2"+
		"\u10e8\u0001\u0000\u0000\u0000\u01b4\u10f1\u0001\u0000\u0000\u0000\u01b6"+
		"\u10f3\u0001\u0000\u0000\u0000\u01b8\u1105\u0001\u0000\u0000\u0000\u01ba"+
		"\u1107\u0001\u0000\u0000\u0000\u01bc\u110f\u0001\u0000\u0000\u0000\u01be"+
		"\u1119\u0001\u0000\u0000\u0000\u01c0\u111e\u0001\u0000\u0000\u0000\u01c2"+
		"\u1126\u0001\u0000\u0000\u0000\u01c4\u112b\u0001\u0000\u0000\u0000\u01c6"+
		"\u112d\u0001\u0000\u0000\u0000\u01c8\u115a\u0001\u0000\u0000\u0000\u01ca"+
		"\u115c\u0001\u0000\u0000\u0000\u01cc\u1164\u0001\u0000\u0000\u0000\u01ce"+
		"\u1174\u0001\u0000\u0000\u0000\u01d0\u1179\u0001\u0000\u0000\u0000\u01d2"+
		"\u117d\u0001\u0000\u0000\u0000\u01d4\u1181\u0001\u0000\u0000\u0000\u01d6"+
		"\u11aa\u0001\u0000\u0000\u0000\u01d8\u11ac\u0001\u0000\u0000\u0000\u01da"+
		"\u11c7\u0001\u0000\u0000\u0000\u01dc\u11c9\u0001\u0000\u0000\u0000\u01de"+
		"\u11cb\u0001\u0000\u0000\u0000\u01e0\u01e3\u0003&\u0013\u0000\u01e1\u01e3"+
		"\u0003\u0002\u0001\u0000\u01e2\u01e0\u0001\u0000\u0000\u0000\u01e2\u01e1"+
		"\u0001\u0000\u0000\u0000\u01e3\u0001\u0001\u0000\u0000\u0000\u01e4\u01e6"+
		"\u0005\u001a\u0000\u0000\u01e5\u01e7\u0003\u0006\u0003\u0000\u01e6\u01e5"+
		"\u0001\u0000\u0000\u0000\u01e6\u01e7\u0001\u0000\u0000\u0000\u01e7\u01e8"+
		"\u0001\u0000\u0000\u0000\u01e8\u01ea\u0005p\u0000\u0000\u01e9\u01eb\u0005"+
		"\u0001\u0000\u0000\u01ea\u01e9\u0001\u0000\u0000\u0000\u01ea\u01eb\u0001"+
		"\u0000\u0000\u0000\u01eb\u01ec\u0001\u0000\u0000\u0000\u01ec\u01ed\u0005"+
		"\u0000\u0000\u0001\u01ed\u0003\u0001\u0000\u0000\u0000\u01ee\u01f0\u0003"+
		"(\u0014\u0000\u01ef\u01ee\u0001\u0000\u0000\u0000\u01ef\u01f0\u0001\u0000"+
		"\u0000\u0000\u01f0\u01f1\u0001\u0000\u0000\u0000\u01f1\u01f3\u0005\u001a"+
		"\u0000\u0000\u01f2\u01f4\u0003\u0006\u0003\u0000\u01f3\u01f2\u0001\u0000"+
		"\u0000\u0000\u01f3\u01f4\u0001\u0000\u0000\u0000\u01f4\u01f5\u0001\u0000"+
		"\u0000\u0000\u01f5\u01f7\u0005p\u0000\u0000\u01f6\u01f8\u0003*\u0015\u0000"+
		"\u01f7\u01f6\u0001\u0000\u0000\u0000\u01f7\u01f8\u0001\u0000\u0000\u0000"+
		"\u01f8\u0005\u0001\u0000\u0000\u0000\u01f9\u01fa\u0003\b\u0004\u0000\u01fa"+
		"\u01fb\u0005\u0001\u0000\u0000\u01fb\u01fd\u0001\u0000\u0000\u0000\u01fc"+
		"\u01f9\u0001\u0000\u0000\u0000\u01fd\u01fe\u0001\u0000\u0000\u0000\u01fe"+
		"\u01fc\u0001\u0000\u0000\u0000\u01fe\u01ff\u0001\u0000\u0000\u0000\u01ff"+
		"\u0007\u0001\u0000\u0000\u0000\u0200\u020e\u00038\u001c\u0000\u0201\u020e"+
		"\u0003\n\u0005\u0000\u0202\u020e\u0003\u0004\u0002\u0000\u0203\u020e\u0003"+
		"\u000e\u0007\u0000\u0204\u020e\u0003\u0014\n\u0000\u0205\u020e\u0003\u0018"+
		"\f\u0000\u0206\u020e\u0003 \u0010\u0000\u0207\u020e\u0003\u0016\u000b"+
		"\u0000\u0208\u020e\u0003\u001a\r\u0000\u0209\u020e\u0003\u001c\u000e\u0000"+
		"\u020a\u020e\u0003\u001e\u000f\u0000\u020b\u020e\u0003\"\u0011\u0000\u020c"+
		"\u020e\u0003$\u0012\u0000\u020d\u0200\u0001\u0000\u0000\u0000\u020d\u0201"+
		"\u0001\u0000\u0000\u0000\u020d\u0202\u0001\u0000\u0000\u0000\u020d\u0203"+
		"\u0001\u0000\u0000\u0000\u020d\u0204\u0001\u0000\u0000\u0000\u020d\u0205"+
		"\u0001\u0000\u0000\u0000\u020d\u0206\u0001\u0000\u0000\u0000\u020d\u0207"+
		"\u0001\u0000\u0000\u0000\u020d\u0208\u0001\u0000\u0000\u0000\u020d\u0209"+
		"\u0001\u0000\u0000\u0000\u020d\u020a\u0001\u0000\u0000\u0000\u020d\u020b"+
		"\u0001\u0000\u0000\u0000\u020d\u020c\u0001\u0000\u0000\u0000\u020e\t\u0001"+
		"\u0000\u0000\u0000\u020f\u0211\u0005\u0129\u0000\u0000\u0210\u0212\u0003"+
		"n7\u0000\u0211\u0210\u0001\u0000\u0000\u0000\u0211\u0212\u0001\u0000\u0000"+
		"\u0000\u0212\u0213\u0001\u0000\u0000\u0000\u0213\u0221\u0003\u00be_\u0000"+
		"\u0214\u0216\u0005\u0129\u0000\u0000\u0215\u0217\u0003n7\u0000\u0216\u0215"+
		"\u0001\u0000\u0000\u0000\u0216\u0217\u0001\u0000\u0000\u0000\u0217\u0218"+
		"\u0001\u0000\u0000\u0000\u0218\u0219\u0005\u0002\u0000\u0000\u0219\u021a"+
		"\u0003\u0128\u0094\u0000\u021a\u021b\u0005\u0003\u0000\u0000\u021b\u021c"+
		"\u0005\u0183\u0000\u0000\u021c\u021d\u0005\u0002\u0000\u0000\u021d\u021e"+
		"\u0003`0\u0000\u021e\u021f\u0005\u0003\u0000\u0000\u021f\u0221\u0001\u0000"+
		"\u0000\u0000\u0220\u020f\u0001\u0000\u0000\u0000\u0220\u0214\u0001\u0000"+
		"\u0000\u0000\u0221\u000b\u0001\u0000\u0000\u0000\u0222\u0223\u0003\u01d0"+
		"\u00e8\u0000\u0223\r\u0001\u0000\u0000\u0000\u0224\u0225\u0005\\\u0000"+
		"\u0000\u0225\u0226\u0003\u012a\u0095\u0000\u0226\u022d\u0005A\u0000\u0000"+
		"\u0227\u0228\u0005\u0087\u0000\u0000\u0228\u022a\u0005\u0138\u0000\u0000"+
		"\u0229\u022b\u0005\u016e\u0000\u0000\u022a\u0229\u0001\u0000\u0000\u0000"+
		"\u022a\u022b\u0001\u0000\u0000\u0000\u022b\u022c\u0001\u0000\u0000\u0000"+
		"\u022c\u022e\u0003\f\u0006\u0000\u022d\u0227\u0001\u0000\u0000\u0000\u022d"+
		"\u022e\u0001\u0000\u0000\u0000\u022e\u000f\u0001\u0000\u0000\u0000\u022f"+
		"\u0231\u0005\u0138\u0000\u0000\u0230\u0232\u0005\u016e\u0000\u0000\u0231"+
		"\u0230\u0001\u0000\u0000\u0000\u0231\u0232\u0001\u0000\u0000\u0000\u0232"+
		"\u0233\u0001\u0000\u0000\u0000\u0233\u0239\u0003\f\u0006\u0000\u0234\u0239"+
		"\u0005\u0137\u0000\u0000\u0235\u0236\u0005\u00e0\u0000\u0000\u0236\u0239"+
		"\u0005\u008b\u0000\u0000\u0237\u0239\u0003\u012a\u0095\u0000\u0238\u022f"+
		"\u0001\u0000\u0000\u0000\u0238\u0234\u0001\u0000\u0000\u0000\u0238\u0235"+
		"\u0001\u0000\u0000\u0000\u0238\u0237\u0001\u0000\u0000\u0000\u0239\u0011"+
		"\u0001\u0000\u0000\u0000\u023a\u023f\u0003\u0010\b\u0000\u023b\u023c\u0005"+
		"\u0004\u0000\u0000\u023c\u023e\u0003\u0010\b\u0000\u023d\u023b\u0001\u0000"+
		"\u0000\u0000\u023e\u0241\u0001\u0000\u0000\u0000\u023f\u023d\u0001\u0000"+
		"\u0000\u0000\u023f\u0240\u0001\u0000\u0000\u0000\u0240\u0013\u0001\u0000"+
		"\u0000\u0000\u0241\u023f\u0001\u0000\u0000\u0000\u0242\u0243\u0005\\\u0000"+
		"\u0000\u0243\u0244\u0007\u0000\u0000\u0000\u0244\u0245\u0005\u0095\u0000"+
		"\u0000\u0245\u0246\u0005\u0087\u0000\u0000\u0246\u024a\u0003\u0012\t\u0000"+
		"\u0247\u024b\u0003\u0004\u0002\u0000\u0248\u024b\u00038\u001c\u0000\u0249"+
		"\u024b\u0003\n\u0005\u0000\u024a\u0247\u0001\u0000\u0000\u0000\u024a\u0248"+
		"\u0001\u0000\u0000\u0000\u024a\u0249\u0001\u0000\u0000\u0000\u024b\u0015"+
		"\u0001\u0000\u0000\u0000\u024c\u024e\u0003(\u0014\u0000\u024d\u024c\u0001"+
		"\u0000\u0000\u0000\u024d\u024e\u0001\u0000\u0000\u0000\u024e\u024f\u0001"+
		"\u0000\u0000\u0000\u024f\u0250\u0005\u017c\u0000\u0000\u0250\u0251\u0003"+
		"\u0148\u00a4\u0000\u0251\u0252\u0005k\u0000\u0000\u0252\u0253\u0003\u0006"+
		"\u0003\u0000\u0253\u0254\u0005p\u0000\u0000\u0254\u0256\u0005\u017c\u0000"+
		"\u0000\u0255\u0257\u0003*\u0015\u0000\u0256\u0255\u0001\u0000\u0000\u0000"+
		"\u0256\u0257\u0001\u0000\u0000\u0000\u0257\u0017\u0001\u0000\u0000\u0000"+
		"\u0258\u0259\u0005\u009c\u0000\u0000\u0259\u025a\u0003\u0148\u00a4\u0000"+
		"\u025a\u025b\u0005\u014b\u0000\u0000\u025b\u0263\u0003\u0006\u0003\u0000"+
		"\u025c\u025d\u0005o\u0000\u0000\u025d\u025e\u0003\u0148\u00a4\u0000\u025e"+
		"\u025f\u0005\u014b\u0000\u0000\u025f\u0260\u0003\u0006\u0003\u0000\u0260"+
		"\u0262\u0001\u0000\u0000\u0000\u0261\u025c\u0001\u0000\u0000\u0000\u0262"+
		"\u0265\u0001\u0000\u0000\u0000\u0263\u0261\u0001\u0000\u0000\u0000\u0263"+
		"\u0264\u0001\u0000\u0000\u0000\u0264\u0268\u0001\u0000\u0000\u0000\u0265"+
		"\u0263\u0001\u0000\u0000\u0000\u0266\u0267\u0005n\u0000\u0000\u0267\u0269"+
		"\u0003\u0006\u0003\u0000\u0268\u0266\u0001\u0000\u0000\u0000\u0268\u0269"+
		"\u0001\u0000\u0000\u0000\u0269\u026a\u0001\u0000\u0000\u0000\u026a\u026b"+
		"\u0005p\u0000\u0000\u026b\u026c\u0005\u009c\u0000\u0000\u026c\u0019\u0001"+
		"\u0000\u0000\u0000\u026d\u026f\u0003(\u0014\u0000\u026e\u026d\u0001\u0000"+
		"\u0000\u0000\u026e\u026f\u0001\u0000\u0000\u0000\u026f\u0270\u0001\u0000"+
		"\u0000\u0000\u0270\u0271\u0005\u010d\u0000\u0000\u0271\u0272\u0003\u0006"+
		"\u0003\u0000\u0272\u0273\u0005\u0169\u0000\u0000\u0273\u0274\u0003\u0148"+
		"\u00a4\u0000\u0274\u0275\u0005p\u0000\u0000\u0275\u0277\u0005\u010d\u0000"+
		"\u0000\u0276\u0278\u0003*\u0015\u0000\u0277\u0276\u0001\u0000\u0000\u0000"+
		"\u0277\u0278\u0001\u0000\u0000\u0000\u0278\u001b\u0001\u0000\u0000\u0000"+
		"\u0279\u027a\u0005\u00bb\u0000\u0000\u027a\u027b\u0003\u012a\u0095\u0000"+
		"\u027b\u001d\u0001\u0000\u0000\u0000\u027c\u027d\u0005\u00b2\u0000\u0000"+
		"\u027d\u027e\u0003\u012a\u0095\u0000\u027e\u001f\u0001\u0000\u0000\u0000"+
		"\u027f\u0285\u0005)\u0000\u0000\u0280\u0281\u0005\u017a\u0000\u0000\u0281"+
		"\u0282\u0003\u0148\u00a4\u0000\u0282\u0283\u0005\u014b\u0000\u0000\u0283"+
		"\u0284\u0003\u0006\u0003\u0000\u0284\u0286\u0001\u0000\u0000\u0000\u0285"+
		"\u0280\u0001\u0000\u0000\u0000\u0286\u0287\u0001\u0000\u0000\u0000\u0287"+
		"\u0285\u0001\u0000\u0000\u0000\u0287\u0288\u0001\u0000\u0000\u0000\u0288"+
		"\u028b\u0001\u0000\u0000\u0000\u0289\u028a\u0005n\u0000\u0000\u028a\u028c"+
		"\u0003\u0006\u0003\u0000\u028b\u0289\u0001\u0000\u0000\u0000\u028b\u028c"+
		"\u0001\u0000\u0000\u0000\u028c\u028d\u0001\u0000\u0000\u0000\u028d\u028e"+
		"\u0005p\u0000\u0000\u028e\u028f\u0005)\u0000\u0000\u028f\u02a3\u0001\u0000"+
		"\u0000\u0000\u0290\u0291\u0005)\u0000\u0000\u0291\u0297\u0003\u0140\u00a0"+
		"\u0000\u0292\u0293\u0005\u017a\u0000\u0000\u0293\u0294\u0003\u0140\u00a0"+
		"\u0000\u0294\u0295\u0005\u014b\u0000\u0000\u0295\u0296\u0003\u0006\u0003"+
		"\u0000\u0296\u0298\u0001\u0000\u0000\u0000\u0297\u0292\u0001\u0000\u0000"+
		"\u0000\u0298\u0299\u0001\u0000\u0000\u0000\u0299\u0297\u0001\u0000\u0000"+
		"\u0000\u0299\u029a\u0001\u0000\u0000\u0000\u029a\u029d\u0001\u0000\u0000"+
		"\u0000\u029b\u029c\u0005n\u0000\u0000\u029c\u029e\u0003\u0006\u0003\u0000"+
		"\u029d\u029b\u0001\u0000\u0000\u0000\u029d\u029e\u0001\u0000\u0000\u0000"+
		"\u029e\u029f\u0001\u0000\u0000\u0000\u029f\u02a0\u0005p\u0000\u0000\u02a0"+
		"\u02a1\u0005)\u0000\u0000\u02a1\u02a3\u0001\u0000\u0000\u0000\u02a2\u027f"+
		"\u0001\u0000\u0000\u0000\u02a2\u0290\u0001\u0000\u0000\u0000\u02a3!\u0001"+
		"\u0000\u0000\u0000\u02a4\u02a6\u0003(\u0014\u0000\u02a5\u02a4\u0001\u0000"+
		"\u0000\u0000\u02a5\u02a6\u0001\u0000\u0000\u0000\u02a6\u02a7\u0001\u0000"+
		"\u0000\u0000\u02a7\u02a8\u0005\u00c9\u0000\u0000\u02a8\u02a9\u0003\u0006"+
		"\u0003\u0000\u02a9\u02aa\u0005p\u0000\u0000\u02aa\u02ac\u0005\u00c9\u0000"+
		"\u0000\u02ab\u02ad\u0003*\u0015\u0000\u02ac\u02ab\u0001\u0000\u0000\u0000"+
		"\u02ac\u02ad\u0001\u0000\u0000\u0000\u02ad#\u0001\u0000\u0000\u0000\u02ae"+
		"\u02b0\u0003(\u0014\u0000\u02af\u02ae\u0001\u0000\u0000\u0000\u02af\u02b0"+
		"\u0001\u0000\u0000\u0000\u02b0\u02b1\u0001\u0000\u0000\u0000\u02b1\u02b5"+
		"\u0005\u0087\u0000\u0000\u02b2\u02b3\u0003\u012a\u0095\u0000\u02b3\u02b4"+
		"\u0005\u0016\u0000\u0000\u02b4\u02b6\u0001\u0000\u0000\u0000\u02b5\u02b2"+
		"\u0001\u0000\u0000\u0000\u02b5\u02b6\u0001\u0000\u0000\u0000\u02b6\u02b7"+
		"\u0001\u0000\u0000\u0000\u02b7\u02b8\u0003`0\u0000\u02b8\u02b9\u0005k"+
		"\u0000\u0000\u02b9\u02ba\u0003\u0006\u0003\u0000\u02ba\u02bb\u0005p\u0000"+
		"\u0000\u02bb\u02bd\u0005\u0087\u0000\u0000\u02bc\u02be\u0003*\u0015\u0000"+
		"\u02bd\u02bc\u0001\u0000\u0000\u0000\u02bd\u02be\u0001\u0000\u0000\u0000"+
		"\u02be%\u0001\u0000\u0000\u0000\u02bf\u02c2\u00038\u001c\u0000\u02c0\u02c2"+
		"\u0003:\u001d\u0000\u02c1\u02bf\u0001\u0000\u0000\u0000\u02c1\u02c0\u0001"+
		"\u0000\u0000\u0000\u02c2\u02c6\u0001\u0000\u0000\u0000\u02c3\u02c5\u0005"+
		"\u0001\u0000\u0000\u02c4\u02c3\u0001\u0000\u0000\u0000\u02c5\u02c8\u0001"+
		"\u0000\u0000\u0000\u02c6\u02c4\u0001\u0000\u0000\u0000\u02c6\u02c7\u0001"+
		"\u0000\u0000\u0000\u02c7\u02c9\u0001\u0000\u0000\u0000\u02c8\u02c6\u0001"+
		"\u0000\u0000\u0000\u02c9\u02ca\u0005\u0000\u0000\u0001\u02ca\'\u0001\u0000"+
		"\u0000\u0000\u02cb\u02cc\u0003\u012a\u0095\u0000\u02cc\u02cd\u0005\u0199"+
		"\u0000\u0000\u02cd)\u0001\u0000\u0000\u0000\u02ce\u02cf\u0003\u012a\u0095"+
		"\u0000\u02cf+\u0001\u0000\u0000\u0000\u02d0\u02d1\u0003\u0134\u009a\u0000"+
		"\u02d1\u02d2\u0005\u0000\u0000\u0001\u02d2-\u0001\u0000\u0000\u0000\u02d3"+
		"\u02d4\u0003\u0130\u0098\u0000\u02d4\u02d5\u0005\u0000\u0000\u0001\u02d5"+
		"/\u0001\u0000\u0000\u0000\u02d6\u02d7\u0003\u012a\u0095\u0000\u02d7\u02d8"+
		"\u0005\u0000\u0000\u0001\u02d81\u0001\u0000\u0000\u0000\u02d9\u02da\u0003"+
		"\u0132\u0099\u0000\u02da\u02db\u0005\u0000\u0000\u0001\u02db3\u0001\u0000"+
		"\u0000\u0000\u02dc\u02dd\u0003\u017a\u00bd\u0000\u02dd\u02de\u0005\u0000"+
		"\u0000\u0001\u02de5\u0001\u0000\u0000\u0000\u02df\u02e0\u0003\u0186\u00c3"+
		"\u0000\u02e0\u02e1\u0005\u0000\u0000\u0001\u02e17\u0001\u0000\u0000\u0000"+
		"\u02e2\u0636\u0003`0\u0000\u02e3\u0636\u0003<\u001e\u0000\u02e4\u02e6"+
		"\u0003t:\u0000\u02e5\u02e4\u0001\u0000\u0000\u0000\u02e5\u02e6\u0001\u0000"+
		"\u0000\u0000\u02e6\u02e7\u0001\u0000\u0000\u0000\u02e7\u0636\u0003\u0094"+
		"J\u0000\u02e8\u02e9\u0005\u016b\u0000\u0000\u02e9\u0636\u0003\u0096K\u0000"+
		"\u02ea\u02eb\u0005\u016b\u0000\u0000\u02eb\u02ec\u0003j5\u0000\u02ec\u02ed"+
		"\u0003\u0096K\u0000\u02ed\u0636\u0001\u0000\u0000\u0000\u02ee\u02ef\u0005"+
		"\u0129\u0000\u0000\u02ef\u02f0\u0005+\u0000\u0000\u02f0\u0636\u0003\u0098"+
		"L\u0000\u02f1\u02f2\u0005F\u0000\u0000\u02f2\u02f7\u0003j5\u0000\u02f3"+
		"\u02f4\u0005\u009c\u0000\u0000\u02f4\u02f5\u0003\u014c\u00a6\u0000\u02f5"+
		"\u02f6\u0005w\u0000\u0000\u02f6\u02f8\u0001\u0000\u0000\u0000\u02f7\u02f3"+
		"\u0001\u0000\u0000\u0000\u02f7\u02f8\u0001\u0000\u0000\u0000\u02f8\u02f9"+
		"\u0001\u0000\u0000\u0000\u02f9\u0301\u0003\u0096K\u0000\u02fa\u0300\u0003"+
		"\\.\u0000\u02fb\u0300\u0003X,\u0000\u02fc\u02fd\u0005\u017e\u0000\u0000"+
		"\u02fd\u02fe\u0007\u0001\u0000\u0000\u02fe\u0300\u0003|>\u0000\u02ff\u02fa"+
		"\u0001\u0000\u0000\u0000\u02ff\u02fb\u0001\u0000\u0000\u0000\u02ff\u02fc"+
		"\u0001\u0000\u0000\u0000\u0300\u0303\u0001\u0000\u0000\u0000\u0301\u02ff"+
		"\u0001\u0000\u0000\u0000\u0301\u0302\u0001\u0000\u0000\u0000\u0302\u0636"+
		"\u0001\u0000\u0000\u0000\u0303\u0301\u0001\u0000\u0000\u0000\u0304\u0305"+
		"\u0005\r\u0000\u0000\u0305\u0306\u0003j5\u0000\u0306\u0307\u0003\u0096"+
		"K\u0000\u0307\u0308\u0005\u0129\u0000\u0000\u0308\u0309\u0007\u0001\u0000"+
		"\u0000\u0309\u030a\u0003|>\u0000\u030a\u0636\u0001\u0000\u0000\u0000\u030b"+
		"\u030c\u0005\r\u0000\u0000\u030c\u030d\u0003j5\u0000\u030d\u030e\u0003"+
		"\u0096K\u0000\u030e\u030f\u0005\u0168\u0000\u0000\u030f\u0310\u0007\u0001"+
		"\u0000\u0000\u0310\u0311\u0003|>\u0000\u0311\u0636\u0001\u0000\u0000\u0000"+
		"\u0312\u0313\u0005\r\u0000\u0000\u0313\u0314\u0003j5\u0000\u0314\u0315"+
		"\u0003\u0096K\u0000\u0315\u0316\u0005\u0129\u0000\u0000\u0316\u0317\u0003"+
		"X,\u0000\u0317\u0636\u0001\u0000\u0000\u0000\u0318\u0319\u0005m\u0000"+
		"\u0000\u0319\u031c\u0003j5\u0000\u031a\u031b\u0005\u009c\u0000\u0000\u031b"+
		"\u031d\u0005w\u0000\u0000\u031c\u031a\u0001\u0000\u0000\u0000\u031c\u031d"+
		"\u0001\u0000\u0000\u0000\u031d\u031e\u0001\u0000\u0000\u0000\u031e\u0320"+
		"\u0003\u0096K\u0000\u031f\u0321\u0007\u0002\u0000\u0000\u0320\u031f\u0001"+
		"\u0000\u0000\u0000\u0320\u0321\u0001\u0000\u0000\u0000\u0321\u0636\u0001"+
		"\u0000\u0000\u0000\u0322\u0323\u0005\u012d\u0000\u0000\u0323\u0326\u0003"+
		"l6\u0000\u0324\u0325\u0007\u0003\u0000\u0000\u0325\u0327\u0003\u012a\u0095"+
		"\u0000\u0326\u0324\u0001\u0000\u0000\u0000\u0326\u0327\u0001\u0000\u0000"+
		"\u0000\u0327\u032c\u0001\u0000\u0000\u0000\u0328\u032a\u0005\u00bd\u0000"+
		"\u0000\u0329\u0328\u0001\u0000\u0000\u0000\u0329\u032a\u0001\u0000\u0000"+
		"\u0000\u032a\u032b\u0001\u0000\u0000\u0000\u032b\u032d\u0003\u01d0\u00e8"+
		"\u0000\u032c\u0329\u0001\u0000\u0000\u0000\u032c\u032d\u0001\u0000\u0000"+
		"\u0000\u032d\u0636\u0001\u0000\u0000\u0000\u032e\u0333\u0003N\'\u0000"+
		"\u032f\u0330\u0005\u0002\u0000\u0000\u0330\u0331\u0003\u018a\u00c5\u0000"+
		"\u0331\u0332\u0005\u0003\u0000\u0000\u0332\u0334\u0001\u0000\u0000\u0000"+
		"\u0333\u032f\u0001\u0000\u0000\u0000\u0333\u0334\u0001\u0000\u0000\u0000"+
		"\u0334\u0336\u0001\u0000\u0000\u0000\u0335\u0337\u0003x<\u0000\u0336\u0335"+
		"\u0001\u0000\u0000\u0000\u0336\u0337\u0001\u0000\u0000\u0000\u0337\u0338"+
		"\u0001\u0000\u0000\u0000\u0338\u033d\u0003z=\u0000\u0339\u033b\u0005\u0016"+
		"\u0000\u0000\u033a\u0339\u0001\u0000\u0000\u0000\u033a\u033b\u0001\u0000"+
		"\u0000\u0000\u033b\u033c\u0001\u0000\u0000\u0000\u033c\u033e\u0003`0\u0000"+
		"\u033d\u033a\u0001\u0000\u0000\u0000\u033d\u033e\u0001\u0000\u0000\u0000"+
		"\u033e\u0636\u0001\u0000\u0000\u0000\u033f\u0340\u0005F\u0000\u0000\u0340"+
		"\u0345\u0005\u0144\u0000\u0000\u0341\u0342\u0005\u009c\u0000\u0000\u0342"+
		"\u0343\u0003\u014c\u00a6\u0000\u0343\u0344\u0005w\u0000\u0000\u0344\u0346"+
		"\u0001\u0000\u0000\u0000\u0345\u0341\u0001\u0000\u0000\u0000\u0345\u0346"+
		"\u0001\u0000\u0000\u0000\u0346\u0347\u0001\u0000\u0000\u0000\u0347\u0348"+
		"\u0003\u0130\u0098\u0000\u0348\u0349\u0005\u00bd\u0000\u0000\u0349\u0352"+
		"\u0003\u0130\u0098\u0000\u034a\u0351\u0003x<\u0000\u034b\u0351\u0003\u0126"+
		"\u0093\u0000\u034c\u0351\u0003\u008cF\u0000\u034d\u0351\u0003X,\u0000"+
		"\u034e\u034f\u0005\u0148\u0000\u0000\u034f\u0351\u0003|>\u0000\u0350\u034a"+
		"\u0001\u0000\u0000\u0000\u0350\u034b\u0001\u0000\u0000\u0000\u0350\u034c"+
		"\u0001\u0000\u0000\u0000\u0350\u034d\u0001\u0000\u0000\u0000\u0350\u034e"+
		"\u0001\u0000\u0000\u0000\u0351\u0354\u0001\u0000\u0000\u0000\u0352\u0350"+
		"\u0001\u0000\u0000\u0000\u0352\u0353\u0001\u0000\u0000\u0000\u0353\u0636"+
		"\u0001\u0000\u0000\u0000\u0354\u0352\u0001\u0000\u0000\u0000\u0355\u035a"+
		"\u0003P(\u0000\u0356\u0357\u0005\u0002\u0000\u0000\u0357\u0358\u0003\u018a"+
		"\u00c5\u0000\u0358\u0359\u0005\u0003\u0000\u0000\u0359\u035b\u0001\u0000"+
		"\u0000\u0000\u035a\u0356\u0001\u0000\u0000\u0000\u035a\u035b\u0001\u0000"+
		"\u0000\u0000\u035b\u035d\u0001\u0000\u0000\u0000\u035c\u035e\u0003x<\u0000"+
		"\u035d\u035c\u0001\u0000\u0000\u0000\u035d\u035e\u0001\u0000\u0000\u0000"+
		"\u035e\u035f\u0001\u0000\u0000\u0000\u035f\u0364\u0003z=\u0000\u0360\u0362"+
		"\u0005\u0016\u0000\u0000\u0361\u0360\u0001\u0000\u0000\u0000\u0361\u0362"+
		"\u0001\u0000\u0000\u0000\u0362\u0363\u0001\u0000\u0000\u0000\u0363\u0365"+
		"\u0003`0\u0000\u0364\u0361\u0001\u0000\u0000\u0000\u0364\u0365\u0001\u0000"+
		"\u0000\u0000\u0365\u0636\u0001\u0000\u0000\u0000\u0366\u0367\u0005\u000f"+
		"\u0000\u0000\u0367\u0368\u0005\u0144\u0000\u0000\u0368\u036a\u0003\u0096"+
		"K\u0000\u0369\u036b\u0003f3\u0000\u036a\u0369\u0001\u0000\u0000\u0000"+
		"\u036a\u036b\u0001\u0000\u0000\u0000\u036b\u036c\u0001\u0000\u0000\u0000"+
		"\u036c\u036d\u0005?\u0000\u0000\u036d\u0375\u0005\u013a\u0000\u0000\u036e"+
		"\u0376\u0003\u01c0\u00e0\u0000\u036f\u0370\u0005\u0087\u0000\u0000\u0370"+
		"\u0371\u00059\u0000\u0000\u0371\u0376\u0003\u0108\u0084\u0000\u0372\u0373"+
		"\u0005\u0087\u0000\u0000\u0373\u0374\u0005\f\u0000\u0000\u0374\u0376\u0005"+
		"9\u0000\u0000\u0375\u036e\u0001\u0000\u0000\u0000\u0375\u036f\u0001\u0000"+
		"\u0000\u0000\u0375\u0372\u0001\u0000\u0000\u0000\u0375\u0376\u0001\u0000"+
		"\u0000\u0000\u0376\u0636\u0001\u0000\u0000\u0000\u0377\u0378\u0005\u000f"+
		"\u0000\u0000\u0378\u037b\u0005\u0145\u0000\u0000\u0379\u037a\u0007\u0003"+
		"\u0000\u0000\u037a\u037c\u0003\u0096K\u0000\u037b\u0379\u0001\u0000\u0000"+
		"\u0000\u037b\u037c\u0001\u0000\u0000\u0000\u037c\u037d\u0001\u0000\u0000"+
		"\u0000\u037d\u037e\u0005?\u0000\u0000\u037e\u0380\u0005\u013a\u0000\u0000"+
		"\u037f\u0381\u0003\u01c0\u00e0\u0000\u0380\u037f\u0001\u0000\u0000\u0000"+
		"\u0380\u0381\u0001\u0000\u0000\u0000\u0381\u0636\u0001\u0000\u0000\u0000"+
		"\u0382\u0383\u0005\r\u0000\u0000\u0383\u0384\u0005\u0144\u0000\u0000\u0384"+
		"\u0385\u0003\u0096K\u0000\u0385\u0386\u0005\t\u0000\u0000\u0386\u0387"+
		"\u0007\u0004\u0000\u0000\u0387\u0388\u0003\u017c\u00be\u0000\u0388\u0636"+
		"\u0001\u0000\u0000\u0000\u0389\u038a\u0005\r\u0000\u0000\u038a\u038b\u0005"+
		"\u0144\u0000\u0000\u038b\u038c\u0003\u0096K\u0000\u038c\u038d\u0005\t"+
		"\u0000\u0000\u038d\u038e\u0007\u0004\u0000\u0000\u038e\u038f\u0005\u0002"+
		"\u0000\u0000\u038f\u0390\u0003\u017c\u00be\u0000\u0390\u0391\u0005\u0003"+
		"\u0000\u0000\u0391\u0636\u0001\u0000\u0000\u0000\u0392\u0393\u0005\r\u0000"+
		"\u0000\u0393\u0394\u0005\u0144\u0000\u0000\u0394\u0395\u0003\u0096K\u0000"+
		"\u0395\u0396\u0005\u010b\u0000\u0000\u0396\u0397\u00058\u0000\u0000\u0397"+
		"\u0398\u0003\u012a\u0095\u0000\u0398\u0399\u0005\u0154\u0000\u0000\u0399"+
		"\u039a\u0003\u01bc\u00de\u0000\u039a\u0636\u0001\u0000\u0000\u0000\u039b"+
		"\u039c\u0005\r\u0000\u0000\u039c\u039d\u0005\u0144\u0000\u0000\u039d\u039e"+
		"\u0003\u0096K\u0000\u039e\u039f\u0005m\u0000\u0000\u039f\u03a2\u0007\u0004"+
		"\u0000\u0000\u03a0\u03a1\u0005\u009c\u0000\u0000\u03a1\u03a3\u0005w\u0000"+
		"\u0000\u03a2\u03a0\u0001\u0000\u0000\u0000\u03a2\u03a3\u0001\u0000\u0000"+
		"\u0000\u03a3\u03a4\u0001\u0000\u0000\u0000\u03a4\u03a5\u0005\u0002\u0000"+
		"\u0000\u03a5\u03a6\u0003\u0128\u0094\u0000\u03a6\u03a7\u0005\u0003\u0000"+
		"\u0000\u03a7\u0636\u0001\u0000\u0000\u0000\u03a8\u03a9\u0005\r\u0000\u0000"+
		"\u03a9\u03aa\u0005\u0144\u0000\u0000\u03aa\u03ab\u0003\u0096K\u0000\u03ab"+
		"\u03ac\u0005m\u0000\u0000\u03ac\u03af\u0007\u0004\u0000\u0000\u03ad\u03ae"+
		"\u0005\u009c\u0000\u0000\u03ae\u03b0\u0005w\u0000\u0000\u03af\u03ad\u0001"+
		"\u0000\u0000\u0000\u03af\u03b0\u0001\u0000\u0000\u0000\u03b0\u03b1\u0001"+
		"\u0000\u0000\u0000\u03b1\u03b2\u0003\u0128\u0094\u0000\u03b2\u0636\u0001"+
		"\u0000\u0000\u0000\u03b3\u03b4\u0005\r\u0000\u0000\u03b4\u03b5\u0007\u0005"+
		"\u0000\u0000\u03b5\u03b6\u0003\u0096K\u0000\u03b6\u03b7\u0005\u010b\u0000"+
		"\u0000\u03b7\u03b8\u0005\u0154\u0000\u0000\u03b8\u03b9\u0003\u012a\u0095"+
		"\u0000\u03b9\u0636\u0001\u0000\u0000\u0000\u03ba\u03bb\u0005\r\u0000\u0000"+
		"\u03bb\u03bc\u0007\u0005\u0000\u0000\u03bc\u03bd\u0003\u0096K\u0000\u03bd"+
		"\u03be\u0005\u0129\u0000\u0000\u03be\u03bf\u0005\u0148\u0000\u0000\u03bf"+
		"\u03c0\u0003|>\u0000\u03c0\u0636\u0001\u0000\u0000\u0000\u03c1\u03c2\u0005"+
		"\r\u0000\u0000\u03c2\u03c3\u0007\u0005\u0000\u0000\u03c3\u03c4\u0003\u0096"+
		"K\u0000\u03c4\u03c5\u0005\u0168\u0000\u0000\u03c5\u03c8\u0005\u0148\u0000"+
		"\u0000\u03c6\u03c7\u0005\u009c\u0000\u0000\u03c7\u03c9\u0005w\u0000\u0000"+
		"\u03c8\u03c6\u0001\u0000\u0000\u0000\u03c8\u03c9\u0001\u0000\u0000\u0000"+
		"\u03c9\u03ca\u0001\u0000\u0000\u0000\u03ca\u03cb\u0003|>\u0000\u03cb\u0636"+
		"\u0001\u0000\u0000\u0000\u03cc\u03cd\u0005\r\u0000\u0000\u03cd\u03ce\u0005"+
		"\u0144\u0000\u0000\u03ce\u03cf\u0003\u0096K\u0000\u03cf\u03d1\u0007\u0006"+
		"\u0000\u0000\u03d0\u03d2\u00058\u0000\u0000\u03d1\u03d0\u0001\u0000\u0000"+
		"\u0000\u03d1\u03d2\u0001\u0000\u0000\u0000\u03d2\u03d3\u0001\u0000\u0000"+
		"\u0000\u03d3\u03d4\u0003\u01ca\u00e5\u0000\u03d4\u0636\u0001\u0000\u0000"+
		"\u0000\u03d5\u03d6\u0005\r\u0000\u0000\u03d6\u03d7\u0005\u0144\u0000\u0000"+
		"\u03d7\u03d9\u0003\u0096K\u0000\u03d8\u03da\u0003f3\u0000\u03d9\u03d8"+
		"\u0001\u0000\u0000\u0000\u03d9\u03da\u0001\u0000\u0000\u0000\u03da\u03db"+
		"\u0001\u0000\u0000\u0000\u03db\u03dd\u0005-\u0000\u0000\u03dc\u03de\u0005"+
		"8\u0000\u0000\u03dd\u03dc\u0001\u0000\u0000\u0000\u03dd\u03de\u0001\u0000"+
		"\u0000\u0000\u03de\u03df\u0001\u0000\u0000\u0000\u03df\u03e0\u0003\u012a"+
		"\u0095\u0000\u03e0\u03e2\u0003\u0188\u00c4\u0000\u03e1\u03e3\u0003\u0172"+
		"\u00b9\u0000\u03e2\u03e1\u0001\u0000\u0000\u0000\u03e2\u03e3\u0001\u0000"+
		"\u0000\u0000\u03e3\u0636\u0001\u0000\u0000\u0000\u03e4\u03e5\u0005\r\u0000"+
		"\u0000\u03e5\u03e6\u0005\u0144\u0000\u0000\u03e6\u03e8\u0003\u0096K\u0000"+
		"\u03e7\u03e9\u0003f3\u0000\u03e8\u03e7\u0001\u0000\u0000\u0000\u03e8\u03e9"+
		"\u0001\u0000\u0000\u0000\u03e9\u03ea\u0001\u0000\u0000\u0000\u03ea\u03eb"+
		"\u0005\u010f\u0000\u0000\u03eb\u03ec\u00059\u0000\u0000\u03ec\u03ed\u0005"+
		"\u0002\u0000\u0000\u03ed\u03ee\u0003\u017c\u00be\u0000\u03ee\u03ef\u0005"+
		"\u0003\u0000\u0000\u03ef\u0636\u0001\u0000\u0000\u0000\u03f0\u03f1\u0005"+
		"\r\u0000\u0000\u03f1\u03f2\u0005\u0144\u0000\u0000\u03f2\u03f4\u0003\u0096"+
		"K\u0000\u03f3\u03f5\u0003f3\u0000\u03f4\u03f3\u0001\u0000\u0000\u0000"+
		"\u03f4\u03f5\u0001\u0000\u0000\u0000\u03f5\u03f6\u0001\u0000\u0000\u0000"+
		"\u03f6\u03f7\u0005\u0129\u0000\u0000\u03f7\u03f8\u0005\u0126\u0000\u0000"+
		"\u03f8\u03fc\u0003\u01d0\u00e8\u0000\u03f9\u03fa\u0005\u017e\u0000\u0000"+
		"\u03fa\u03fb\u0005\u0127\u0000\u0000\u03fb\u03fd\u0003|>\u0000\u03fc\u03f9"+
		"\u0001\u0000\u0000\u0000\u03fc\u03fd\u0001\u0000\u0000\u0000\u03fd\u0636"+
		"\u0001\u0000\u0000\u0000\u03fe\u03ff\u0005\r\u0000\u0000\u03ff\u0400\u0005"+
		"\u0144\u0000\u0000\u0400\u0402\u0003\u0096K\u0000\u0401\u0403\u0003f3"+
		"\u0000\u0402\u0401\u0001\u0000\u0000\u0000\u0402\u0403\u0001\u0000\u0000"+
		"\u0000\u0403\u0404\u0001\u0000\u0000\u0000\u0404\u0405\u0005\u0129\u0000"+
		"\u0000\u0405\u0406\u0005\u0127\u0000\u0000\u0406\u0407\u0003|>\u0000\u0407"+
		"\u0636\u0001\u0000\u0000\u0000\u0408\u0409\u0005\r\u0000\u0000\u0409\u040a"+
		"\u0007\u0005\u0000\u0000\u040a\u040b\u0003\u0096K\u0000\u040b\u0410\u0005"+
		"\t\u0000\u0000\u040c\u040d\u0005\u009c\u0000\u0000\u040d\u040e\u0003\u014c"+
		"\u00a6\u0000\u040e\u040f\u0005w\u0000\u0000\u040f\u0411\u0001\u0000\u0000"+
		"\u0000\u0410\u040c\u0001\u0000\u0000\u0000\u0410\u0411\u0001\u0000\u0000"+
		"\u0000\u0411\u0413\u0001\u0000\u0000\u0000\u0412\u0414\u0003d2\u0000\u0413"+
		"\u0412\u0001\u0000\u0000\u0000\u0414\u0415\u0001\u0000\u0000\u0000\u0415"+
		"\u0413\u0001\u0000\u0000\u0000\u0415\u0416\u0001\u0000\u0000\u0000\u0416"+
		"\u0636\u0001\u0000\u0000\u0000\u0417\u0418\u0005\r\u0000\u0000\u0418\u0419"+
		"\u0005\u0144\u0000\u0000\u0419\u041a\u0003\u0096K\u0000\u041a\u041b\u0003"+
		"f3\u0000\u041b\u041c\u0005\u010b\u0000\u0000\u041c\u041d\u0005\u0154\u0000"+
		"\u0000\u041d\u041e\u0003f3\u0000\u041e\u0636\u0001\u0000\u0000\u0000\u041f"+
		"\u0420\u0005\r\u0000\u0000\u0420\u0421\u0007\u0005\u0000\u0000\u0421\u0422"+
		"\u0003\u0096K\u0000\u0422\u0425\u0005m\u0000\u0000\u0423\u0424\u0005\u009c"+
		"\u0000\u0000\u0424\u0426\u0005w\u0000\u0000\u0425\u0423\u0001\u0000\u0000"+
		"\u0000\u0425\u0426\u0001\u0000\u0000\u0000\u0426\u0427\u0001\u0000\u0000"+
		"\u0000\u0427\u042c\u0003f3\u0000\u0428\u0429\u0005\u0004\u0000\u0000\u0429"+
		"\u042b\u0003f3\u0000\u042a\u0428\u0001\u0000\u0000\u0000\u042b\u042e\u0001"+
		"\u0000\u0000\u0000\u042c\u042a\u0001\u0000\u0000\u0000\u042c\u042d\u0001"+
		"\u0000\u0000\u0000\u042d\u0430\u0001\u0000\u0000\u0000\u042e\u042c\u0001"+
		"\u0000\u0000\u0000\u042f\u0431\u0005\u00fe\u0000\u0000\u0430\u042f\u0001"+
		"\u0000\u0000\u0000\u0430\u0431\u0001\u0000\u0000\u0000\u0431\u0636\u0001"+
		"\u0000\u0000\u0000\u0432\u0433\u0005\r\u0000\u0000\u0433\u0434\u0005\u0144"+
		"\u0000\u0000\u0434\u0436\u0003\u0096K\u0000\u0435\u0437\u0003f3\u0000"+
		"\u0436\u0435\u0001\u0000\u0000\u0000\u0436\u0437\u0001\u0000\u0000\u0000"+
		"\u0437\u0438\u0001\u0000\u0000\u0000\u0438\u0439\u0005\u0129\u0000\u0000"+
		"\u0439\u043a\u0003X,\u0000\u043a\u0636\u0001\u0000\u0000\u0000\u043b\u043c"+
		"\u0005\r\u0000\u0000\u043c\u043d\u0005\u0144\u0000\u0000\u043d\u043e\u0003"+
		"\u0096K\u0000\u043e\u043f\u0005\u0106\u0000\u0000\u043f\u0440\u0005\u00f5"+
		"\u0000\u0000\u0440\u0636\u0001\u0000\u0000\u0000\u0441\u0442\u0005\r\u0000"+
		"\u0000\u0442\u0443\u0005\u0144\u0000\u0000\u0443\u0448\u0003\u0096K\u0000"+
		"\u0444\u0449\u0003R)\u0000\u0445\u0446\u00052\u0000\u0000\u0446\u0447"+
		"\u0005#\u0000\u0000\u0447\u0449\u0005\u00df\u0000\u0000\u0448\u0444\u0001"+
		"\u0000\u0000\u0000\u0448\u0445\u0001\u0000\u0000\u0000\u0449\u0636\u0001"+
		"\u0000\u0000\u0000\u044a\u044b\u0005\r\u0000\u0000\u044b\u044c\u0005\u0144"+
		"\u0000\u0000\u044c\u044d\u0003\u0096K\u0000\u044d\u044e\u0003\u0174\u00ba"+
		"\u0000\u044e\u0636\u0001\u0000\u0000\u0000\u044f\u0450\u0005m\u0000\u0000"+
		"\u0450\u0453\u0005\u0144\u0000\u0000\u0451\u0452\u0005\u009c\u0000\u0000"+
		"\u0452\u0454\u0005w\u0000\u0000\u0453\u0451\u0001\u0000\u0000\u0000\u0453"+
		"\u0454\u0001\u0000\u0000\u0000\u0454\u0455\u0001\u0000\u0000\u0000\u0455"+
		"\u0457\u0003\u0096K\u0000\u0456\u0458\u0005\u00fe\u0000\u0000\u0457\u0456"+
		"\u0001\u0000\u0000\u0000\u0457\u0458\u0001\u0000\u0000\u0000\u0458\u0636"+
		"\u0001\u0000\u0000\u0000\u0459\u045a\u0005m\u0000\u0000\u045a\u045d\u0005"+
		"\u0175\u0000\u0000\u045b\u045c\u0005\u009c\u0000\u0000\u045c\u045e\u0005"+
		"w\u0000\u0000\u045d\u045b\u0001\u0000\u0000\u0000\u045d\u045e\u0001\u0000"+
		"\u0000\u0000\u045e\u045f\u0001\u0000\u0000\u0000\u045f\u0636\u0003\u0096"+
		"K\u0000\u0460\u0463\u0005F\u0000\u0000\u0461\u0462\u0005\u00ea\u0000\u0000"+
		"\u0462\u0464\u0005\u010f\u0000\u0000\u0463\u0461\u0001\u0000\u0000\u0000"+
		"\u0463\u0464\u0001\u0000\u0000\u0000\u0464\u0469\u0001\u0000\u0000\u0000"+
		"\u0465\u0467\u0005\u0091\u0000\u0000\u0466\u0465\u0001\u0000\u0000\u0000"+
		"\u0466\u0467\u0001\u0000\u0000\u0000\u0467\u0468\u0001\u0000\u0000\u0000"+
		"\u0468\u046a\u0005\u0149\u0000\u0000\u0469\u0466\u0001\u0000\u0000\u0000"+
		"\u0469\u046a\u0001\u0000\u0000\u0000\u046a\u046b\u0001\u0000\u0000\u0000"+
		"\u046b\u0470\u0005\u0175\u0000\u0000\u046c\u046d\u0005\u009c\u0000\u0000"+
		"\u046d\u046e\u0003\u014c\u00a6\u0000\u046e\u046f\u0005w\u0000\u0000\u046f"+
		"\u0471\u0001\u0000\u0000\u0000\u0470\u046c\u0001\u0000\u0000\u0000\u0470"+
		"\u0471\u0001\u0000\u0000\u0000\u0471\u0472\u0001\u0000\u0000\u0000\u0472"+
		"\u0474\u0003\u0096K\u0000\u0473\u0475\u0003\u010e\u0087\u0000\u0474\u0473"+
		"\u0001\u0000\u0000\u0000\u0474\u0475\u0001\u0000\u0000\u0000\u0475\u0480"+
		"\u0001\u0000\u0000\u0000\u0476\u047f\u0003\\.\u0000\u0477\u047f\u0003"+
		"Z-\u0000\u0478\u047f\u0003\u0174\u00ba\u0000\u0479\u047a\u0005\u00f4\u0000"+
		"\u0000\u047a\u047b\u0005\u00e6\u0000\u0000\u047b\u047f\u0003\u0106\u0083"+
		"\u0000\u047c\u047d\u0005\u0148\u0000\u0000\u047d\u047f\u0003|>\u0000\u047e"+
		"\u0476\u0001\u0000\u0000\u0000\u047e\u0477\u0001\u0000\u0000\u0000\u047e"+
		"\u0478\u0001\u0000\u0000\u0000\u047e\u0479\u0001\u0000\u0000\u0000\u047e"+
		"\u047c\u0001\u0000\u0000\u0000\u047f\u0482\u0001\u0000\u0000\u0000\u0480"+
		"\u047e\u0001\u0000\u0000\u0000\u0480\u0481\u0001\u0000\u0000\u0000\u0481"+
		"\u0483\u0001\u0000\u0000\u0000\u0482\u0480\u0001\u0000\u0000\u0000\u0483"+
		"\u0484\u0005\u0016\u0000\u0000\u0484\u0485\u0003`0\u0000\u0485\u0636\u0001"+
		"\u0000\u0000\u0000\u0486\u0489\u0005F\u0000\u0000\u0487\u0488\u0005\u00ea"+
		"\u0000\u0000\u0488\u048a\u0005\u010f\u0000\u0000\u0489\u0487\u0001\u0000"+
		"\u0000\u0000\u0489\u048a\u0001\u0000\u0000\u0000\u048a\u048c\u0001\u0000"+
		"\u0000\u0000\u048b\u048d\u0005\u0091\u0000\u0000\u048c\u048b\u0001\u0000"+
		"\u0000\u0000\u048c\u048d\u0001\u0000\u0000\u0000\u048d\u048e\u0001\u0000"+
		"\u0000\u0000\u048e\u048f\u0005\u0149\u0000\u0000\u048f\u0490\u0005\u0175"+
		"\u0000\u0000\u0490\u0495\u0003\u0130\u0098\u0000\u0491\u0492\u0005\u0002"+
		"\u0000\u0000\u0492\u0493\u0003\u0186\u00c3\u0000\u0493\u0494\u0005\u0003"+
		"\u0000\u0000\u0494\u0496\u0001\u0000\u0000\u0000\u0495\u0491\u0001\u0000"+
		"\u0000\u0000\u0495\u0496\u0001\u0000\u0000\u0000\u0496\u0497\u0001\u0000"+
		"\u0000\u0000\u0497\u049a\u0003x<\u0000\u0498\u0499\u0005\u00e9\u0000\u0000"+
		"\u0499\u049b\u0003|>\u0000\u049a\u0498\u0001\u0000\u0000\u0000\u049a\u049b"+
		"\u0001\u0000\u0000\u0000\u049b\u0636\u0001\u0000\u0000\u0000\u049c\u049d"+
		"\u0005\r\u0000\u0000\u049d\u049e\u0005\u0175\u0000\u0000\u049e\u04a0\u0003"+
		"\u0096K\u0000\u049f\u04a1\u0005\u0016\u0000\u0000\u04a0\u049f\u0001\u0000"+
		"\u0000\u0000\u04a0\u04a1\u0001\u0000\u0000\u0000\u04a1\u04a2\u0001\u0000"+
		"\u0000\u0000\u04a2\u04a3\u0003`0\u0000\u04a3\u0636\u0001\u0000\u0000\u0000"+
		"\u04a4\u04a5\u0005\r\u0000\u0000\u04a5\u04a6\u0005\u0175\u0000\u0000\u04a6"+
		"\u04a7\u0003\u0096K\u0000\u04a7\u04a8\u0003Z-\u0000\u04a8\u0636\u0001"+
		"\u0000\u0000\u0000\u04a9\u04ac\u0005F\u0000\u0000\u04aa\u04ab\u0005\u00ea"+
		"\u0000\u0000\u04ab\u04ad\u0005\u010f\u0000\u0000\u04ac\u04aa\u0001\u0000"+
		"\u0000\u0000\u04ac\u04ad\u0001\u0000\u0000\u0000\u04ad\u04af\u0001\u0000"+
		"\u0000\u0000\u04ae\u04b0\u0005\u0149\u0000\u0000\u04af\u04ae\u0001\u0000"+
		"\u0000\u0000\u04af\u04b0\u0001\u0000\u0000\u0000\u04b0\u04b1\u0001\u0000"+
		"\u0000\u0000\u04b1\u04b6\u0005\u008e\u0000\u0000\u04b2\u04b3\u0005\u009c"+
		"\u0000\u0000\u04b3\u04b4\u0003\u014c\u00a6\u0000\u04b4\u04b5\u0005w\u0000"+
		"\u0000\u04b5\u04b7\u0001\u0000\u0000\u0000\u04b6\u04b2\u0001\u0000\u0000"+
		"\u0000\u04b6\u04b7\u0001\u0000\u0000\u0000\u04b7\u04b8\u0001\u0000\u0000"+
		"\u0000\u04b8\u04b9\u0003\u0096K\u0000\u04b9\u04ba\u0005\u0016\u0000\u0000"+
		"\u04ba\u04c4\u0003\u01d0\u00e8\u0000\u04bb\u04bc\u0005\u016d\u0000\u0000"+
		"\u04bc\u04c1\u0003\u0092I\u0000\u04bd\u04be\u0005\u0004\u0000\u0000\u04be"+
		"\u04c0\u0003\u0092I\u0000\u04bf\u04bd\u0001\u0000\u0000\u0000\u04c0\u04c3"+
		"\u0001\u0000\u0000\u0000\u04c1\u04bf\u0001\u0000\u0000\u0000\u04c1\u04c2"+
		"\u0001\u0000\u0000\u0000\u04c2\u04c5\u0001\u0000\u0000\u0000\u04c3\u04c1"+
		"\u0001\u0000\u0000\u0000\u04c4\u04bb\u0001\u0000\u0000\u0000\u04c4\u04c5"+
		"\u0001\u0000\u0000\u0000\u04c5\u0636\u0001\u0000\u0000\u0000\u04c6\u04c9"+
		"\u0005F\u0000\u0000\u04c7\u04c8\u0005\u00ea\u0000\u0000\u04c8\u04ca\u0005"+
		"\u010f\u0000\u0000\u04c9\u04c7\u0001\u0000\u0000\u0000\u04c9\u04ca\u0001"+
		"\u0000\u0000\u0000\u04ca\u04cc\u0001\u0000\u0000\u0000\u04cb\u04cd\u0005"+
		"\u0149\u0000\u0000\u04cc\u04cb\u0001\u0000\u0000\u0000\u04cc\u04cd\u0001"+
		"\u0000\u0000\u0000\u04cd\u04ce\u0001\u0000\u0000\u0000\u04ce\u04d3\u0005"+
		"\u008e\u0000\u0000\u04cf\u04d0\u0005\u009c\u0000\u0000\u04d0\u04d1\u0003"+
		"\u014c\u00a6\u0000\u04d1\u04d2\u0005w\u0000\u0000\u04d2\u04d4\u0001\u0000"+
		"\u0000\u0000\u04d3\u04cf\u0001\u0000\u0000\u0000\u04d3\u04d4\u0001\u0000"+
		"\u0000\u0000\u04d4\u04d5\u0001\u0000\u0000\u0000\u04d5\u04d6\u0003\u0096"+
		"K\u0000\u04d6\u04d8\u0005\u0002\u0000\u0000\u04d7\u04d9\u0003\u018a\u00c5"+
		"\u0000\u04d8\u04d7\u0001\u0000\u0000\u0000\u04d8\u04d9\u0001\u0000\u0000"+
		"\u0000\u04d9\u04da\u0001\u0000\u0000\u0000\u04da\u04e4\u0005\u0003\u0000"+
		"\u0000\u04db\u04e2\u0005\u0114\u0000\u0000\u04dc\u04e3\u0003\u017a\u00bd"+
		"\u0000\u04dd\u04de\u0005\u0144\u0000\u0000\u04de\u04df\u0005\u0002\u0000"+
		"\u0000\u04df\u04e0\u0003\u0186\u00c3\u0000\u04e0\u04e1\u0005\u0003\u0000"+
		"\u0000\u04e1\u04e3\u0001\u0000\u0000\u0000\u04e2\u04dc\u0001\u0000\u0000"+
		"\u0000\u04e2\u04dd\u0001\u0000\u0000\u0000\u04e3\u04e5\u0001\u0000\u0000"+
		"\u0000\u04e4\u04db\u0001\u0000\u0000\u0000\u04e4\u04e5\u0001\u0000\u0000"+
		"\u0000\u04e5\u04e6\u0001\u0000\u0000\u0000\u04e6\u04e7\u0003\u019c\u00ce"+
		"\u0000\u04e7\u04ea\u0005\u0113\u0000\u0000\u04e8\u04eb\u0003`0\u0000\u04e9"+
		"\u04eb\u0003\u0140\u00a0\u0000\u04ea\u04e8\u0001\u0000\u0000\u0000\u04ea"+
		"\u04e9\u0001\u0000\u0000\u0000\u04eb\u0636\u0001\u0000\u0000\u0000\u04ec"+
		"\u04ee\u0005m\u0000\u0000\u04ed\u04ef\u0005\u0149\u0000\u0000\u04ee\u04ed"+
		"\u0001\u0000\u0000\u0000\u04ee\u04ef\u0001\u0000\u0000\u0000\u04ef\u04f0"+
		"\u0001\u0000\u0000\u0000\u04f0\u04f3\u0005\u008e\u0000\u0000\u04f1\u04f2"+
		"\u0005\u009c\u0000\u0000\u04f2\u04f4\u0005w\u0000\u0000\u04f3\u04f1\u0001"+
		"\u0000\u0000\u0000\u04f3\u04f4\u0001\u0000\u0000\u0000\u04f4\u04f5\u0001"+
		"\u0000\u0000\u0000\u04f5\u0636\u0003\u0096K\u0000\u04f6\u04f9\u0005\\"+
		"\u0000\u0000\u04f7\u04f8\u0005\u00ea\u0000\u0000\u04f8\u04fa\u0005\u010f"+
		"\u0000\u0000\u04f9\u04f7\u0001\u0000\u0000\u0000\u04f9\u04fa\u0001\u0000"+
		"\u0000\u0000\u04fa\u04fc\u0001\u0000\u0000\u0000\u04fb\u04fd\u0003n7\u0000"+
		"\u04fc\u04fb\u0001\u0000\u0000\u0000\u04fc\u04fd\u0001\u0000\u0000\u0000"+
		"\u04fd\u04fe\u0001\u0000\u0000\u0000\u04fe\u0500\u0003\u0096K\u0000\u04ff"+
		"\u0501\u0003\u017a\u00bd\u0000\u0500\u04ff\u0001\u0000\u0000\u0000\u0500"+
		"\u0501\u0001\u0000\u0000\u0000\u0501\u0503\u0001\u0000\u0000\u0000\u0502"+
		"\u0504\u0003\u0184\u00c2\u0000\u0503\u0502\u0001\u0000\u0000\u0000\u0503"+
		"\u0504\u0001\u0000\u0000\u0000\u0504\u0636\u0001\u0000\u0000\u0000\u0505"+
		"\u0506\u0005m\u0000\u0000\u0506\u0507\u0005\u0149\u0000\u0000\u0507\u050a"+
		"\u0003n7\u0000\u0508\u0509\u0005\u009c\u0000\u0000\u0509\u050b\u0005w"+
		"\u0000\u0000\u050a\u0508\u0001\u0000\u0000\u0000\u050a\u050b\u0001\u0000"+
		"\u0000\u0000\u050b\u050c\u0001\u0000\u0000\u0000\u050c\u050d\u0003\u0096"+
		"K\u0000\u050d\u0636\u0001\u0000\u0000\u0000\u050e\u0510\u0005y\u0000\u0000"+
		"\u050f\u0511\u0007\u0007\u0000\u0000\u0510\u050f\u0001\u0000\u0000\u0000"+
		"\u0510\u0511\u0001\u0000\u0000\u0000\u0511\u0514\u0001\u0000\u0000\u0000"+
		"\u0512\u0515\u00038\u001c\u0000\u0513\u0515\u0003:\u001d\u0000\u0514\u0512"+
		"\u0001\u0000\u0000\u0000\u0514\u0513\u0001\u0000\u0000\u0000\u0515\u0636"+
		"\u0001\u0000\u0000\u0000\u0516\u0517\u0005\u012d\u0000\u0000\u0517\u051a"+
		"\u0005\u0145\u0000\u0000\u0518\u0519\u0007\u0003\u0000\u0000\u0519\u051b"+
		"\u0003\u0096K\u0000\u051a\u0518\u0001\u0000\u0000\u0000\u051a\u051b\u0001"+
		"\u0000\u0000\u0000\u051b\u0520\u0001\u0000\u0000\u0000\u051c\u051e\u0005"+
		"\u00bd\u0000\u0000\u051d\u051c\u0001\u0000\u0000\u0000\u051d\u051e\u0001"+
		"\u0000\u0000\u0000\u051e\u051f\u0001\u0000\u0000\u0000\u051f\u0521\u0003"+
		"\u01d0\u00e8\u0000\u0520\u051d\u0001\u0000\u0000\u0000\u0520\u0521\u0001"+
		"\u0000\u0000\u0000\u0521\u0636\u0001\u0000\u0000\u0000\u0522\u0523\u0005"+
		"\u012d\u0000\u0000\u0523\u0524\u0005\u0144\u0000\u0000\u0524\u0527\u0005"+
		"|\u0000\u0000\u0525\u0526\u0007\u0003\u0000\u0000\u0526\u0528\u0003\u0096"+
		"K\u0000\u0527\u0525\u0001\u0000\u0000\u0000\u0527\u0528\u0001\u0000\u0000"+
		"\u0000\u0528\u0529\u0001\u0000\u0000\u0000\u0529\u052a\u0005\u00bd\u0000"+
		"\u0000\u052a\u052c\u0003\u01d0\u00e8\u0000\u052b\u052d\u0003f3\u0000\u052c"+
		"\u052b\u0001\u0000\u0000\u0000\u052c\u052d\u0001\u0000\u0000\u0000\u052d"+
		"\u0636\u0001\u0000\u0000\u0000\u052e\u052f\u0005\u012d\u0000\u0000\u052f"+
		"\u0530\u0005\u0148\u0000\u0000\u0530\u0535\u0003\u0096K\u0000\u0531\u0532"+
		"\u0005\u0002\u0000\u0000\u0532\u0533\u0003\u0080@\u0000\u0533\u0534\u0005"+
		"\u0003\u0000\u0000\u0534\u0536\u0001\u0000\u0000\u0000\u0535\u0531\u0001"+
		"\u0000\u0000\u0000\u0535\u0536\u0001\u0000\u0000\u0000\u0536\u0636\u0001"+
		"\u0000\u0000\u0000\u0537\u0538\u0005\u012d\u0000\u0000\u0538\u0539\u0005"+
		"9\u0000\u0000\u0539\u053a\u0007\u0003\u0000\u0000\u053a\u053d\u0003\u0096"+
		"K\u0000\u053b\u053c\u0007\u0003\u0000\u0000\u053c\u053e\u0003\u012a\u0095"+
		"\u0000\u053d\u053b\u0001\u0000\u0000\u0000\u053d\u053e\u0001\u0000\u0000"+
		"\u0000\u053e\u0636\u0001\u0000\u0000\u0000\u053f\u0540\u0005\u012d\u0000"+
		"\u0000\u0540\u0543\u0005\u0176\u0000\u0000\u0541\u0542\u0007\u0003\u0000"+
		"\u0000\u0542\u0544\u0003\u0096K\u0000\u0543\u0541\u0001\u0000\u0000\u0000"+
		"\u0543\u0544\u0001\u0000\u0000\u0000\u0544\u0549\u0001\u0000\u0000\u0000"+
		"\u0545\u0547\u0005\u00bd\u0000\u0000\u0546\u0545\u0001\u0000\u0000\u0000"+
		"\u0546\u0547\u0001\u0000\u0000\u0000\u0547\u0548\u0001\u0000\u0000\u0000"+
		"\u0548\u054a\u0003\u01d0\u00e8\u0000\u0549\u0546\u0001\u0000\u0000\u0000"+
		"\u0549\u054a\u0001\u0000\u0000\u0000\u054a\u0636\u0001\u0000\u0000\u0000"+
		"\u054b\u054c\u0005\u012d\u0000\u0000\u054c\u054d\u0005\u00f5\u0000\u0000"+
		"\u054d\u054f\u0003\u0096K\u0000\u054e\u0550\u0003f3\u0000\u054f\u054e"+
		"\u0001\u0000\u0000\u0000\u054f\u0550\u0001\u0000\u0000\u0000\u0550\u0636"+
		"\u0001\u0000\u0000\u0000\u0551\u0553\u0005\u012d\u0000\u0000\u0552\u0554"+
		"\u0003\u01c0\u00e0\u0000\u0553\u0552\u0001\u0000\u0000\u0000\u0553\u0554"+
		"\u0001\u0000\u0000\u0000\u0554\u0555\u0001\u0000\u0000\u0000\u0555\u0558"+
		"\u0005\u008f\u0000\u0000\u0556\u0557\u0007\u0003\u0000\u0000\u0557\u0559"+
		"\u0003\u0096K\u0000\u0558\u0556\u0001\u0000\u0000\u0000\u0558\u0559\u0001"+
		"\u0000\u0000\u0000\u0559\u0561\u0001\u0000\u0000\u0000\u055a\u055c\u0005"+
		"\u00bd\u0000\u0000\u055b\u055a\u0001\u0000\u0000\u0000\u055b\u055c\u0001"+
		"\u0000\u0000\u0000\u055c\u055f\u0001\u0000\u0000\u0000\u055d\u0560\u0003"+
		"\u012a\u0095\u0000\u055e\u0560\u0003\u01d0\u00e8\u0000\u055f\u055d\u0001"+
		"\u0000\u0000\u0000\u055f\u055e\u0001\u0000\u0000\u0000\u0560\u0562\u0001"+
		"\u0000\u0000\u0000\u0561\u055b\u0001\u0000\u0000\u0000\u0561\u0562\u0001"+
		"\u0000\u0000\u0000\u0562\u0636\u0001\u0000\u0000\u0000\u0563\u0564\u0005"+
		"\u012d\u0000\u0000\u0564\u0565\u0005F\u0000\u0000\u0565\u0566\u0005\u0144"+
		"\u0000\u0000\u0566\u0569\u0003\u0096K\u0000\u0567\u0568\u0005\u0016\u0000"+
		"\u0000\u0568\u056a\u0005\u0126\u0000\u0000\u0569\u0567\u0001\u0000\u0000"+
		"\u0000\u0569\u056a\u0001\u0000\u0000\u0000\u056a\u0636\u0001\u0000\u0000"+
		"\u0000\u056b\u056c\u0005\u012d\u0000\u0000\u056c\u056d\u0005I\u0000\u0000"+
		"\u056d\u0636\u0003j5\u0000\u056e\u056f\u0005\u012d\u0000\u0000\u056f\u0574"+
		"\u0005,\u0000\u0000\u0570\u0572\u0005\u00bd\u0000\u0000\u0571\u0570\u0001"+
		"\u0000\u0000\u0000\u0571\u0572\u0001\u0000\u0000\u0000\u0572\u0573\u0001"+
		"\u0000\u0000\u0000\u0573\u0575\u0003\u01d0\u00e8\u0000\u0574\u0571\u0001"+
		"\u0000\u0000\u0000\u0574\u0575\u0001\u0000\u0000\u0000\u0575\u0636\u0001"+
		"\u0000\u0000\u0000\u0576\u0577\u0007\b\u0000\u0000\u0577\u0579\u0005\u008e"+
		"\u0000\u0000\u0578\u057a\u0005|\u0000\u0000\u0579\u0578\u0001\u0000\u0000"+
		"\u0000\u0579\u057a\u0001\u0000\u0000\u0000\u057a\u057b\u0001\u0000\u0000"+
		"\u0000\u057b\u0636\u0003p8\u0000\u057c\u057d\u0007\b\u0000\u0000\u057d"+
		"\u057f\u0003j5\u0000\u057e\u0580\u0005|\u0000\u0000\u057f\u057e\u0001"+
		"\u0000\u0000\u0000\u057f\u0580\u0001\u0000\u0000\u0000\u0580\u0581\u0001"+
		"\u0000\u0000\u0000\u0581\u0582\u0003\u0096K\u0000\u0582\u0636\u0001\u0000"+
		"\u0000\u0000\u0583\u0585\u0007\b\u0000\u0000\u0584\u0586\u0005\u0144\u0000"+
		"\u0000\u0585\u0584\u0001\u0000\u0000\u0000\u0585\u0586\u0001\u0000\u0000"+
		"\u0000\u0586\u0588\u0001\u0000\u0000\u0000\u0587\u0589\u0007\t\u0000\u0000"+
		"\u0588\u0587\u0001\u0000\u0000\u0000\u0588\u0589\u0001\u0000\u0000\u0000"+
		"\u0589\u058a\u0001\u0000\u0000\u0000\u058a\u058c\u0003\u0096K\u0000\u058b"+
		"\u058d\u0003f3\u0000\u058c\u058b\u0001\u0000\u0000\u0000\u058c\u058d\u0001"+
		"\u0000\u0000\u0000\u058d\u058f\u0001\u0000\u0000\u0000\u058e\u0590\u0003"+
		"r9\u0000\u058f\u058e\u0001\u0000\u0000\u0000\u058f\u0590\u0001\u0000\u0000"+
		"\u0000\u0590\u0593\u0001\u0000\u0000\u0000\u0591\u0592\u0005\u0016\u0000"+
		"\u0000\u0592\u0594\u0005\u00b4\u0000\u0000\u0593\u0591\u0001\u0000\u0000"+
		"\u0000\u0593\u0594\u0001\u0000\u0000\u0000\u0594\u0636\u0001\u0000\u0000"+
		"\u0000\u0595\u0597\u0007\b\u0000\u0000\u0596\u0598\u0005\u0100\u0000\u0000"+
		"\u0597\u0596\u0001\u0000\u0000\u0000\u0597\u0598\u0001\u0000\u0000\u0000"+
		"\u0598\u0599\u0001\u0000\u0000\u0000\u0599\u0636\u0003`0\u0000\u059a\u059b"+
		"\u0005:\u0000\u0000\u059b\u059c\u0005\u00e6\u0000\u0000\u059c\u059d\u0003"+
		"j5\u0000\u059d\u059e\u0003\u0096K\u0000\u059e\u059f\u0005\u00b0\u0000"+
		"\u0000\u059f\u05a0\u0003\u01d2\u00e9\u0000\u05a0\u0636\u0001\u0000\u0000"+
		"\u0000\u05a1\u05a2\u0005:\u0000\u0000\u05a2\u05a3\u0005\u00e6\u0000\u0000"+
		"\u05a3\u05a4\u0005\u0144\u0000\u0000\u05a4\u05a5\u0003\u0096K\u0000\u05a5"+
		"\u05a6\u0005\u00b0\u0000\u0000\u05a6\u05a7\u0003\u01d2\u00e9\u0000\u05a7"+
		"\u0636\u0001\u0000\u0000\u0000\u05a8\u05a9\u0005\u010a\u0000\u0000\u05a9"+
		"\u05aa\u0005\u0144\u0000\u0000\u05aa\u0636\u0003\u0096K\u0000\u05ab\u05ac"+
		"\u0005\u010a\u0000\u0000\u05ac\u05ad\u0005\u008e\u0000\u0000\u05ad\u0636"+
		"\u0003\u0096K\u0000\u05ae\u05b6\u0005\u010a\u0000\u0000\u05af\u05b7\u0003"+
		"\u01d0\u00e8\u0000\u05b0\u05b2\t\u0000\u0000\u0000\u05b1\u05b0\u0001\u0000"+
		"\u0000\u0000\u05b2\u05b5\u0001\u0000\u0000\u0000\u05b3\u05b4\u0001\u0000"+
		"\u0000\u0000\u05b3\u05b1\u0001\u0000\u0000\u0000\u05b4\u05b7\u0001\u0000"+
		"\u0000\u0000\u05b5\u05b3\u0001\u0000\u0000\u0000\u05b6\u05af\u0001\u0000"+
		"\u0000\u0000\u05b6\u05b3\u0001\u0000\u0000\u0000\u05b7\u0636\u0001\u0000"+
		"\u0000\u0000\u05b8\u05ba\u0005%\u0000\u0000\u05b9\u05bb\u0005\u00b9\u0000"+
		"\u0000\u05ba\u05b9\u0001\u0000\u0000\u0000\u05ba\u05bb\u0001\u0000\u0000"+
		"\u0000\u05bb\u05bc\u0001\u0000\u0000\u0000\u05bc\u05bd\u0005\u0144\u0000"+
		"\u0000\u05bd\u05c0\u0003\u0096K\u0000\u05be\u05bf\u0005\u00e9\u0000\u0000"+
		"\u05bf\u05c1\u0003|>\u0000\u05c0\u05be\u0001\u0000\u0000\u0000\u05c0\u05c1"+
		"\u0001\u0000\u0000\u0000\u05c1\u05c6\u0001\u0000\u0000\u0000\u05c2\u05c4"+
		"\u0005\u0016\u0000\u0000\u05c3\u05c2\u0001\u0000\u0000\u0000\u05c3\u05c4"+
		"\u0001\u0000\u0000\u0000\u05c4\u05c5\u0001\u0000\u0000\u0000\u05c5\u05c7"+
		"\u0003`0\u0000\u05c6\u05c3\u0001\u0000\u0000\u0000\u05c6\u05c7\u0001\u0000"+
		"\u0000\u0000\u05c7\u0636\u0001\u0000\u0000\u0000\u05c8\u05c9\u0005\u0162"+
		"\u0000\u0000\u05c9\u05cc\u0005\u0144\u0000\u0000\u05ca\u05cb\u0005\u009c"+
		"\u0000\u0000\u05cb\u05cd\u0005w\u0000\u0000\u05cc\u05ca\u0001\u0000\u0000"+
		"\u0000\u05cc\u05cd\u0001\u0000\u0000\u0000\u05cd\u05ce\u0001\u0000\u0000"+
		"\u0000\u05ce\u0636\u0003\u0096K\u0000\u05cf\u05d0\u00051\u0000\u0000\u05d0"+
		"\u0636\u0005%\u0000\u0000\u05d1\u05d2\u0005\u00c2\u0000\u0000\u05d2\u05d4"+
		"\u0005Q\u0000\u0000\u05d3\u05d5\u0005\u00c3\u0000\u0000\u05d4\u05d3\u0001"+
		"\u0000\u0000\u0000\u05d4\u05d5\u0001\u0000\u0000\u0000\u05d5\u05d6\u0001"+
		"\u0000\u0000\u0000\u05d6\u05d7\u0005\u00a6\u0000\u0000\u05d7\u05d9\u0003"+
		"\u01d0\u00e8\u0000\u05d8\u05da\u0005\u00f2\u0000\u0000\u05d9\u05d8\u0001"+
		"\u0000\u0000\u0000\u05d9\u05da\u0001\u0000\u0000\u0000\u05da\u05db\u0001"+
		"\u0000\u0000\u0000\u05db\u05dc\u0005\u00ae\u0000\u0000\u05dc\u05dd\u0005"+
		"\u0144\u0000\u0000\u05dd\u05df\u0003\u0096K\u0000\u05de\u05e0\u0003f3"+
		"\u0000\u05df\u05de\u0001\u0000\u0000\u0000\u05df\u05e0\u0001\u0000\u0000"+
		"\u0000\u05e0\u0636\u0001\u0000\u0000\u0000\u05e1\u05e2\u0005\u015d\u0000"+
		"\u0000\u05e2\u05e3\u0005\u0144\u0000\u0000\u05e3\u05e5\u0003\u0096K\u0000"+
		"\u05e4\u05e6\u0003f3\u0000\u05e5\u05e4\u0001\u0000\u0000\u0000\u05e5\u05e6"+
		"\u0001\u0000\u0000\u0000\u05e6\u0636\u0001\u0000\u0000\u0000\u05e7\u05e9"+
		"\u0005\u00d7\u0000\u0000\u05e8\u05e7\u0001\u0000\u0000\u0000\u05e8\u05e9"+
		"\u0001\u0000\u0000\u0000\u05e9\u05ea\u0001\u0000\u0000\u0000\u05ea\u05eb"+
		"\u0005\u010c\u0000\u0000\u05eb\u05ec\u0005\u0144\u0000\u0000\u05ec\u05ef"+
		"\u0003\u0096K\u0000\u05ed\u05ee\u0007\n\u0000\u0000\u05ee\u05f0\u0005"+
		"\u00f5\u0000\u0000\u05ef\u05ed\u0001\u0000\u0000\u0000\u05ef\u05f0\u0001"+
		"\u0000\u0000\u0000\u05f0\u0636\u0001\u0000\u0000\u0000\u05f1\u05f2\u0007"+
		"\u000b\u0000\u0000\u05f2\u05f6\u0003\u01c0\u00e0\u0000\u05f3\u05f5\t\u0000"+
		"\u0000\u0000\u05f4\u05f3\u0001\u0000\u0000\u0000\u05f5\u05f8\u0001\u0000"+
		"\u0000\u0000\u05f6\u05f7\u0001\u0000\u0000\u0000\u05f6\u05f4\u0001\u0000"+
		"\u0000\u0000\u05f7\u0636\u0001\u0000\u0000\u0000\u05f8\u05f6\u0001\u0000"+
		"\u0000\u0000\u05f9\u05fa\u0005F\u0000\u0000\u05fa\u05ff\u0005\u00a3\u0000"+
		"\u0000\u05fb\u05fc\u0005\u009c\u0000\u0000\u05fc\u05fd\u0003\u014c\u00a6"+
		"\u0000\u05fd\u05fe\u0005w\u0000\u0000\u05fe\u0600\u0001\u0000\u0000\u0000"+
		"\u05ff\u05fb\u0001\u0000\u0000\u0000\u05ff\u0600\u0001\u0000\u0000\u0000"+
		"\u0600\u0601\u0001\u0000\u0000\u0000\u0601\u0602\u0003\u01c0\u00e0\u0000"+
		"\u0602\u0604\u0005\u00e6\u0000\u0000\u0603\u0605\u0005\u0144\u0000\u0000"+
		"\u0604\u0603\u0001\u0000\u0000\u0000\u0604\u0605\u0001\u0000\u0000\u0000"+
		"\u0605\u0606\u0001\u0000\u0000\u0000\u0606\u0609\u0003\u0096K\u0000\u0607"+
		"\u0608\u0005\u016d\u0000\u0000\u0608\u060a\u0003\u01c0\u00e0\u0000\u0609"+
		"\u0607\u0001\u0000\u0000\u0000\u0609\u060a\u0001\u0000\u0000\u0000\u060a"+
		"\u060b\u0001\u0000\u0000\u0000\u060b\u060c\u0005\u0002\u0000\u0000\u060c"+
		"\u060d\u0003\u012c\u0096\u0000\u060d\u0610\u0005\u0003\u0000\u0000\u060e"+
		"\u060f\u0005\u00e9\u0000\u0000\u060f\u0611\u0003|>\u0000\u0610\u060e\u0001"+
		"\u0000\u0000\u0000\u0610\u0611\u0001\u0000\u0000\u0000\u0611\u0636\u0001"+
		"\u0000\u0000\u0000\u0612\u0613\u0005m\u0000\u0000\u0613\u0616\u0005\u00a3"+
		"\u0000\u0000\u0614\u0615\u0005\u009c\u0000\u0000\u0615\u0617\u0005w\u0000"+
		"\u0000\u0616\u0614\u0001\u0000\u0000\u0000\u0616\u0617\u0001\u0000\u0000"+
		"\u0000\u0617\u0618\u0001\u0000\u0000\u0000\u0618\u0619\u0003\u01c0\u00e0"+
		"\u0000\u0619\u061b\u0005\u00e6\u0000\u0000\u061a\u061c\u0005\u0144\u0000"+
		"\u0000\u061b\u061a\u0001\u0000\u0000\u0000\u061b\u061c\u0001\u0000\u0000"+
		"\u0000\u061c\u061d\u0001\u0000\u0000\u0000\u061d\u061e\u0003\u0096K\u0000"+
		"\u061e\u0636\u0001\u0000\u0000\u0000\u061f\u0620\u0005&\u0000\u0000\u0620"+
		"\u0621\u0003\u0096K\u0000\u0621\u062a\u0005\u0002\u0000\u0000\u0622\u0627"+
		"\u0003\u0144\u00a2\u0000\u0623\u0624\u0005\u0004\u0000\u0000\u0624\u0626"+
		"\u0003\u0144\u00a2\u0000\u0625\u0623\u0001\u0000\u0000\u0000\u0626\u0629"+
		"\u0001\u0000\u0000\u0000\u0627\u0625\u0001\u0000\u0000\u0000\u0627\u0628"+
		"\u0001\u0000\u0000\u0000\u0628\u062b\u0001\u0000\u0000\u0000\u0629\u0627"+
		"\u0001\u0000\u0000\u0000\u062a\u0622\u0001\u0000\u0000\u0000\u062a\u062b"+
		"\u0001\u0000\u0000\u0000\u062b\u062c\u0001\u0000\u0000\u0000\u062c\u062d"+
		"\u0005\u0003\u0000\u0000\u062d\u0636\u0001\u0000\u0000\u0000\u062e\u0632"+
		"\u0003L&\u0000\u062f\u0631\t\u0000\u0000\u0000\u0630\u062f\u0001\u0000"+
		"\u0000\u0000\u0631\u0634\u0001\u0000\u0000\u0000\u0632\u0633\u0001\u0000"+
		"\u0000\u0000\u0632\u0630\u0001\u0000\u0000\u0000\u0633\u0636\u0001\u0000"+
		"\u0000\u0000\u0634\u0632\u0001\u0000\u0000\u0000\u0635\u02e2\u0001\u0000"+
		"\u0000\u0000\u0635\u02e3\u0001\u0000\u0000\u0000\u0635\u02e5\u0001\u0000"+
		"\u0000\u0000\u0635\u02e8\u0001\u0000\u0000\u0000\u0635\u02ea\u0001\u0000"+
		"\u0000\u0000\u0635\u02ee\u0001\u0000\u0000\u0000\u0635\u02f1\u0001\u0000"+
		"\u0000\u0000\u0635\u0304\u0001\u0000\u0000\u0000\u0635\u030b\u0001\u0000"+
		"\u0000\u0000\u0635\u0312\u0001\u0000\u0000\u0000\u0635\u0318\u0001\u0000"+
		"\u0000\u0000\u0635\u0322\u0001\u0000\u0000\u0000\u0635\u032e\u0001\u0000"+
		"\u0000\u0000\u0635\u033f\u0001\u0000\u0000\u0000\u0635\u0355\u0001\u0000"+
		"\u0000\u0000\u0635\u0366\u0001\u0000\u0000\u0000\u0635\u0377\u0001\u0000"+
		"\u0000\u0000\u0635\u0382\u0001\u0000\u0000\u0000\u0635\u0389\u0001\u0000"+
		"\u0000\u0000\u0635\u0392\u0001\u0000\u0000\u0000\u0635\u039b\u0001\u0000"+
		"\u0000\u0000\u0635\u03a8\u0001\u0000\u0000\u0000\u0635\u03b3\u0001\u0000"+
		"\u0000\u0000\u0635\u03ba\u0001\u0000\u0000\u0000\u0635\u03c1\u0001\u0000"+
		"\u0000\u0000\u0635\u03cc\u0001\u0000\u0000\u0000\u0635\u03d5\u0001\u0000"+
		"\u0000\u0000\u0635\u03e4\u0001\u0000\u0000\u0000\u0635\u03f0\u0001\u0000"+
		"\u0000\u0000\u0635\u03fe\u0001\u0000\u0000\u0000\u0635\u0408\u0001\u0000"+
		"\u0000\u0000\u0635\u0417\u0001\u0000\u0000\u0000\u0635\u041f\u0001\u0000"+
		"\u0000\u0000\u0635\u0432\u0001\u0000\u0000\u0000\u0635\u043b\u0001\u0000"+
		"\u0000\u0000\u0635\u0441\u0001\u0000\u0000\u0000\u0635\u044a\u0001\u0000"+
		"\u0000\u0000\u0635\u044f\u0001\u0000\u0000\u0000\u0635\u0459\u0001\u0000"+
		"\u0000\u0000\u0635\u0460\u0001\u0000\u0000\u0000\u0635\u0486\u0001\u0000"+
		"\u0000\u0000\u0635\u049c\u0001\u0000\u0000\u0000\u0635\u04a4\u0001\u0000"+
		"\u0000\u0000\u0635\u04a9\u0001\u0000\u0000\u0000\u0635\u04c6\u0001\u0000"+
		"\u0000\u0000\u0635\u04ec\u0001\u0000\u0000\u0000\u0635\u04f6\u0001\u0000"+
		"\u0000\u0000\u0635\u0505\u0001\u0000\u0000\u0000\u0635\u050e\u0001\u0000"+
		"\u0000\u0000\u0635\u0516\u0001\u0000\u0000\u0000\u0635\u0522\u0001\u0000"+
		"\u0000\u0000\u0635\u052e\u0001\u0000\u0000\u0000\u0635\u0537\u0001\u0000"+
		"\u0000\u0000\u0635\u053f\u0001\u0000\u0000\u0000\u0635\u054b\u0001\u0000"+
		"\u0000\u0000\u0635\u0551\u0001\u0000\u0000\u0000\u0635\u0563\u0001\u0000"+
		"\u0000\u0000\u0635\u056b\u0001\u0000\u0000\u0000\u0635\u056e\u0001\u0000"+
		"\u0000\u0000\u0635\u0576\u0001\u0000\u0000\u0000\u0635\u057c\u0001\u0000"+
		"\u0000\u0000\u0635\u0583\u0001\u0000\u0000\u0000\u0635\u0595\u0001\u0000"+
		"\u0000\u0000\u0635\u059a\u0001\u0000\u0000\u0000\u0635\u05a1\u0001\u0000"+
		"\u0000\u0000\u0635\u05a8\u0001\u0000\u0000\u0000\u0635\u05ab\u0001\u0000"+
		"\u0000\u0000\u0635\u05ae\u0001\u0000\u0000\u0000\u0635\u05b8\u0001\u0000"+
		"\u0000\u0000\u0635\u05c8\u0001\u0000\u0000\u0000\u0635\u05cf\u0001\u0000"+
		"\u0000\u0000\u0635\u05d1\u0001\u0000\u0000\u0000\u0635\u05e1\u0001\u0000"+
		"\u0000\u0000\u0635\u05e8\u0001\u0000\u0000\u0000\u0635\u05f1\u0001\u0000"+
		"\u0000\u0000\u0635\u05f9\u0001\u0000\u0000\u0000\u0635\u0612\u0001\u0000"+
		"\u0000\u0000\u0635\u061f\u0001\u0000\u0000\u0000\u0635\u062e\u0001\u0000"+
		"\u0000\u0000\u06369\u0001\u0000\u0000\u0000\u0637\u0638\u0005\u0129\u0000"+
		"\u0000\u0638\u063c\u0005\u0118\u0000\u0000\u0639\u063b\t\u0000\u0000\u0000"+
		"\u063a\u0639\u0001\u0000\u0000\u0000\u063b\u063e\u0001\u0000\u0000\u0000"+
		"\u063c\u063d\u0001\u0000\u0000\u0000\u063c\u063a\u0001\u0000\u0000\u0000"+
		"\u063d\u0688\u0001\u0000\u0000\u0000\u063e\u063c\u0001\u0000\u0000\u0000"+
		"\u063f\u0640\u0005\u0129\u0000\u0000\u0640\u0641\u0005\u014c\u0000\u0000"+
		"\u0641\u0642\u0005\u0182\u0000\u0000\u0642\u0688\u0003\u0162\u00b1\u0000"+
		"\u0643\u0644\u0005\u0129\u0000\u0000\u0644\u0645\u0005\u014c\u0000\u0000"+
		"\u0645\u0646\u0005\u0182\u0000\u0000\u0646\u0688\u0003F#\u0000\u0647\u0648"+
		"\u0005\u0129\u0000\u0000\u0648\u0649\u0005\u014c\u0000\u0000\u0649\u064d"+
		"\u0005\u0182\u0000\u0000\u064a\u064c\t\u0000\u0000\u0000\u064b\u064a\u0001"+
		"\u0000\u0000\u0000\u064c\u064f\u0001\u0000\u0000\u0000\u064d\u064e\u0001"+
		"\u0000\u0000\u0000\u064d\u064b\u0001\u0000\u0000\u0000\u064e\u0688\u0001"+
		"\u0000\u0000\u0000\u064f\u064d\u0001\u0000\u0000\u0000\u0650\u0651\u0005"+
		"\u0129\u0000\u0000\u0651\u0652\u0003n7\u0000\u0652\u0653\u0003\u00be_"+
		"\u0000\u0653\u0688\u0001\u0000\u0000\u0000\u0654\u0655\u0005\u0129\u0000"+
		"\u0000\u0655\u0656\u0003n7\u0000\u0656\u0657\u0005\u0002\u0000\u0000\u0657"+
		"\u0658\u0003\u0128\u0094\u0000\u0658\u0659\u0005\u0003\u0000\u0000\u0659"+
		"\u065a\u0005\u0183\u0000\u0000\u065a\u065b\u0005\u0002\u0000\u0000\u065b"+
		"\u065c\u0003`0\u0000\u065c\u065d\u0005\u0003\u0000\u0000\u065d\u0688\u0001"+
		"\u0000\u0000\u0000\u065e\u065f\u0005\u0129\u0000\u0000\u065f\u0660\u0003"+
		"H$\u0000\u0660\u0661\u0005\u0183\u0000\u0000\u0661\u0662\u0003J%\u0000"+
		"\u0662\u0688\u0001\u0000\u0000\u0000\u0663\u0664\u0005\u0129\u0000\u0000"+
		"\u0664\u066c\u0003H$\u0000\u0665\u0669\u0005\u0183\u0000\u0000\u0666\u0668"+
		"\t\u0000\u0000\u0000\u0667\u0666\u0001\u0000\u0000\u0000\u0668\u066b\u0001"+
		"\u0000\u0000\u0000\u0669\u066a\u0001\u0000\u0000\u0000\u0669\u0667\u0001"+
		"\u0000\u0000\u0000\u066a\u066d\u0001\u0000\u0000\u0000\u066b\u0669\u0001"+
		"\u0000\u0000\u0000\u066c\u0665\u0001\u0000\u0000\u0000\u066c\u066d\u0001"+
		"\u0000\u0000\u0000\u066d\u0688\u0001\u0000\u0000\u0000\u066e\u0672\u0005"+
		"\u0129\u0000\u0000\u066f\u0671\t\u0000\u0000\u0000\u0670\u066f\u0001\u0000"+
		"\u0000\u0000\u0671\u0674\u0001\u0000\u0000\u0000\u0672\u0673\u0001\u0000"+
		"\u0000\u0000\u0672\u0670\u0001\u0000\u0000\u0000\u0673\u0675\u0001\u0000"+
		"\u0000\u0000\u0674\u0672\u0001\u0000\u0000\u0000\u0675\u0676\u0005\u0183"+
		"\u0000\u0000\u0676\u0688\u0003J%\u0000\u0677\u067b\u0005\u0129\u0000\u0000"+
		"\u0678\u067a\t\u0000\u0000\u0000\u0679\u0678\u0001\u0000\u0000\u0000\u067a"+
		"\u067d\u0001\u0000\u0000\u0000\u067b\u067c\u0001\u0000\u0000\u0000\u067b"+
		"\u0679\u0001\u0000\u0000\u0000\u067c\u0688\u0001\u0000\u0000\u0000\u067d"+
		"\u067b\u0001\u0000\u0000\u0000\u067e\u067f\u0005\u0110\u0000\u0000\u067f"+
		"\u0688\u0003H$\u0000\u0680\u0684\u0005\u0110\u0000\u0000\u0681\u0683\t"+
		"\u0000\u0000\u0000\u0682\u0681\u0001\u0000\u0000\u0000\u0683\u0686\u0001"+
		"\u0000\u0000\u0000\u0684\u0685\u0001\u0000\u0000\u0000\u0684\u0682\u0001"+
		"\u0000\u0000\u0000\u0685\u0688\u0001\u0000\u0000\u0000\u0686\u0684\u0001"+
		"\u0000\u0000\u0000\u0687\u0637\u0001\u0000\u0000\u0000\u0687\u063f\u0001"+
		"\u0000\u0000\u0000\u0687\u0643\u0001\u0000\u0000\u0000\u0687\u0647\u0001"+
		"\u0000\u0000\u0000\u0687\u0650\u0001\u0000\u0000\u0000\u0687\u0654\u0001"+
		"\u0000\u0000\u0000\u0687\u065e\u0001\u0000\u0000\u0000\u0687\u0663\u0001"+
		"\u0000\u0000\u0000\u0687\u066e\u0001\u0000\u0000\u0000\u0687\u0677\u0001"+
		"\u0000\u0000\u0000\u0687\u067e\u0001\u0000\u0000\u0000\u0687\u0680\u0001"+
		"\u0000\u0000\u0000\u0688;\u0001\u0000\u0000\u0000\u0689\u068a\u0005\u0155"+
		"\u0000\u0000\u068a\u068b\u0005\u009e\u0000\u0000\u068b\u068e\u0003@ \u0000"+
		"\u068c\u068d\u0005\u00ae\u0000\u0000\u068d\u068f\u0003\u0128\u0094\u0000"+
		"\u068e\u068c\u0001\u0000\u0000\u0000\u068e\u068f\u0001\u0000\u0000\u0000"+
		"\u068f\u0691\u0001\u0000\u0000\u0000\u0690\u0692\u0003>\u001f\u0000\u0691"+
		"\u0690\u0001\u0000\u0000\u0000\u0691\u0692\u0001\u0000\u0000\u0000\u0692"+
		"=\u0001\u0000\u0000\u0000\u0693\u0694\u0005\u016d\u0000\u0000\u0694\u0695"+
		"\u0005\u0002\u0000\u0000\u0695\u0696\u0003\u0136\u009b\u0000\u0696\u0697"+
		"\u0005\u0003\u0000\u0000\u0697\u069b\u0001\u0000\u0000\u0000\u0698\u0699"+
		"\u0005\u016d\u0000\u0000\u0699\u069b\u0003\u0136\u009b\u0000\u069a\u0693"+
		"\u0001\u0000\u0000\u0000\u069a\u0698\u0001\u0000\u0000\u0000\u069b?\u0001"+
		"\u0000\u0000\u0000\u069c\u069f\u0003\u01d0\u00e8\u0000\u069d\u069f\u0003"+
		"\u012a\u0095\u0000\u069e\u069c\u0001\u0000\u0000\u0000\u069e\u069d\u0001"+
		"\u0000\u0000\u0000\u069fA\u0001\u0000\u0000\u0000\u06a0\u06a3\u0003\u0158"+
		"\u00ac\u0000\u06a1\u06a3\u0003\u012a\u0095\u0000\u06a2\u06a0\u0001\u0000"+
		"\u0000\u0000\u06a2\u06a1\u0001\u0000\u0000\u0000\u06a3\u06a6\u0001\u0000"+
		"\u0000\u0000\u06a4\u06a5\u0005\u0016\u0000\u0000\u06a5\u06a7\u0003\u01bc"+
		"\u00de\u0000\u06a6\u06a4\u0001\u0000\u0000\u0000\u06a6\u06a7\u0001\u0000"+
		"\u0000\u0000\u06a7C\u0001\u0000\u0000\u0000\u06a8\u06ad\u0003B!\u0000"+
		"\u06a9\u06aa\u0005\u0004\u0000\u0000\u06aa\u06ac\u0003B!\u0000\u06ab\u06a9"+
		"\u0001\u0000\u0000\u0000\u06ac\u06af\u0001\u0000\u0000\u0000\u06ad\u06ab"+
		"\u0001\u0000\u0000\u0000\u06ad\u06ae\u0001\u0000\u0000\u0000\u06aeE\u0001"+
		"\u0000\u0000\u0000\u06af\u06ad\u0001\u0000\u0000\u0000\u06b0\u06b3\u0003"+
		"\u01d0\u00e8\u0000\u06b1\u06b3\u0005\u00c3\u0000\u0000\u06b2\u06b0\u0001"+
		"\u0000\u0000\u0000\u06b2\u06b1\u0001\u0000\u0000\u0000\u06b3G\u0001\u0000"+
		"\u0000\u0000\u06b4\u06b5\u0003\u01c4\u00e2\u0000\u06b5I\u0001\u0000\u0000"+
		"\u0000\u06b6\u06b7\u0003\u01c6\u00e3\u0000\u06b7K\u0001\u0000\u0000\u0000"+
		"\u06b8\u06b9\u0005F\u0000\u0000\u06b9\u0761\u0005\u0118\u0000\u0000\u06ba"+
		"\u06bb\u0005m\u0000\u0000\u06bb\u0761\u0005\u0118\u0000\u0000\u06bc\u06be"+
		"\u0005\u0092\u0000\u0000\u06bd\u06bf\u0005\u0118\u0000\u0000\u06be\u06bd"+
		"\u0001\u0000\u0000\u0000\u06be\u06bf\u0001\u0000\u0000\u0000\u06bf\u0761"+
		"\u0001\u0000\u0000\u0000\u06c0\u06c2\u0005\u0115\u0000\u0000\u06c1\u06c3"+
		"\u0005\u0118\u0000\u0000\u06c2\u06c1\u0001\u0000\u0000\u0000\u06c2\u06c3"+
		"\u0001\u0000\u0000\u0000\u06c3\u0761\u0001\u0000\u0000\u0000\u06c4\u06c5"+
		"\u0005\u012d\u0000\u0000\u06c5\u0761\u0005\u0092\u0000\u0000\u06c6\u06c7"+
		"\u0005\u012d\u0000\u0000\u06c7\u06c9\u0005\u0118\u0000\u0000\u06c8\u06ca"+
		"\u0005\u0092\u0000\u0000\u06c9\u06c8\u0001\u0000\u0000\u0000\u06c9\u06ca"+
		"\u0001\u0000\u0000\u0000\u06ca\u0761\u0001\u0000\u0000\u0000\u06cb\u06cc"+
		"\u0005\u012d\u0000\u0000\u06cc\u0761\u0005\u00fc\u0000\u0000\u06cd\u06ce"+
		"\u0005\u012d\u0000\u0000\u06ce\u0761\u0005\u0119\u0000\u0000\u06cf\u06d0"+
		"\u0005\u012d\u0000\u0000\u06d0\u06d1\u0005I\u0000\u0000\u06d1\u0761\u0005"+
		"\u0119\u0000\u0000\u06d2\u06d3\u0005z\u0000\u0000\u06d3\u0761\u0005\u0144"+
		"\u0000\u0000\u06d4\u06d5\u0005\u009f\u0000\u0000\u06d5\u0761\u0005\u0144"+
		"\u0000\u0000\u06d6\u06d7\u0005\u012d\u0000\u0000\u06d7\u0761\u0005=\u0000"+
		"\u0000\u06d8\u06d9\u0005\u012d\u0000\u0000\u06d9\u06da\u0005F\u0000\u0000"+
		"\u06da\u0761\u0005\u0144\u0000\u0000\u06db\u06dc\u0005\u012d\u0000\u0000"+
		"\u06dc\u0761\u0005\u0159\u0000\u0000\u06dd\u06de\u0005\u012d\u0000\u0000"+
		"\u06de\u0761\u0005\u00a4\u0000\u0000\u06df\u06e0\u0005\u012d\u0000\u0000"+
		"\u06e0\u0761\u0005\u00c6\u0000\u0000\u06e1\u06e2\u0005F\u0000\u0000\u06e2"+
		"\u0761\u0005\u00a3\u0000\u0000\u06e3\u06e4\u0005m\u0000\u0000\u06e4\u0761"+
		"\u0005\u00a3\u0000\u0000\u06e5\u06e6\u0005\r\u0000\u0000\u06e6\u0761\u0005"+
		"\u00a3\u0000\u0000\u06e7\u06e8\u0005\u00c5\u0000\u0000\u06e8\u0761\u0005"+
		"\u0144\u0000\u0000\u06e9\u06ea\u0005\u00c5\u0000\u0000\u06ea\u0761\u0005"+
		"S\u0000\u0000\u06eb\u06ec\u0005\u0166\u0000\u0000\u06ec\u0761\u0005\u0144"+
		"\u0000\u0000\u06ed\u06ee\u0005\u0166\u0000\u0000\u06ee\u0761\u0005S\u0000"+
		"\u0000\u06ef\u06f0\u0005F\u0000\u0000\u06f0\u06f1\u0005\u0149\u0000\u0000"+
		"\u06f1\u0761\u0005\u00ca\u0000\u0000\u06f2\u06f3\u0005m\u0000\u0000\u06f3"+
		"\u06f4\u0005\u0149\u0000\u0000\u06f4\u0761\u0005\u00ca\u0000\u0000\u06f5"+
		"\u06f6\u0005\r\u0000\u0000\u06f6\u06f7\u0005\u0144\u0000\u0000\u06f7\u06f8"+
		"\u0003\u0130\u0098\u0000\u06f8\u06f9\u0005\u00e0\u0000\u0000\u06f9\u06fa"+
		"\u00053\u0000\u0000\u06fa\u0761\u0001\u0000\u0000\u0000\u06fb\u06fc\u0005"+
		"\r\u0000\u0000\u06fc\u06fd\u0005\u0144\u0000\u0000\u06fd\u06fe\u0003\u0130"+
		"\u0098\u0000\u06fe\u06ff\u00053\u0000\u0000\u06ff\u0700\u0005#\u0000\u0000"+
		"\u0700\u0761\u0001\u0000\u0000\u0000\u0701\u0702\u0005\r\u0000\u0000\u0702"+
		"\u0703\u0005\u0144\u0000\u0000\u0703\u0704\u0003\u0130\u0098\u0000\u0704"+
		"\u0705\u0005\u00e0\u0000\u0000\u0705\u0706\u0005\u0133\u0000\u0000\u0706"+
		"\u0761\u0001\u0000\u0000\u0000\u0707\u0708\u0005\r\u0000\u0000\u0708\u0709"+
		"\u0005\u0144\u0000\u0000\u0709\u070a\u0003\u0130\u0098\u0000\u070a\u070b"+
		"\u0005\u012f\u0000\u0000\u070b\u070c\u0005#\u0000\u0000\u070c\u0761\u0001"+
		"\u0000\u0000\u0000\u070d\u070e\u0005\r\u0000\u0000\u070e\u070f\u0005\u0144"+
		"\u0000\u0000\u070f\u0710\u0003\u0130\u0098\u0000\u0710\u0711\u0005";
	private static final String _serializedATNSegment1 =
		"\u00e0\u0000\u0000\u0711\u0712\u0005\u012f\u0000\u0000\u0712\u0761\u0001"+
		"\u0000\u0000\u0000\u0713\u0714\u0005\r\u0000\u0000\u0714\u0715\u0005\u0144"+
		"\u0000\u0000\u0715\u0716\u0003\u0130\u0098\u0000\u0716\u0717\u0005\u00e0"+
		"\u0000\u0000\u0717\u0718\u0005\u013b\u0000\u0000\u0718\u0719\u0005\u0016"+
		"\u0000\u0000\u0719\u071a\u0005f\u0000\u0000\u071a\u0761\u0001\u0000\u0000"+
		"\u0000\u071b\u071c\u0005\r\u0000\u0000\u071c\u071d\u0005\u0144\u0000\u0000"+
		"\u071d\u071e\u0003\u0130\u0098\u0000\u071e\u071f\u0005\u0129\u0000\u0000"+
		"\u071f\u0720\u0005\u012f\u0000\u0000\u0720\u0721\u0005\u00c4\u0000\u0000"+
		"\u0721\u0761\u0001\u0000\u0000\u0000\u0722\u0723\u0005\r\u0000\u0000\u0723"+
		"\u0724\u0005\u0144\u0000\u0000\u0724\u0725\u0003\u0130\u0098\u0000\u0725"+
		"\u0726\u0005u\u0000\u0000\u0726\u0727\u0005\u00f3\u0000\u0000\u0727\u0761"+
		"\u0001\u0000\u0000\u0000\u0728\u0729\u0005\r\u0000\u0000\u0729\u072a\u0005"+
		"\u0144\u0000\u0000\u072a\u072b\u0003\u0130\u0098\u0000\u072b\u072c\u0005"+
		"\u0014\u0000\u0000\u072c\u072d\u0005\u00f3\u0000\u0000\u072d\u0761\u0001"+
		"\u0000\u0000\u0000\u072e\u072f\u0005\r\u0000\u0000\u072f\u0730\u0005\u0144"+
		"\u0000\u0000\u0730\u0731\u0003\u0130\u0098\u0000\u0731\u0732\u0005\u0160"+
		"\u0000\u0000\u0732\u0733\u0005\u00f3\u0000\u0000\u0733\u0761\u0001\u0000"+
		"\u0000\u0000\u0734\u0735\u0005\r\u0000\u0000\u0735\u0736\u0005\u0144\u0000"+
		"\u0000\u0736\u0737\u0003\u0130\u0098\u0000\u0737\u0738\u0005\u0156\u0000"+
		"\u0000\u0738\u0761\u0001\u0000\u0000\u0000\u0739\u073a\u0005\r\u0000\u0000"+
		"\u073a\u073b\u0005\u0144\u0000\u0000\u073b\u073d\u0003\u0130\u0098\u0000"+
		"\u073c\u073e\u0003f3\u0000\u073d\u073c\u0001\u0000\u0000\u0000\u073d\u073e"+
		"\u0001\u0000\u0000\u0000\u073e\u073f\u0001\u0000\u0000\u0000\u073f\u0740"+
		"\u0005<\u0000\u0000\u0740\u0761\u0001\u0000\u0000\u0000\u0741\u0742\u0005"+
		"\r\u0000\u0000\u0742\u0743\u0005\u0144\u0000\u0000\u0743\u0745\u0003\u0130"+
		"\u0098\u0000\u0744\u0746\u0003f3\u0000\u0745\u0744\u0001\u0000\u0000\u0000"+
		"\u0745\u0746\u0001\u0000\u0000\u0000\u0746\u0747\u0001\u0000\u0000\u0000"+
		"\u0747\u0748\u0005@\u0000\u0000\u0748\u0761\u0001\u0000\u0000\u0000\u0749"+
		"\u074a\u0005\r\u0000\u0000\u074a\u074b\u0005\u0144\u0000\u0000\u074b\u074d"+
		"\u0003\u0130\u0098\u0000\u074c\u074e\u0003f3\u0000\u074d\u074c\u0001\u0000"+
		"\u0000\u0000\u074d\u074e\u0001\u0000\u0000\u0000\u074e\u074f\u0001\u0000"+
		"\u0000\u0000\u074f\u0750\u0005\u0129\u0000\u0000\u0750\u0751\u0005\u0083"+
		"\u0000\u0000\u0751\u0761\u0001\u0000\u0000\u0000\u0752\u0753\u0005\r\u0000"+
		"\u0000\u0753\u0754\u0005\u0144\u0000\u0000\u0754\u0756\u0003\u0130\u0098"+
		"\u0000\u0755\u0757\u0003f3\u0000\u0756\u0755\u0001\u0000\u0000\u0000\u0756"+
		"\u0757\u0001\u0000\u0000\u0000\u0757\u0758\u0001\u0000\u0000\u0000\u0758"+
		"\u0759\u0005\u010f\u0000\u0000\u0759\u075a\u00059\u0000\u0000\u075a\u0761"+
		"\u0001\u0000\u0000\u0000\u075b\u075c\u0005\u0139\u0000\u0000\u075c\u0761"+
		"\u0005\u0158\u0000\u0000\u075d\u0761\u0005;\u0000\u0000\u075e\u0761\u0005"+
		"\u011a\u0000\u0000\u075f\u0761\u0005e\u0000\u0000\u0760\u06b8\u0001\u0000"+
		"\u0000\u0000\u0760\u06ba\u0001\u0000\u0000\u0000\u0760\u06bc\u0001\u0000"+
		"\u0000\u0000\u0760\u06c0\u0001\u0000\u0000\u0000\u0760\u06c4\u0001\u0000"+
		"\u0000\u0000\u0760\u06c6\u0001\u0000\u0000\u0000\u0760\u06cb\u0001\u0000"+
		"\u0000\u0000\u0760\u06cd\u0001\u0000\u0000\u0000\u0760\u06cf\u0001\u0000"+
		"\u0000\u0000\u0760\u06d2\u0001\u0000\u0000\u0000\u0760\u06d4\u0001\u0000"+
		"\u0000\u0000\u0760\u06d6\u0001\u0000\u0000\u0000\u0760\u06d8\u0001\u0000"+
		"\u0000\u0000\u0760\u06db\u0001\u0000\u0000\u0000\u0760\u06dd\u0001\u0000"+
		"\u0000\u0000\u0760\u06df\u0001\u0000\u0000\u0000\u0760\u06e1\u0001\u0000"+
		"\u0000\u0000\u0760\u06e3\u0001\u0000\u0000\u0000\u0760\u06e5\u0001\u0000"+
		"\u0000\u0000\u0760\u06e7\u0001\u0000\u0000\u0000\u0760\u06e9\u0001\u0000"+
		"\u0000\u0000\u0760\u06eb\u0001\u0000\u0000\u0000\u0760\u06ed\u0001\u0000"+
		"\u0000\u0000\u0760\u06ef\u0001\u0000\u0000\u0000\u0760\u06f2\u0001\u0000"+
		"\u0000\u0000\u0760\u06f5\u0001\u0000\u0000\u0000\u0760\u06fb\u0001\u0000"+
		"\u0000\u0000\u0760\u0701\u0001\u0000\u0000\u0000\u0760\u0707\u0001\u0000"+
		"\u0000\u0000\u0760\u070d\u0001\u0000\u0000\u0000\u0760\u0713\u0001\u0000"+
		"\u0000\u0000\u0760\u071b\u0001\u0000\u0000\u0000\u0760\u0722\u0001\u0000"+
		"\u0000\u0000\u0760\u0728\u0001\u0000\u0000\u0000\u0760\u072e\u0001\u0000"+
		"\u0000\u0000\u0760\u0734\u0001\u0000\u0000\u0000\u0760\u0739\u0001\u0000"+
		"\u0000\u0000\u0760\u0741\u0001\u0000\u0000\u0000\u0760\u0749\u0001\u0000"+
		"\u0000\u0000\u0760\u0752\u0001\u0000\u0000\u0000\u0760\u075b\u0001\u0000"+
		"\u0000\u0000\u0760\u075d\u0001\u0000\u0000\u0000\u0760\u075e\u0001\u0000"+
		"\u0000\u0000\u0760\u075f\u0001\u0000\u0000\u0000\u0761M\u0001\u0000\u0000"+
		"\u0000\u0762\u0764\u0005F\u0000\u0000\u0763\u0765\u0005\u0149\u0000\u0000"+
		"\u0764\u0763\u0001\u0000\u0000\u0000\u0764\u0765\u0001\u0000\u0000\u0000"+
		"\u0765\u0767\u0001\u0000\u0000\u0000\u0766\u0768\u0005}\u0000\u0000\u0767"+
		"\u0766\u0001\u0000\u0000\u0000\u0767\u0768\u0001\u0000\u0000\u0000\u0768"+
		"\u0769\u0001\u0000\u0000\u0000\u0769\u076e\u0005\u0144\u0000\u0000\u076a"+
		"\u076b\u0005\u009c\u0000\u0000\u076b\u076c\u0003\u014c\u00a6\u0000\u076c"+
		"\u076d\u0005w\u0000\u0000\u076d\u076f\u0001\u0000\u0000\u0000\u076e\u076a"+
		"\u0001\u0000\u0000\u0000\u076e\u076f\u0001\u0000\u0000\u0000\u076f\u0770"+
		"\u0001\u0000\u0000\u0000\u0770\u0771\u0003\u0096K\u0000\u0771O\u0001\u0000"+
		"\u0000\u0000\u0772\u0773\u0005F\u0000\u0000\u0773\u0775\u0005\u00ea\u0000"+
		"\u0000\u0774\u0772\u0001\u0000\u0000\u0000\u0774\u0775\u0001\u0000\u0000"+
		"\u0000\u0775\u0776\u0001\u0000\u0000\u0000\u0776\u0777\u0005\u010f\u0000"+
		"\u0000\u0777\u0778\u0005\u0144\u0000\u0000\u0778\u0779\u0003\u0096K\u0000"+
		"\u0779Q\u0001\u0000\u0000\u0000\u077a\u077b\u00052\u0000\u0000\u077b\u077c"+
		"\u0005#\u0000\u0000\u077c\u077d\u0005\u0002\u0000\u0000\u077d\u077e\u0003"+
		"\u0128\u0094\u0000\u077e\u077f\u0005\u0003\u0000\u0000\u077fS\u0001\u0000"+
		"\u0000\u0000\u0780\u0781\u00053\u0000\u0000\u0781\u0782\u0005#\u0000\u0000"+
		"\u0782\u0786\u0003\u0106\u0083\u0000\u0783\u0784\u0005\u0133\u0000\u0000"+
		"\u0784\u0785\u0005#\u0000\u0000\u0785\u0787\u0003\u010a\u0085\u0000\u0786"+
		"\u0783\u0001\u0000\u0000\u0000\u0786\u0787\u0001\u0000\u0000\u0000\u0787"+
		"\u0788\u0001\u0000\u0000\u0000\u0788\u0789\u0005\u00ae\u0000\u0000\u0789"+
		"\u078a\u0005\u01a5\u0000\u0000\u078a\u078b\u0005\"\u0000\u0000\u078bU"+
		"\u0001\u0000\u0000\u0000\u078c\u078d\u0005\u012f\u0000\u0000\u078d\u078e"+
		"\u0005#\u0000\u0000\u078e\u078f\u0003\u0106\u0083\u0000\u078f\u0792\u0005"+
		"\u00e6\u0000\u0000\u0790\u0793\u0003\u0088D\u0000\u0791\u0793\u0003\u008a"+
		"E\u0000\u0792\u0790\u0001\u0000\u0000\u0000\u0792\u0791\u0001\u0000\u0000"+
		"\u0000\u0793\u0797\u0001\u0000\u0000\u0000\u0794\u0795\u0005\u013b\u0000"+
		"\u0000\u0795\u0796\u0005\u0016\u0000\u0000\u0796\u0798\u0005f\u0000\u0000"+
		"\u0797\u0794\u0001\u0000\u0000\u0000\u0797\u0798\u0001\u0000\u0000\u0000"+
		"\u0798W\u0001\u0000\u0000\u0000\u0799\u079a\u0005\u00c4\u0000\u0000\u079a"+
		"\u079b\u0003\u01d0\u00e8\u0000\u079bY\u0001\u0000\u0000\u0000\u079c\u079d"+
		"\u0005\u017e\u0000\u0000\u079d\u07a3\u0005\u0120\u0000\u0000\u079e\u07a4"+
		"\u0005\u001e\u0000\u0000\u079f\u07a4\u0005>\u0000\u0000\u07a0\u07a4\u0005"+
		"s\u0000\u0000\u07a1\u07a2\u0005\u015f\u0000\u0000\u07a2\u07a4\u0005s\u0000"+
		"\u0000\u07a3\u079e\u0001\u0000\u0000\u0000\u07a3\u079f\u0001\u0000\u0000"+
		"\u0000\u07a3\u07a0\u0001\u0000\u0000\u0000\u07a3\u07a1\u0001\u0000\u0000"+
		"\u0000\u07a4[\u0001\u0000\u0000\u0000\u07a5\u07a6\u0005:\u0000\u0000\u07a6"+
		"\u07a7\u0003\u01d0\u00e8\u0000\u07a7]\u0001\u0000\u0000\u0000\u07a8\u07a9"+
		"\u0003`0\u0000\u07a9\u07aa\u0005\u0000\u0000\u0001\u07aa_\u0001\u0000"+
		"\u0000\u0000\u07ab\u07ad\u0003t:\u0000\u07ac\u07ab\u0001\u0000\u0000\u0000"+
		"\u07ac\u07ad\u0001\u0000\u0000\u0000\u07ad\u07ae\u0001\u0000\u0000\u0000"+
		"\u07ae\u07af\u0003\u009eO\u0000\u07af\u07b0\u0003\u009aM\u0000\u07b0a"+
		"\u0001\u0000\u0000\u0000\u07b1\u07b2\u0005\u00a9\u0000\u0000\u07b2\u07b4"+
		"\u0005\u00f2\u0000\u0000\u07b3\u07b5\u0005\u0144\u0000\u0000\u07b4\u07b3"+
		"\u0001\u0000\u0000\u0000\u07b4\u07b5\u0001\u0000\u0000\u0000\u07b5\u07b6"+
		"\u0001\u0000\u0000\u0000\u07b6\u07b8\u0003\u0096K\u0000\u07b7\u07b9\u0003"+
		"\u0114\u008a\u0000\u07b8\u07b7\u0001\u0000\u0000\u0000\u07b8\u07b9\u0001"+
		"\u0000\u0000\u0000\u07b9\u07c1\u0001\u0000\u0000\u0000\u07ba\u07bf\u0003"+
		"f3\u0000\u07bb\u07bc\u0005\u009c\u0000\u0000\u07bc\u07bd\u0003\u014c\u00a6"+
		"\u0000\u07bd\u07be\u0005w\u0000\u0000\u07be\u07c0\u0001\u0000\u0000\u0000"+
		"\u07bf\u07bb\u0001\u0000\u0000\u0000\u07bf\u07c0\u0001\u0000\u0000\u0000"+
		"\u07c0\u07c2\u0001\u0000\u0000\u0000\u07c1\u07ba\u0001\u0000\u0000\u0000"+
		"\u07c1\u07c2\u0001\u0000\u0000\u0000\u07c2\u07c6\u0001\u0000\u0000\u0000"+
		"\u07c3\u07c4\u0005#\u0000\u0000\u07c4\u07c7\u0005\u00d8\u0000\u0000\u07c5"+
		"\u07c7\u0003\u0106\u0083\u0000\u07c6\u07c3\u0001\u0000\u0000\u0000\u07c6"+
		"\u07c5\u0001\u0000\u0000\u0000\u07c6\u07c7\u0001\u0000\u0000\u0000\u07c7"+
		"\u0807\u0001\u0000\u0000\u0000\u07c8\u07c9\u0005\u00a9\u0000\u0000\u07c9"+
		"\u07cb\u0005\u00ae\u0000\u0000\u07ca\u07cc\u0005\u0144\u0000\u0000\u07cb"+
		"\u07ca\u0001\u0000\u0000\u0000\u07cb\u07cc\u0001\u0000\u0000\u0000\u07cc"+
		"\u07cd\u0001\u0000\u0000\u0000\u07cd\u07cf\u0003\u0096K\u0000\u07ce\u07d0"+
		"\u0003\u0114\u008a\u0000\u07cf\u07ce\u0001\u0000\u0000\u0000\u07cf\u07d0"+
		"\u0001\u0000\u0000\u0000\u07d0\u07d2\u0001\u0000\u0000\u0000\u07d1\u07d3"+
		"\u0003f3\u0000\u07d2\u07d1\u0001\u0000\u0000\u0000\u07d2\u07d3\u0001\u0000"+
		"\u0000\u0000\u07d3\u07d8\u0001\u0000\u0000\u0000\u07d4\u07d5\u0005\u009c"+
		"\u0000\u0000\u07d5\u07d6\u0003\u014c\u00a6\u0000\u07d6\u07d7\u0005w\u0000"+
		"\u0000\u07d7\u07d9\u0001\u0000\u0000\u0000\u07d8\u07d4\u0001\u0000\u0000"+
		"\u0000\u07d8\u07d9\u0001\u0000\u0000\u0000\u07d9\u07dd\u0001\u0000\u0000"+
		"\u0000\u07da\u07db\u0005#\u0000\u0000\u07db\u07de\u0005\u00d8\u0000\u0000"+
		"\u07dc\u07de\u0003\u0106\u0083\u0000\u07dd\u07da\u0001\u0000\u0000\u0000"+
		"\u07dd\u07dc\u0001\u0000\u0000\u0000\u07dd\u07de\u0001\u0000\u0000\u0000"+
		"\u07de\u0807\u0001\u0000\u0000\u0000\u07df\u07e0\u0005\u00a9\u0000\u0000"+
		"\u07e0\u07e2\u0005\u00ae\u0000\u0000\u07e1\u07e3\u0005\u0144\u0000\u0000"+
		"\u07e2\u07e1\u0001\u0000\u0000\u0000\u07e2\u07e3\u0001\u0000\u0000\u0000"+
		"\u07e3\u07e4\u0001\u0000\u0000\u0000\u07e4\u07e6\u0003\u0096K\u0000\u07e5"+
		"\u07e7\u0003\u0114\u008a\u0000\u07e6\u07e5\u0001\u0000\u0000\u0000\u07e6"+
		"\u07e7\u0001\u0000\u0000\u0000\u07e7\u07e8\u0001\u0000\u0000\u0000\u07e8"+
		"\u07e9\u0005\u010f\u0000\u0000\u07e9\u07ea\u0003\u00c2a\u0000\u07ea\u0807"+
		"\u0001\u0000\u0000\u0000\u07eb\u07ec\u0005\u00a9\u0000\u0000\u07ec\u07ee"+
		"\u0005\u00f2\u0000\u0000\u07ed\u07ef\u0005\u00c3\u0000\u0000\u07ee\u07ed"+
		"\u0001\u0000\u0000\u0000\u07ee\u07ef\u0001\u0000\u0000\u0000\u07ef\u07f0"+
		"\u0001\u0000\u0000\u0000\u07f0\u07f1\u0005g\u0000\u0000\u07f1\u07f3\u0003"+
		"\u01d0\u00e8\u0000\u07f2\u07f4\u0003\u0126\u0093\u0000\u07f3\u07f2\u0001"+
		"\u0000\u0000\u0000\u07f3\u07f4\u0001\u0000\u0000\u0000\u07f4\u07f6\u0001"+
		"\u0000\u0000\u0000\u07f5\u07f7\u0003\u008cF\u0000\u07f6\u07f5\u0001\u0000"+
		"\u0000\u0000\u07f6\u07f7\u0001\u0000\u0000\u0000\u07f7\u0807\u0001\u0000"+
		"\u0000\u0000\u07f8\u07f9\u0005\u00a9\u0000\u0000\u07f9\u07fb\u0005\u00f2"+
		"\u0000\u0000\u07fa\u07fc\u0005\u00c3\u0000\u0000\u07fb\u07fa\u0001\u0000"+
		"\u0000\u0000\u07fb\u07fc\u0001\u0000\u0000\u0000\u07fc\u07fd\u0001\u0000"+
		"\u0000\u0000\u07fd\u07ff\u0005g\u0000\u0000\u07fe\u0800\u0003\u01d0\u00e8"+
		"\u0000\u07ff\u07fe\u0001\u0000\u0000\u0000\u07ff\u0800\u0001\u0000\u0000"+
		"\u0000\u0800\u0801\u0001\u0000\u0000\u0000\u0801\u0804\u0003x<\u0000\u0802"+
		"\u0803\u0005\u00e9\u0000\u0000\u0803\u0805\u0003|>\u0000\u0804\u0802\u0001"+
		"\u0000\u0000\u0000\u0804\u0805\u0001\u0000\u0000\u0000\u0805\u0807\u0001"+
		"\u0000\u0000\u0000\u0806\u07b1\u0001\u0000\u0000\u0000\u0806\u07c8\u0001"+
		"\u0000\u0000\u0000\u0806\u07df\u0001\u0000\u0000\u0000\u0806\u07eb\u0001"+
		"\u0000\u0000\u0000\u0806\u07f8\u0001\u0000\u0000\u0000\u0807c\u0001\u0000"+
		"\u0000\u0000\u0808\u080a\u0003f3\u0000\u0809\u080b\u0003X,\u0000\u080a"+
		"\u0809\u0001\u0000\u0000\u0000\u080a\u080b\u0001\u0000\u0000\u0000\u080b"+
		"e\u0001\u0000\u0000\u0000\u080c\u080d\u0005\u00f3\u0000\u0000\u080d\u080e"+
		"\u0005\u0002\u0000\u0000\u080e\u0813\u0003h4\u0000\u080f\u0810\u0005\u0004"+
		"\u0000\u0000\u0810\u0812\u0003h4\u0000\u0811\u080f\u0001\u0000\u0000\u0000"+
		"\u0812\u0815\u0001\u0000\u0000\u0000\u0813\u0811\u0001\u0000\u0000\u0000"+
		"\u0813\u0814\u0001\u0000\u0000\u0000\u0814\u0816\u0001\u0000\u0000\u0000"+
		"\u0815\u0813\u0001\u0000\u0000\u0000\u0816\u0817\u0005\u0003\u0000\u0000"+
		"\u0817g\u0001\u0000\u0000\u0000\u0818\u081b\u0003\u01c0\u00e0\u0000\u0819"+
		"\u081a\u0005\u0183\u0000\u0000\u081a\u081c\u0003\u0158\u00ac\u0000\u081b"+
		"\u0819\u0001\u0000\u0000\u0000\u081b\u081c\u0001\u0000\u0000\u0000\u081c"+
		"\u0822\u0001\u0000\u0000\u0000\u081d\u081e\u0003\u01c0\u00e0\u0000\u081e"+
		"\u081f\u0005\u0183\u0000\u0000\u081f\u0820\u0005]\u0000\u0000\u0820\u0822"+
		"\u0001\u0000\u0000\u0000\u0821\u0818\u0001\u0000\u0000\u0000\u0821\u081d"+
		"\u0001\u0000\u0000\u0000\u0822i\u0001\u0000\u0000\u0000\u0823\u0824\u0007"+
		"\f\u0000\u0000\u0824k\u0001\u0000\u0000\u0000\u0825\u0826\u0007\r\u0000"+
		"\u0000\u0826m\u0001\u0000\u0000\u0000\u0827\u0828\u0007\u000e\u0000\u0000"+
		"\u0828o\u0001\u0000\u0000\u0000\u0829\u0831\u0003\u0096K\u0000\u082a\u0831"+
		"\u0003\u01d0\u00e8\u0000\u082b\u0831\u0003\u015a\u00ad\u0000\u082c\u0831"+
		"\u0003\u015c\u00ae\u0000\u082d\u0831\u0003\u015e\u00af\u0000\u082e\u0831"+
		"\u0003\u0150\u00a8\u0000\u082f\u0831\u0005\b\u0000\u0000\u0830\u0829\u0001"+
		"\u0000\u0000\u0000\u0830\u082a\u0001\u0000\u0000\u0000\u0830\u082b\u0001"+
		"\u0000\u0000\u0000\u0830\u082c\u0001\u0000\u0000\u0000\u0830\u082d\u0001"+
		"\u0000\u0000\u0000\u0830\u082e\u0001\u0000\u0000\u0000\u0830\u082f\u0001"+
		"\u0000\u0000\u0000\u0831q\u0001\u0000\u0000\u0000\u0832\u0837\u0003\u01bc"+
		"\u00de\u0000\u0833\u0834\u0005\u0005\u0000\u0000\u0834\u0836\u0003\u01bc"+
		"\u00de\u0000\u0835\u0833\u0001\u0000\u0000\u0000\u0836\u0839\u0001\u0000"+
		"\u0000\u0000\u0837\u0835\u0001\u0000\u0000\u0000\u0837\u0838\u0001\u0000"+
		"\u0000\u0000\u0838s\u0001\u0000\u0000\u0000\u0839\u0837\u0001\u0000\u0000"+
		"\u0000\u083a\u083c\u0005\u017e\u0000\u0000\u083b\u083d\u0005\u0107\u0000"+
		"\u0000\u083c\u083b\u0001\u0000\u0000\u0000\u083c\u083d\u0001\u0000\u0000"+
		"\u0000\u083d\u083e\u0001\u0000\u0000\u0000\u083e\u0843\u0003v;\u0000\u083f"+
		"\u0840\u0005\u0004\u0000\u0000\u0840\u0842\u0003v;\u0000\u0841\u083f\u0001"+
		"\u0000\u0000\u0000\u0842\u0845\u0001\u0000\u0000\u0000\u0843\u0841\u0001"+
		"\u0000\u0000\u0000\u0843\u0844\u0001\u0000\u0000\u0000\u0844u\u0001\u0000"+
		"\u0000\u0000\u0845\u0843\u0001\u0000\u0000\u0000\u0846\u0848\u0003\u01bc"+
		"\u00de\u0000\u0847\u0849\u0003\u0106\u0083\u0000\u0848\u0847\u0001\u0000"+
		"\u0000\u0000\u0848\u0849\u0001\u0000\u0000\u0000\u0849\u084b\u0001\u0000"+
		"\u0000\u0000\u084a\u084c\u0005\u0016\u0000\u0000\u084b\u084a\u0001\u0000"+
		"\u0000\u0000\u084b\u084c\u0001\u0000\u0000\u0000\u084c\u084d\u0001\u0000"+
		"\u0000\u0000\u084d\u084e\u0005\u0002\u0000\u0000\u084e\u084f\u0003`0\u0000"+
		"\u084f\u0850\u0005\u0003\u0000\u0000\u0850w\u0001\u0000\u0000\u0000\u0851"+
		"\u0852\u0005\u016d\u0000\u0000\u0852\u0853\u0003\u012a\u0095\u0000\u0853"+
		"y\u0001\u0000\u0000\u0000\u0854\u0855\u0005\u00e9\u0000\u0000\u0855\u0864"+
		"\u0003\u0084B\u0000\u0856\u0857\u0005\u00f4\u0000\u0000\u0857\u0858\u0005"+
		"#\u0000\u0000\u0858\u0864\u0003\u0138\u009c\u0000\u0859\u0864\u0003V+"+
		"\u0000\u085a\u0864\u0003R)\u0000\u085b\u0864\u0003T*\u0000\u085c\u0864"+
		"\u0003\u0126\u0093\u0000\u085d\u0864\u0003\u008cF\u0000\u085e\u0864\u0003"+
		"X,\u0000\u085f\u0864\u0003\\.\u0000\u0860\u0864\u0003\u0174\u00ba\u0000"+
		"\u0861\u0862\u0005\u0148\u0000\u0000\u0862\u0864\u0003|>\u0000\u0863\u0854"+
		"\u0001\u0000\u0000\u0000\u0863\u0856\u0001\u0000\u0000\u0000\u0863\u0859"+
		"\u0001\u0000\u0000\u0000\u0863\u085a\u0001\u0000\u0000\u0000\u0863\u085b"+
		"\u0001\u0000\u0000\u0000\u0863\u085c\u0001\u0000\u0000\u0000\u0863\u085d"+
		"\u0001\u0000\u0000\u0000\u0863\u085e\u0001\u0000\u0000\u0000\u0863\u085f"+
		"\u0001\u0000\u0000\u0000\u0863\u0860\u0001\u0000\u0000\u0000\u0863\u0861"+
		"\u0001\u0000\u0000\u0000\u0864\u0867\u0001\u0000\u0000\u0000\u0865\u0863"+
		"\u0001\u0000\u0000\u0000\u0865\u0866\u0001\u0000\u0000\u0000\u0866{\u0001"+
		"\u0000\u0000\u0000\u0867\u0865\u0001\u0000\u0000\u0000\u0868\u0869\u0005"+
		"\u0002\u0000\u0000\u0869\u086e\u0003~?\u0000\u086a\u086b\u0005\u0004\u0000"+
		"\u0000\u086b\u086d\u0003~?\u0000\u086c\u086a\u0001\u0000\u0000\u0000\u086d"+
		"\u0870\u0001\u0000\u0000\u0000\u086e\u086c\u0001\u0000\u0000\u0000\u086e"+
		"\u086f\u0001\u0000\u0000\u0000\u086f\u0871\u0001\u0000\u0000\u0000\u0870"+
		"\u086e\u0001\u0000\u0000\u0000\u0871\u0872\u0005\u0003\u0000\u0000\u0872"+
		"}\u0001\u0000\u0000\u0000\u0873\u0878\u0003\u0080@\u0000\u0874\u0876\u0005"+
		"\u0183\u0000\u0000\u0875\u0874\u0001\u0000\u0000\u0000\u0875\u0876\u0001"+
		"\u0000\u0000\u0000\u0876\u0877\u0001\u0000\u0000\u0000\u0877\u0879\u0003"+
		"\u0082A\u0000\u0878\u0875\u0001\u0000\u0000\u0000\u0878\u0879\u0001\u0000"+
		"\u0000\u0000\u0879\u007f\u0001\u0000\u0000\u0000\u087a\u087f\u0003\u01bc"+
		"\u00de\u0000\u087b\u087c\u0005\u0005\u0000\u0000\u087c\u087e\u0003\u01bc"+
		"\u00de\u0000\u087d\u087b\u0001\u0000\u0000\u0000\u087e\u0881\u0001\u0000"+
		"\u0000\u0000\u087f\u087d\u0001\u0000\u0000\u0000\u087f\u0880\u0001\u0000"+
		"\u0000\u0000\u0880\u0884\u0001\u0000\u0000\u0000\u0881\u087f\u0001\u0000"+
		"\u0000\u0000\u0882\u0884\u0003\u01d0\u00e8\u0000\u0883\u087a\u0001\u0000"+
		"\u0000\u0000\u0883\u0882\u0001\u0000\u0000\u0000\u0884\u0081\u0001\u0000"+
		"\u0000\u0000\u0885\u088a\u0005\u01a5\u0000\u0000\u0886\u088a\u0005\u01a7"+
		"\u0000\u0000\u0887\u088a\u0003\u0160\u00b0\u0000\u0888\u088a\u0003\u01d0"+
		"\u00e8\u0000\u0889\u0885\u0001\u0000\u0000\u0000\u0889\u0886\u0001\u0000"+
		"\u0000\u0000\u0889\u0887\u0001\u0000\u0000\u0000\u0889\u0888\u0001\u0000"+
		"\u0000\u0000\u088a\u0083\u0001\u0000\u0000\u0000\u088b\u088c\u0005\u0002"+
		"\u0000\u0000\u088c\u0891\u0003\u0086C\u0000\u088d\u088e\u0005\u0004\u0000"+
		"\u0000\u088e\u0890\u0003\u0086C\u0000\u088f\u088d\u0001\u0000\u0000\u0000"+
		"\u0890\u0893\u0001\u0000\u0000\u0000\u0891\u088f\u0001\u0000\u0000\u0000"+
		"\u0891\u0892\u0001\u0000\u0000\u0000\u0892\u0894\u0001\u0000\u0000\u0000"+
		"\u0893\u0891\u0001\u0000\u0000\u0000\u0894\u0895\u0005\u0003\u0000\u0000"+
		"\u0895\u0085\u0001\u0000\u0000\u0000\u0896\u089b\u0003\u0080@\u0000\u0897"+
		"\u0899\u0005\u0183\u0000\u0000\u0898\u0897\u0001\u0000\u0000\u0000\u0898"+
		"\u0899\u0001\u0000\u0000\u0000\u0899\u089a\u0001\u0000\u0000\u0000\u089a"+
		"\u089c\u0003\u0140\u00a0\u0000\u089b\u0898\u0001\u0000\u0000\u0000\u089b"+
		"\u089c\u0001\u0000\u0000\u0000\u089c\u0087\u0001\u0000\u0000\u0000\u089d"+
		"\u089e\u0005\u0002\u0000\u0000\u089e\u08a3\u0003\u0158\u00ac\u0000\u089f"+
		"\u08a0\u0005\u0004\u0000\u0000\u08a0\u08a2\u0003\u0158\u00ac\u0000\u08a1"+
		"\u089f\u0001\u0000\u0000\u0000\u08a2\u08a5\u0001\u0000\u0000\u0000\u08a3"+
		"\u08a1\u0001\u0000\u0000\u0000\u08a3\u08a4\u0001\u0000\u0000\u0000\u08a4"+
		"\u08a6\u0001\u0000\u0000\u0000\u08a5\u08a3\u0001\u0000\u0000\u0000\u08a6"+
		"\u08a7\u0005\u0003\u0000\u0000\u08a7\u0089\u0001\u0000\u0000\u0000\u08a8"+
		"\u08a9\u0005\u0002\u0000\u0000\u08a9\u08ae\u0003\u0088D\u0000\u08aa\u08ab"+
		"\u0005\u0004\u0000\u0000\u08ab\u08ad\u0003\u0088D\u0000\u08ac\u08aa\u0001"+
		"\u0000\u0000\u0000\u08ad\u08b0\u0001\u0000\u0000\u0000\u08ae\u08ac\u0001"+
		"\u0000\u0000\u0000\u08ae\u08af\u0001\u0000\u0000\u0000\u08af\u08b1\u0001"+
		"\u0000\u0000\u0000\u08b0\u08ae\u0001\u0000\u0000\u0000\u08b1\u08b2\u0005"+
		"\u0003\u0000\u0000\u08b2\u008b\u0001\u0000\u0000\u0000\u08b3\u08b4\u0005"+
		"\u013b\u0000\u0000\u08b4\u08b5\u0005\u0016\u0000\u0000\u08b5\u08ba\u0003"+
		"\u008eG\u0000\u08b6\u08b7\u0005\u013b\u0000\u0000\u08b7\u08b8\u0005#\u0000"+
		"\u0000\u08b8\u08ba\u0003\u0090H\u0000\u08b9\u08b3\u0001\u0000\u0000\u0000"+
		"\u08b9\u08b6\u0001\u0000\u0000\u0000\u08ba\u008d\u0001\u0000\u0000\u0000"+
		"\u08bb\u08bc\u0005\u00a8\u0000\u0000\u08bc\u08bd\u0003\u01d0\u00e8\u0000"+
		"\u08bd\u08be\u0005\u00ee\u0000\u0000\u08be\u08bf\u0003\u01d0\u00e8\u0000"+
		"\u08bf\u08c2\u0001\u0000\u0000\u0000\u08c0\u08c2\u0003\u01c0\u00e0\u0000"+
		"\u08c1\u08bb\u0001\u0000\u0000\u0000\u08c1\u08c0\u0001\u0000\u0000\u0000"+
		"\u08c2\u008f\u0001\u0000\u0000\u0000\u08c3\u08c7\u0003\u01d0\u00e8\u0000"+
		"\u08c4\u08c5\u0005\u017e\u0000\u0000\u08c5\u08c6\u0005\u0127\u0000\u0000"+
		"\u08c6\u08c8\u0003|>\u0000\u08c7\u08c4\u0001\u0000\u0000\u0000\u08c7\u08c8"+
		"\u0001\u0000\u0000\u0000\u08c8\u0091\u0001\u0000\u0000\u0000\u08c9\u08ca"+
		"\u0003\u01c0\u00e0\u0000\u08ca\u08cb\u0003\u01d0\u00e8\u0000\u08cb\u0093"+
		"\u0001\u0000\u0000\u0000\u08cc\u08cd\u0003b1\u0000\u08cd\u08ce\u0003`"+
		"0\u0000\u08ce\u090a\u0001\u0000\u0000\u0000\u08cf\u08d1\u0003\u00cae\u0000"+
		"\u08d0\u08d2\u0003\u009cN\u0000\u08d1\u08d0\u0001\u0000\u0000\u0000\u08d2"+
		"\u08d3\u0001\u0000\u0000\u0000\u08d3\u08d1\u0001\u0000\u0000\u0000\u08d3"+
		"\u08d4\u0001\u0000\u0000\u0000\u08d4\u090a\u0001\u0000\u0000\u0000\u08d5"+
		"\u08d6\u0005`\u0000\u0000\u08d6\u08d7\u0005\u008c\u0000\u0000\u08d7\u08d8"+
		"\u0003\u0096K\u0000\u08d8\u08da\u0003\u0124\u0092\u0000\u08d9\u08db\u0003"+
		"\u00c2a\u0000\u08da\u08d9\u0001\u0000\u0000\u0000\u08da\u08db\u0001\u0000"+
		"\u0000\u0000\u08db\u090a\u0001\u0000\u0000\u0000\u08dc\u08dd\u0005\u016a"+
		"\u0000\u0000\u08dd\u08de\u0003\u0096K\u0000\u08de\u08df\u0003\u0124\u0092"+
		"\u0000\u08df\u08e1\u0003\u00aeW\u0000\u08e0\u08e2\u0003\u00c2a\u0000\u08e1"+
		"\u08e0\u0001\u0000\u0000\u0000\u08e1\u08e2\u0001\u0000\u0000\u0000\u08e2"+
		"\u090a\u0001\u0000\u0000\u0000\u08e3\u08e7\u0005\u00cd\u0000\u0000\u08e4"+
		"\u08e5\u0005\u017e\u0000\u0000\u08e5\u08e6\u0005\u0120\u0000\u0000\u08e6"+
		"\u08e8\u0005s\u0000\u0000\u08e7\u08e4\u0001\u0000\u0000\u0000\u08e7\u08e8"+
		"\u0001\u0000\u0000\u0000\u08e8\u08e9\u0001\u0000\u0000\u0000\u08e9\u08ea"+
		"\u0005\u00ae\u0000\u0000\u08ea\u08eb\u0003\u0096K\u0000\u08eb\u08ec\u0003"+
		"\u0124\u0092\u0000\u08ec\u08f2\u0005\u016d\u0000\u0000\u08ed\u08f3\u0003"+
		"\u0096K\u0000\u08ee\u08ef\u0005\u0002\u0000\u0000\u08ef\u08f0\u0003`0"+
		"\u0000\u08f0\u08f1\u0005\u0003\u0000\u0000\u08f1\u08f3\u0001\u0000\u0000"+
		"\u0000\u08f2\u08ed\u0001\u0000\u0000\u0000\u08f2\u08ee\u0001\u0000\u0000"+
		"\u0000\u08f3\u08f4\u0001\u0000\u0000\u0000\u08f4\u08f5\u0003\u0124\u0092"+
		"\u0000\u08f5\u08f6\u0005\u00e6\u0000\u0000\u08f6\u08fa\u0003\u0148\u00a4"+
		"\u0000\u08f7\u08f9\u0003\u00b0X\u0000\u08f8\u08f7\u0001\u0000\u0000\u0000"+
		"\u08f9\u08fc\u0001\u0000\u0000\u0000\u08fa\u08f8\u0001\u0000\u0000\u0000"+
		"\u08fa\u08fb\u0001\u0000\u0000\u0000\u08fb\u0900\u0001\u0000\u0000\u0000"+
		"\u08fc\u08fa\u0001\u0000\u0000\u0000\u08fd\u08ff\u0003\u00b2Y\u0000\u08fe"+
		"\u08fd\u0001\u0000\u0000\u0000\u08ff\u0902\u0001\u0000\u0000\u0000\u0900"+
		"\u08fe\u0001\u0000\u0000\u0000\u0900\u0901\u0001\u0000\u0000\u0000\u0901"+
		"\u0906\u0001\u0000\u0000\u0000\u0902\u0900\u0001\u0000\u0000\u0000\u0903"+
		"\u0905\u0003\u00b4Z\u0000\u0904\u0903\u0001\u0000\u0000\u0000\u0905\u0908"+
		"\u0001\u0000\u0000\u0000\u0906\u0904\u0001\u0000\u0000\u0000\u0906\u0907"+
		"\u0001\u0000\u0000\u0000\u0907\u090a\u0001\u0000\u0000\u0000\u0908\u0906"+
		"\u0001\u0000\u0000\u0000\u0909\u08cc\u0001\u0000\u0000\u0000\u0909\u08cf"+
		"\u0001\u0000\u0000\u0000\u0909\u08d5\u0001\u0000\u0000\u0000\u0909\u08dc"+
		"\u0001\u0000\u0000\u0000\u0909\u08e3\u0001\u0000\u0000\u0000\u090a\u0095"+
		"\u0001\u0000\u0000\u0000\u090b\u090c\u0005\u009a\u0000\u0000\u090c\u090d"+
		"\u0005\u0002\u0000\u0000\u090d\u090e\u0003\u0140\u00a0\u0000\u090e\u090f"+
		"\u0005\u0003\u0000\u0000\u090f\u0912\u0001\u0000\u0000\u0000\u0910\u0912"+
		"\u0003\u012a\u0095\u0000\u0911\u090b\u0001\u0000\u0000\u0000\u0911\u0910"+
		"\u0001\u0000\u0000\u0000\u0912\u0097\u0001\u0000\u0000\u0000\u0913\u0914"+
		"\u0005\u009a\u0000\u0000\u0914\u0915\u0005\u0002\u0000\u0000\u0915\u0916"+
		"\u0003\u0140\u00a0\u0000\u0916\u0917\u0005\u0003\u0000\u0000\u0917\u091b"+
		"\u0001\u0000\u0000\u0000\u0918\u091b\u0003\u01bc\u00de\u0000\u0919\u091b"+
		"\u0003\u01d0\u00e8\u0000\u091a\u0913\u0001\u0000\u0000\u0000\u091a\u0918"+
		"\u0001\u0000\u0000\u0000\u091a\u0919\u0001\u0000\u0000\u0000\u091b\u0099"+
		"\u0001\u0000\u0000\u0000\u091c\u091d\u0005\u00eb\u0000\u0000\u091d\u091e"+
		"\u0005#\u0000\u0000\u091e\u0923\u0003\u00a2Q\u0000\u091f\u0920\u0005\u0004"+
		"\u0000\u0000\u0920\u0922\u0003\u00a2Q\u0000\u0921\u091f\u0001\u0000\u0000"+
		"\u0000\u0922\u0925\u0001\u0000\u0000\u0000\u0923\u0921\u0001\u0000\u0000"+
		"\u0000\u0923\u0924\u0001\u0000\u0000\u0000\u0924\u0927\u0001\u0000\u0000"+
		"\u0000\u0925\u0923\u0001\u0000\u0000\u0000\u0926\u091c\u0001\u0000\u0000"+
		"\u0000\u0926\u0927\u0001\u0000\u0000\u0000\u0927\u0932\u0001\u0000\u0000"+
		"\u0000\u0928\u0929\u00052\u0000\u0000\u0929\u092a\u0005#\u0000\u0000\u092a"+
		"\u092f\u0003\u0140\u00a0\u0000\u092b\u092c\u0005\u0004\u0000\u0000\u092c"+
		"\u092e\u0003\u0140\u00a0\u0000\u092d\u092b\u0001\u0000\u0000\u0000\u092e"+
		"\u0931\u0001\u0000\u0000\u0000\u092f\u092d\u0001\u0000\u0000\u0000\u092f"+
		"\u0930\u0001\u0000\u0000\u0000\u0930\u0933\u0001\u0000\u0000\u0000\u0931"+
		"\u092f\u0001\u0000\u0000\u0000\u0932\u0928\u0001\u0000\u0000\u0000\u0932"+
		"\u0933\u0001\u0000\u0000\u0000\u0933\u093e\u0001\u0000\u0000\u0000\u0934"+
		"\u0935\u0005i\u0000\u0000\u0935\u0936\u0005#\u0000\u0000\u0936\u093b\u0003"+
		"\u0140\u00a0\u0000\u0937\u0938\u0005\u0004\u0000\u0000\u0938\u093a\u0003"+
		"\u0140\u00a0\u0000\u0939\u0937\u0001\u0000\u0000\u0000\u093a\u093d\u0001"+
		"\u0000\u0000\u0000\u093b\u0939\u0001\u0000\u0000\u0000\u093b\u093c\u0001"+
		"\u0000\u0000\u0000\u093c\u093f\u0001\u0000\u0000\u0000\u093d\u093b\u0001"+
		"\u0000\u0000\u0000\u093e\u0934\u0001\u0000\u0000\u0000\u093e\u093f\u0001"+
		"\u0000\u0000\u0000\u093f\u094a\u0001\u0000\u0000\u0000\u0940\u0941\u0005"+
		"\u0132\u0000\u0000\u0941\u0942\u0005#\u0000\u0000\u0942\u0947\u0003\u00a2"+
		"Q\u0000\u0943\u0944\u0005\u0004\u0000\u0000\u0944\u0946\u0003\u00a2Q\u0000"+
		"\u0945\u0943\u0001\u0000\u0000\u0000\u0946\u0949\u0001\u0000\u0000\u0000"+
		"\u0947\u0945\u0001\u0000\u0000\u0000\u0947\u0948\u0001\u0000\u0000\u0000"+
		"\u0948\u094b\u0001\u0000\u0000\u0000\u0949\u0947\u0001\u0000\u0000\u0000"+
		"\u094a\u0940\u0001\u0000\u0000\u0000\u094a\u094b\u0001\u0000\u0000\u0000"+
		"\u094b\u094d\u0001\u0000\u0000\u0000\u094c\u094e\u0003\u01ac\u00d6\u0000"+
		"\u094d\u094c\u0001\u0000\u0000\u0000\u094d\u094e\u0001\u0000\u0000\u0000"+
		"\u094e\u0954\u0001\u0000\u0000\u0000\u094f\u0952\u0005\u00bf\u0000\u0000"+
		"\u0950\u0953\u0005\f\u0000\u0000\u0951\u0953\u0003\u0140\u00a0\u0000\u0952"+
		"\u0950\u0001\u0000\u0000\u0000\u0952\u0951\u0001\u0000\u0000\u0000\u0953"+
		"\u0955\u0001\u0000\u0000\u0000\u0954\u094f\u0001\u0000\u0000\u0000\u0954"+
		"\u0955\u0001\u0000\u0000\u0000\u0955\u0958\u0001\u0000\u0000\u0000\u0956"+
		"\u0957\u0005\u00e5\u0000\u0000\u0957\u0959\u0003\u0140\u00a0\u0000\u0958"+
		"\u0956\u0001\u0000\u0000\u0000\u0958\u0959\u0001\u0000\u0000\u0000\u0959"+
		"\u009b\u0001\u0000\u0000\u0000\u095a\u095b\u0003b1\u0000\u095b\u095c\u0003"+
		"\u00a6S\u0000\u095c\u009d\u0001\u0000\u0000\u0000\u095d\u095e\u0006O\uffff"+
		"\uffff\u0000\u095e\u095f\u0003\u00a0P\u0000\u095f\u097a\u0001\u0000\u0000"+
		"\u0000\u0960\u0961\n\u0004\u0000\u0000\u0961\u0962\u0004O\u0001\u0000"+
		"\u0962\u0964\u0007\u000f\u0000\u0000\u0963\u0965\u0003\u00f6{\u0000\u0964"+
		"\u0963\u0001\u0000\u0000\u0000\u0964\u0965\u0001\u0000\u0000\u0000\u0965"+
		"\u0966\u0001\u0000\u0000\u0000\u0966\u0979\u0003\u009eO\u0005\u0967\u0968"+
		"\n\u0003\u0000\u0000\u0968\u0969\u0004O\u0003\u0000\u0969\u096b\u0005"+
		"\u00aa\u0000\u0000\u096a\u096c\u0003\u00f6{\u0000\u096b\u096a\u0001\u0000"+
		"\u0000\u0000\u096b\u096c\u0001\u0000\u0000\u0000\u096c\u096d\u0001\u0000"+
		"\u0000\u0000\u096d\u0979\u0003\u009eO\u0004\u096e\u096f\n\u0002\u0000"+
		"\u0000\u096f\u0970\u0004O\u0005\u0000\u0970\u0972\u0007\u0010\u0000\u0000"+
		"\u0971\u0973\u0003\u00f6{\u0000\u0972\u0971\u0001\u0000\u0000\u0000\u0972"+
		"\u0973\u0001\u0000\u0000\u0000\u0973\u0974\u0001\u0000\u0000\u0000\u0974"+
		"\u0979\u0003\u009eO\u0003\u0975\u0976\n\u0001\u0000\u0000\u0976\u0977"+
		"\u0005\u0197\u0000\u0000\u0977\u0979\u0003\u01d6\u00eb\u0000\u0978\u0960"+
		"\u0001\u0000\u0000\u0000\u0978\u0967\u0001\u0000\u0000\u0000\u0978\u096e"+
		"\u0001\u0000\u0000\u0000\u0978\u0975\u0001\u0000\u0000\u0000\u0979\u097c"+
		"\u0001\u0000\u0000\u0000\u097a\u0978\u0001\u0000\u0000\u0000\u097a\u097b"+
		"\u0001\u0000\u0000\u0000\u097b\u009f\u0001\u0000\u0000\u0000\u097c\u097a"+
		"\u0001\u0000\u0000\u0000\u097d\u0987\u0003\u00a8T\u0000\u097e\u0987\u0003"+
		"\u00a4R\u0000\u097f\u0980\u0005\u0144\u0000\u0000\u0980\u0987\u0003\u0096"+
		"K\u0000\u0981\u0987\u0003\u0116\u008b\u0000\u0982\u0983\u0005\u0002\u0000"+
		"\u0000\u0983\u0984\u0003`0\u0000\u0984\u0985\u0005\u0003\u0000\u0000\u0985"+
		"\u0987\u0001\u0000\u0000\u0000\u0986\u097d\u0001\u0000\u0000\u0000\u0986"+
		"\u097e\u0001\u0000\u0000\u0000\u0986\u097f\u0001\u0000\u0000\u0000\u0986"+
		"\u0981\u0001\u0000\u0000\u0000\u0986\u0982\u0001\u0000\u0000\u0000\u0987"+
		"\u00a1\u0001\u0000\u0000\u0000\u0988\u098a\u0003\u0140\u00a0\u0000\u0989"+
		"\u098b\u0007\u0011\u0000\u0000\u098a\u0989\u0001\u0000\u0000\u0000\u098a"+
		"\u098b\u0001\u0000\u0000\u0000\u098b\u098e\u0001\u0000\u0000\u0000\u098c"+
		"\u098d\u0005\u00e2\u0000\u0000\u098d\u098f\u0007\u0012\u0000\u0000\u098e"+
		"\u098c\u0001\u0000\u0000\u0000\u098e\u098f\u0001\u0000\u0000\u0000\u098f"+
		"\u00a3\u0001\u0000\u0000\u0000\u0990\u0994\u0003\u00cae\u0000\u0991\u0993"+
		"\u0003\u00a6S\u0000\u0992\u0991\u0001\u0000\u0000\u0000\u0993\u0996\u0001"+
		"\u0000\u0000\u0000\u0994\u0992\u0001\u0000\u0000\u0000\u0994\u0995\u0001"+
		"\u0000\u0000\u0000\u0995\u00a5\u0001\u0000\u0000\u0000\u0996\u0994\u0001"+
		"\u0000\u0000\u0000\u0997\u0999\u0003\u00aaU\u0000\u0998\u099a\u0003\u00c2"+
		"a\u0000\u0999\u0998\u0001\u0000\u0000\u0000\u0999\u099a\u0001\u0000\u0000"+
		"\u0000\u099a\u099b\u0001\u0000\u0000\u0000\u099b\u099c\u0003\u009aM\u0000"+
		"\u099c\u09b3\u0001\u0000\u0000\u0000\u099d\u09a1\u0003\u00acV\u0000\u099e"+
		"\u09a0\u0003\u00f4z\u0000\u099f\u099e\u0001\u0000\u0000\u0000\u09a0\u09a3"+
		"\u0001\u0000\u0000\u0000\u09a1\u099f\u0001\u0000\u0000\u0000\u09a1\u09a2"+
		"\u0001\u0000\u0000\u0000\u09a2\u09a5\u0001\u0000\u0000\u0000\u09a3\u09a1"+
		"\u0001\u0000\u0000\u0000\u09a4\u09a6\u0003\u00c2a\u0000\u09a5\u09a4\u0001"+
		"\u0000\u0000\u0000\u09a5\u09a6\u0001\u0000\u0000\u0000\u09a6\u09a8\u0001"+
		"\u0000\u0000\u0000\u09a7\u09a9\u0003\u00ceg\u0000\u09a8\u09a7\u0001\u0000"+
		"\u0000\u0000\u09a8\u09a9\u0001\u0000\u0000\u0000\u09a9\u09ab\u0001\u0000"+
		"\u0000\u0000\u09aa\u09ac\u0003\u00c4b\u0000\u09ab\u09aa\u0001\u0000\u0000"+
		"\u0000\u09ab\u09ac\u0001\u0000\u0000\u0000\u09ac\u09ae\u0001\u0000\u0000"+
		"\u0000\u09ad\u09af\u0003\u01ac\u00d6\u0000\u09ae\u09ad\u0001\u0000\u0000"+
		"\u0000\u09ae\u09af\u0001\u0000\u0000\u0000\u09af\u09b0\u0001\u0000\u0000"+
		"\u0000\u09b0\u09b1\u0003\u009aM\u0000\u09b1\u09b3\u0001\u0000\u0000\u0000"+
		"\u09b2\u0997\u0001\u0000\u0000\u0000\u09b2\u099d\u0001\u0000\u0000\u0000"+
		"\u09b3\u00a7\u0001\u0000\u0000\u0000\u09b4\u09b6\u0003\u00aaU\u0000\u09b5"+
		"\u09b7\u0003\u00cae\u0000\u09b6\u09b5\u0001\u0000\u0000\u0000\u09b6\u09b7"+
		"\u0001\u0000\u0000\u0000\u09b7\u09bb\u0001\u0000\u0000\u0000\u09b8\u09ba"+
		"\u0003\u00f4z\u0000\u09b9\u09b8\u0001\u0000\u0000\u0000\u09ba\u09bd\u0001"+
		"\u0000\u0000\u0000\u09bb\u09b9\u0001\u0000\u0000\u0000\u09bb\u09bc\u0001"+
		"\u0000\u0000\u0000\u09bc\u09bf\u0001\u0000\u0000\u0000\u09bd\u09bb\u0001"+
		"\u0000\u0000\u0000\u09be\u09c0\u0003\u00c2a\u0000\u09bf\u09be\u0001\u0000"+
		"\u0000\u0000\u09bf\u09c0\u0001\u0000\u0000\u0000\u09c0\u09c2\u0001\u0000"+
		"\u0000\u0000\u09c1\u09c3\u0003\u00ceg\u0000\u09c2\u09c1\u0001\u0000\u0000"+
		"\u0000\u09c2\u09c3\u0001\u0000\u0000\u0000\u09c3\u09c5\u0001\u0000\u0000"+
		"\u0000\u09c4\u09c6\u0003\u00c4b\u0000\u09c5\u09c4\u0001\u0000\u0000\u0000"+
		"\u09c5\u09c6\u0001\u0000\u0000\u0000\u09c6\u09c8\u0001\u0000\u0000\u0000"+
		"\u09c7\u09c9\u0003\u01ac\u00d6\u0000\u09c8\u09c7\u0001\u0000\u0000\u0000"+
		"\u09c8\u09c9\u0001\u0000\u0000\u0000\u09c9\u09e1\u0001\u0000\u0000\u0000"+
		"\u09ca\u09cc\u0003\u00acV\u0000\u09cb\u09cd\u0003\u00cae\u0000\u09cc\u09cb"+
		"\u0001\u0000\u0000\u0000\u09cc\u09cd\u0001\u0000\u0000\u0000\u09cd\u09d1"+
		"\u0001\u0000\u0000\u0000\u09ce\u09d0\u0003\u00f4z\u0000\u09cf\u09ce\u0001"+
		"\u0000\u0000\u0000\u09d0\u09d3\u0001\u0000\u0000\u0000\u09d1\u09cf\u0001"+
		"\u0000\u0000\u0000\u09d1\u09d2\u0001\u0000\u0000\u0000\u09d2\u09d5\u0001"+
		"\u0000\u0000\u0000\u09d3\u09d1\u0001\u0000\u0000\u0000\u09d4\u09d6\u0003"+
		"\u00c2a\u0000\u09d5\u09d4\u0001\u0000\u0000\u0000\u09d5\u09d6\u0001\u0000"+
		"\u0000\u0000\u09d6\u09d8\u0001\u0000\u0000\u0000\u09d7\u09d9\u0003\u00ce"+
		"g\u0000\u09d8\u09d7\u0001\u0000\u0000\u0000\u09d8\u09d9\u0001\u0000\u0000"+
		"\u0000\u09d9\u09db\u0001\u0000\u0000\u0000\u09da\u09dc\u0003\u00c4b\u0000"+
		"\u09db\u09da\u0001\u0000\u0000\u0000\u09db\u09dc\u0001\u0000\u0000\u0000"+
		"\u09dc\u09de\u0001\u0000\u0000\u0000\u09dd\u09df\u0003\u01ac\u00d6\u0000"+
		"\u09de\u09dd\u0001\u0000\u0000\u0000\u09de\u09df\u0001\u0000\u0000\u0000"+
		"\u09df\u09e1\u0001\u0000\u0000\u0000\u09e0\u09b4\u0001\u0000\u0000\u0000"+
		"\u09e0\u09ca\u0001\u0000\u0000\u0000\u09e1\u00a9\u0001\u0000\u0000\u0000"+
		"\u09e2\u09e3\u0005\u0123\u0000\u0000\u09e3\u09e4\u0005\u015a\u0000\u0000"+
		"\u09e4\u09e6\u0005\u0002\u0000\u0000\u09e5\u09e7\u0003\u00f6{\u0000\u09e6"+
		"\u09e5\u0001\u0000\u0000\u0000\u09e6\u09e7\u0001\u0000\u0000\u0000\u09e7"+
		"\u09e8\u0001\u0000\u0000\u0000\u09e8\u09e9\u0003\u0146\u00a3\u0000\u09e9"+
		"\u09ea\u0005\u0003\u0000\u0000\u09ea\u09f6\u0001\u0000\u0000\u0000\u09eb"+
		"\u09ed\u0005\u00cb\u0000\u0000\u09ec\u09ee\u0003\u00f6{\u0000\u09ed\u09ec"+
		"\u0001\u0000\u0000\u0000\u09ed\u09ee\u0001\u0000\u0000\u0000\u09ee\u09ef"+
		"\u0001\u0000\u0000\u0000\u09ef\u09f6\u0003\u0146\u00a3\u0000\u09f0\u09f2"+
		"\u0005\u0108\u0000\u0000\u09f1\u09f3\u0003\u00f6{\u0000\u09f2\u09f1\u0001"+
		"\u0000\u0000\u0000\u09f2\u09f3\u0001\u0000\u0000\u0000\u09f3\u09f4\u0001"+
		"\u0000\u0000\u0000\u09f4\u09f6\u0003\u0146\u00a3\u0000\u09f5\u09e2\u0001"+
		"\u0000\u0000\u0000\u09f5\u09eb\u0001\u0000\u0000\u0000\u09f5\u09f0\u0001"+
		"\u0000\u0000\u0000\u09f6\u09f8\u0001\u0000\u0000\u0000\u09f7\u09f9\u0003"+
		"\u0126\u0093\u0000\u09f8\u09f7\u0001\u0000\u0000\u0000\u09f8\u09f9\u0001"+
		"\u0000\u0000\u0000\u09f9\u09fc\u0001\u0000\u0000\u0000\u09fa\u09fb\u0005"+
		"\u0105\u0000\u0000\u09fb\u09fd\u0003\u01d0\u00e8\u0000\u09fc\u09fa\u0001"+
		"\u0000\u0000\u0000\u09fc\u09fd\u0001\u0000\u0000\u0000\u09fd\u09fe\u0001"+
		"\u0000\u0000\u0000\u09fe\u09ff\u0005\u016d\u0000\u0000\u09ff\u0a0c\u0003"+
		"\u01d0\u00e8\u0000\u0a00\u0a0a\u0005\u0016\u0000\u0000\u0a01\u0a0b\u0003"+
		"\u0108\u0084\u0000\u0a02\u0a0b\u0003\u0186\u00c3\u0000\u0a03\u0a06\u0005"+
		"\u0002\u0000\u0000\u0a04\u0a07\u0003\u0108\u0084\u0000\u0a05\u0a07\u0003"+
		"\u0186\u00c3\u0000\u0a06\u0a04\u0001\u0000\u0000\u0000\u0a06\u0a05\u0001"+
		"\u0000\u0000\u0000\u0a07\u0a08\u0001\u0000\u0000\u0000\u0a08\u0a09\u0005"+
		"\u0003\u0000\u0000\u0a09\u0a0b\u0001\u0000\u0000\u0000\u0a0a\u0a01\u0001"+
		"\u0000\u0000\u0000\u0a0a\u0a02\u0001\u0000\u0000\u0000\u0a0a\u0a03\u0001"+
		"\u0000\u0000\u0000\u0a0b\u0a0d\u0001\u0000\u0000\u0000\u0a0c\u0a00\u0001"+
		"\u0000\u0000\u0000\u0a0c\u0a0d\u0001\u0000\u0000\u0000\u0a0d\u0a0f\u0001"+
		"\u0000\u0000\u0000\u0a0e\u0a10\u0003\u0126\u0093\u0000\u0a0f\u0a0e\u0001"+
		"\u0000\u0000\u0000\u0a0f\u0a10\u0001\u0000\u0000\u0000\u0a10\u0a13\u0001"+
		"\u0000\u0000\u0000\u0a11\u0a12\u0005\u0104\u0000\u0000\u0a12\u0a14\u0003"+
		"\u01d0\u00e8\u0000\u0a13\u0a11\u0001\u0000\u0000\u0000\u0a13\u0a14\u0001"+
		"\u0000\u0000\u0000\u0a14\u00ab\u0001\u0000\u0000\u0000\u0a15\u0a19\u0005"+
		"\u0123\u0000\u0000\u0a16\u0a18\u0003\u00c6c\u0000\u0a17\u0a16\u0001\u0000"+
		"\u0000\u0000\u0a18\u0a1b\u0001\u0000\u0000\u0000\u0a19\u0a17\u0001\u0000"+
		"\u0000\u0000\u0a19\u0a1a\u0001\u0000\u0000\u0000\u0a1a\u0a1d\u0001\u0000"+
		"\u0000\u0000\u0a1b\u0a19\u0001\u0000\u0000\u0000\u0a1c\u0a1e\u0003\u00f6"+
		"{\u0000\u0a1d\u0a1c\u0001\u0000\u0000\u0000\u0a1d\u0a1e\u0001\u0000\u0000"+
		"\u0000\u0a1e\u0a1f\u0001\u0000\u0000\u0000\u0a1f\u0a20\u0003\u0136\u009b"+
		"\u0000\u0a20\u00ad\u0001\u0000\u0000\u0000\u0a21\u0a22\u0005\u0129\u0000"+
		"\u0000\u0a22\u0a23\u0003\u00be_\u0000\u0a23\u00af\u0001\u0000\u0000\u0000"+
		"\u0a24\u0a25\u0005\u017a\u0000\u0000\u0a25\u0a28\u0005\u00cc\u0000\u0000"+
		"\u0a26\u0a27\u0005\u0010\u0000\u0000\u0a27\u0a29\u0003\u0148\u00a4\u0000"+
		"\u0a28\u0a26\u0001\u0000\u0000\u0000\u0a28\u0a29\u0001\u0000\u0000\u0000"+
		"\u0a29\u0a2a\u0001\u0000\u0000\u0000\u0a2a\u0a2b\u0005\u014b\u0000\u0000"+
		"\u0a2b\u0a2c\u0003\u00b6[\u0000\u0a2c\u00b1\u0001\u0000\u0000\u0000\u0a2d"+
		"\u0a2e\u0005\u017a\u0000\u0000\u0a2e\u0a2f\u0003\u014c\u00a6\u0000\u0a2f"+
		"\u0a32\u0005\u00cc\u0000\u0000\u0a30\u0a31\u0005#\u0000\u0000\u0a31\u0a33"+
		"\u0005\u0147\u0000\u0000\u0a32\u0a30\u0001\u0000\u0000\u0000\u0a32\u0a33"+
		"\u0001\u0000\u0000\u0000\u0a33\u0a36\u0001\u0000\u0000\u0000\u0a34\u0a35"+
		"\u0005\u0010\u0000\u0000\u0a35\u0a37\u0003\u0148\u00a4\u0000\u0a36\u0a34"+
		"\u0001\u0000\u0000\u0000\u0a36\u0a37\u0001\u0000\u0000\u0000\u0a37\u0a38"+
		"\u0001\u0000\u0000\u0000\u0a38\u0a39\u0005\u014b\u0000\u0000\u0a39\u0a3a"+
		"\u0003\u00b8\\\u0000\u0a3a\u00b3\u0001\u0000\u0000\u0000\u0a3b\u0a3c\u0005"+
		"\u017a\u0000\u0000\u0a3c\u0a3d\u0003\u014c\u00a6\u0000\u0a3d\u0a3e\u0005"+
		"\u00cc\u0000\u0000\u0a3e\u0a3f\u0005#\u0000\u0000\u0a3f\u0a42\u0005\u0134"+
		"\u0000\u0000\u0a40\u0a41\u0005\u0010\u0000\u0000\u0a41\u0a43\u0003\u0148"+
		"\u00a4\u0000\u0a42\u0a40\u0001\u0000\u0000\u0000\u0a42\u0a43\u0001\u0000"+
		"\u0000\u0000\u0a43\u0a44\u0001\u0000\u0000\u0000\u0a44\u0a45\u0005\u014b"+
		"\u0000\u0000\u0a45\u0a46\u0003\u00ba]\u0000\u0a46\u00b5\u0001\u0000\u0000"+
		"\u0000\u0a47\u0a4f\u0005`\u0000\u0000\u0a48\u0a49\u0005\u016a\u0000\u0000"+
		"\u0a49\u0a4a\u0005\u0129\u0000\u0000\u0a4a\u0a4f\u0005\u0190\u0000\u0000"+
		"\u0a4b\u0a4c\u0005\u016a\u0000\u0000\u0a4c\u0a4d\u0005\u0129\u0000\u0000"+
		"\u0a4d\u0a4f\u0003\u00be_\u0000\u0a4e\u0a47\u0001\u0000\u0000\u0000\u0a4e"+
		"\u0a48\u0001\u0000\u0000\u0000\u0a4e\u0a4b\u0001\u0000\u0000\u0000\u0a4f"+
		"\u00b7\u0001\u0000\u0000\u0000\u0a50\u0a51\u0005\u00a9\u0000\u0000\u0a51"+
		"\u0a63\u0005\u0190\u0000\u0000\u0a52\u0a53\u0005\u00a9\u0000\u0000\u0a53"+
		"\u0a54\u0005\u0002\u0000\u0000\u0a54\u0a55\u0003\u0128\u0094\u0000\u0a55"+
		"\u0a56\u0005\u0003\u0000\u0000\u0a56\u0a57\u0005\u016f\u0000\u0000\u0a57"+
		"\u0a58\u0005\u0002\u0000\u0000\u0a58\u0a5d\u0003\u0140\u00a0\u0000\u0a59"+
		"\u0a5a\u0005\u0004\u0000\u0000\u0a5a\u0a5c\u0003\u0140\u00a0\u0000\u0a5b"+
		"\u0a59\u0001\u0000\u0000\u0000\u0a5c\u0a5f\u0001\u0000\u0000\u0000\u0a5d"+
		"\u0a5b\u0001\u0000\u0000\u0000\u0a5d\u0a5e\u0001\u0000\u0000\u0000\u0a5e"+
		"\u0a60\u0001\u0000\u0000\u0000\u0a5f\u0a5d\u0001\u0000\u0000\u0000\u0a60"+
		"\u0a61\u0005\u0003\u0000\u0000\u0a61\u0a63\u0001\u0000\u0000\u0000\u0a62"+
		"\u0a50\u0001\u0000\u0000\u0000\u0a62\u0a52\u0001\u0000\u0000\u0000\u0a63"+
		"\u00b9\u0001\u0000\u0000\u0000\u0a64\u0a69\u0005`\u0000\u0000\u0a65\u0a66"+
		"\u0005\u016a\u0000\u0000\u0a66\u0a67\u0005\u0129\u0000\u0000\u0a67\u0a69"+
		"\u0003\u00be_\u0000\u0a68\u0a64\u0001\u0000\u0000\u0000\u0a68\u0a65\u0001"+
		"\u0000\u0000\u0000\u0a69\u00bb\u0001\u0000\u0000\u0000\u0a6a\u0a6b\u0005"+
		"t\u0000\u0000\u0a6b\u0a6c\u0005\u0002\u0000\u0000\u0a6c\u0a6d\u0003\u0128"+
		"\u0094\u0000\u0a6d\u0a6e\u0005\u0003\u0000\u0000\u0a6e\u00bd\u0001\u0000"+
		"\u0000\u0000\u0a6f\u0a74\u0003\u00c0`\u0000\u0a70\u0a71\u0005\u0004\u0000"+
		"\u0000\u0a71\u0a73\u0003\u00c0`\u0000\u0a72\u0a70\u0001\u0000\u0000\u0000"+
		"\u0a73\u0a76\u0001\u0000\u0000\u0000\u0a74\u0a72\u0001\u0000\u0000\u0000"+
		"\u0a74\u0a75\u0001\u0000\u0000\u0000\u0a75\u00bf\u0001\u0000\u0000\u0000"+
		"\u0a76\u0a74\u0001\u0000\u0000\u0000\u0a77\u0a78\u0003\u012a\u0095\u0000"+
		"\u0a78\u0a79\u0005\u0183\u0000\u0000\u0a79\u0a7a\u0003\u0140\u00a0\u0000"+
		"\u0a7a\u00c1\u0001\u0000\u0000\u0000\u0a7b\u0a7c\u0005\u017b\u0000\u0000"+
		"\u0a7c\u0a7d\u0003\u0148\u00a4\u0000\u0a7d\u00c3\u0001\u0000\u0000\u0000"+
		"\u0a7e\u0a7f\u0005\u0096\u0000\u0000\u0a7f\u0a80\u0003\u0148\u00a4\u0000"+
		"\u0a80\u00c5\u0001\u0000\u0000\u0000\u0a81\u0a82\u0005\u019d\u0000\u0000"+
		"\u0a82\u0a89\u0003\u00c8d\u0000\u0a83\u0a85\u0005\u0004\u0000\u0000\u0a84"+
		"\u0a83\u0001\u0000\u0000\u0000\u0a84\u0a85\u0001\u0000\u0000\u0000\u0a85"+
		"\u0a86\u0001\u0000\u0000\u0000\u0a86\u0a88\u0003\u00c8d\u0000\u0a87\u0a84"+
		"\u0001\u0000\u0000\u0000\u0a88\u0a8b\u0001\u0000\u0000\u0000\u0a89\u0a87"+
		"\u0001\u0000\u0000\u0000\u0a89\u0a8a\u0001\u0000\u0000\u0000\u0a8a\u0a8c"+
		"\u0001\u0000\u0000\u0000\u0a8b\u0a89\u0001\u0000\u0000\u0000\u0a8c\u0a8d"+
		"\u0005\u019e\u0000\u0000\u0a8d\u00c7\u0001\u0000\u0000\u0000\u0a8e\u0a9c"+
		"\u0003\u01c0\u00e0\u0000\u0a8f\u0a90\u0003\u01c0\u00e0\u0000\u0a90\u0a91"+
		"\u0005\u0002\u0000\u0000\u0a91\u0a96\u0003\u0154\u00aa\u0000\u0a92\u0a93"+
		"\u0005\u0004\u0000\u0000\u0a93\u0a95\u0003\u0154\u00aa\u0000\u0a94\u0a92"+
		"\u0001\u0000\u0000\u0000\u0a95\u0a98\u0001\u0000\u0000\u0000\u0a96\u0a94"+
		"\u0001\u0000\u0000\u0000\u0a96\u0a97\u0001\u0000\u0000\u0000\u0a97\u0a99"+
		"\u0001\u0000\u0000\u0000\u0a98\u0a96\u0001\u0000\u0000\u0000\u0a99\u0a9a"+
		"\u0005\u0003\u0000\u0000\u0a9a\u0a9c\u0001\u0000\u0000\u0000\u0a9b\u0a8e"+
		"\u0001\u0000\u0000\u0000\u0a9b\u0a8f\u0001\u0000\u0000\u0000\u0a9c\u00c9"+
		"\u0001\u0000\u0000\u0000\u0a9d\u0a9e\u0005\u008c\u0000\u0000\u0a9e\u0aa3"+
		"\u0003\u00f8|\u0000\u0a9f\u0aa0\u0005\u0004\u0000\u0000\u0aa0\u0aa2\u0003"+
		"\u00f8|\u0000\u0aa1\u0a9f\u0001\u0000\u0000\u0000\u0aa2\u0aa5\u0001\u0000"+
		"\u0000\u0000\u0aa3\u0aa1\u0001\u0000\u0000\u0000\u0aa3\u0aa4\u0001\u0000"+
		"\u0000\u0000\u0aa4\u0aa9\u0001\u0000\u0000\u0000\u0aa5\u0aa3\u0001\u0000"+
		"\u0000\u0000\u0aa6\u0aa8\u0003\u00f4z\u0000\u0aa7\u0aa6\u0001\u0000\u0000"+
		"\u0000\u0aa8\u0aab\u0001\u0000\u0000\u0000\u0aa9\u0aa7\u0001\u0000\u0000"+
		"\u0000\u0aa9\u0aaa\u0001\u0000\u0000\u0000\u0aaa\u0aad\u0001\u0000\u0000"+
		"\u0000\u0aab\u0aa9\u0001\u0000\u0000\u0000\u0aac\u0aae\u0003\u00d8l\u0000"+
		"\u0aad\u0aac\u0001\u0000\u0000\u0000\u0aad\u0aae\u0001\u0000\u0000\u0000"+
		"\u0aae\u0ab0\u0001\u0000\u0000\u0000\u0aaf\u0ab1\u0003\u00deo\u0000\u0ab0"+
		"\u0aaf\u0001\u0000\u0000\u0000\u0ab0\u0ab1\u0001\u0000\u0000\u0000\u0ab1"+
		"\u00cb\u0001\u0000\u0000\u0000\u0ab2\u0ab4\u0005\u0087\u0000\u0000\u0ab3"+
		"\u0ab2\u0001\u0000\u0000\u0000\u0ab3\u0ab4\u0001\u0000\u0000\u0000\u0ab4"+
		"\u0ab5\u0001\u0000\u0000\u0000\u0ab5\u0ab6\u0007\u0013\u0000\u0000\u0ab6"+
		"\u0ab7\u0005\u0016\u0000\u0000\u0ab7\u0ab8\u0005\u00e4\u0000\u0000\u0ab8"+
		"\u0ac1\u0003\u01d4\u00ea\u0000\u0ab9\u0abb\u0005\u0087\u0000\u0000\u0aba"+
		"\u0ab9\u0001\u0000\u0000\u0000\u0aba\u0abb\u0001\u0000\u0000\u0000\u0abb"+
		"\u0abc\u0001\u0000\u0000\u0000\u0abc\u0abd\u0007\u0014\u0000\u0000\u0abd"+
		"\u0abe\u0005\u0016\u0000\u0000\u0abe\u0abf\u0005\u00e4\u0000\u0000\u0abf"+
		"\u0ac1\u0003\u014e\u00a7\u0000\u0ac0\u0ab3\u0001\u0000\u0000\u0000\u0ac0"+
		"\u0aba\u0001\u0000\u0000\u0000\u0ac1\u00cd\u0001\u0000\u0000\u0000\u0ac2"+
		"\u0ac3\u0005\u0093\u0000\u0000\u0ac3\u0ac4\u0005#\u0000\u0000\u0ac4\u0ac9"+
		"\u0003\u00d0h\u0000\u0ac5\u0ac6\u0005\u0004\u0000\u0000\u0ac6\u0ac8\u0003"+
		"\u00d0h\u0000\u0ac7\u0ac5\u0001\u0000\u0000\u0000\u0ac8\u0acb\u0001\u0000"+
		"\u0000\u0000\u0ac9\u0ac7\u0001\u0000\u0000\u0000\u0ac9\u0aca\u0001\u0000"+
		"\u0000\u0000\u0aca\u0aea\u0001\u0000\u0000\u0000\u0acb\u0ac9\u0001\u0000"+
		"\u0000\u0000\u0acc\u0acd\u0005\u0093\u0000\u0000\u0acd\u0ace\u0005#\u0000"+
		"\u0000\u0ace\u0ad3\u0003\u0134\u009a\u0000\u0acf\u0ad0\u0005\u0004\u0000"+
		"\u0000\u0ad0\u0ad2\u0003\u0134\u009a\u0000\u0ad1\u0acf\u0001\u0000\u0000"+
		"\u0000\u0ad2\u0ad5\u0001\u0000\u0000\u0000\u0ad3\u0ad1\u0001\u0000\u0000"+
		"\u0000\u0ad3\u0ad4\u0001\u0000\u0000\u0000\u0ad4\u0ae7\u0001\u0000\u0000"+
		"\u0000\u0ad5\u0ad3\u0001\u0000\u0000\u0000\u0ad6\u0ad7\u0005\u017e\u0000"+
		"\u0000\u0ad7\u0ae8\u0005\u011b\u0000\u0000\u0ad8\u0ad9\u0005\u017e\u0000"+
		"\u0000\u0ad9\u0ae8\u0005H\u0000\u0000\u0ada\u0adb\u0005\u0094\u0000\u0000"+
		"\u0adb\u0adc\u0005\u012b\u0000\u0000\u0adc\u0add\u0005\u0002\u0000\u0000"+
		"\u0add\u0ae2\u0003\u00d6k\u0000\u0ade\u0adf\u0005\u0004\u0000\u0000\u0adf"+
		"\u0ae1\u0003\u00d6k\u0000\u0ae0\u0ade\u0001\u0000\u0000\u0000\u0ae1\u0ae4"+
		"\u0001\u0000\u0000\u0000\u0ae2\u0ae0\u0001\u0000\u0000\u0000\u0ae2\u0ae3"+
		"\u0001\u0000\u0000\u0000\u0ae3\u0ae5\u0001\u0000\u0000\u0000\u0ae4\u0ae2"+
		"\u0001\u0000\u0000\u0000\u0ae5\u0ae6\u0005\u0003\u0000\u0000\u0ae6\u0ae8"+
		"\u0001\u0000\u0000\u0000\u0ae7\u0ad6\u0001\u0000\u0000\u0000\u0ae7\u0ad8"+
		"\u0001\u0000\u0000\u0000\u0ae7\u0ada\u0001\u0000\u0000\u0000\u0ae7\u0ae8"+
		"\u0001\u0000\u0000\u0000\u0ae8\u0aea\u0001\u0000\u0000\u0000\u0ae9\u0ac2"+
		"\u0001\u0000\u0000\u0000\u0ae9\u0acc\u0001\u0000\u0000\u0000\u0aea\u00cf"+
		"\u0001\u0000\u0000\u0000\u0aeb\u0aee\u0003\u00d2i\u0000\u0aec\u0aee\u0003"+
		"\u0140\u00a0\u0000\u0aed\u0aeb\u0001\u0000\u0000\u0000\u0aed\u0aec\u0001"+
		"\u0000\u0000\u0000\u0aee\u00d1\u0001\u0000\u0000\u0000\u0aef\u0af0\u0007"+
		"\u0015\u0000\u0000\u0af0\u0af1\u0005\u0002\u0000\u0000\u0af1\u0af6\u0003"+
		"\u00d6k\u0000\u0af2\u0af3\u0005\u0004\u0000\u0000\u0af3\u0af5\u0003\u00d6"+
		"k\u0000\u0af4\u0af2\u0001\u0000\u0000\u0000\u0af5\u0af8\u0001\u0000\u0000"+
		"\u0000\u0af6\u0af4\u0001\u0000\u0000\u0000\u0af6\u0af7\u0001\u0000\u0000"+
		"\u0000\u0af7\u0af9\u0001\u0000\u0000\u0000\u0af8\u0af6\u0001\u0000\u0000"+
		"\u0000\u0af9\u0afa\u0005\u0003\u0000\u0000\u0afa\u0b09\u0001\u0000\u0000"+
		"\u0000\u0afb\u0afc\u0005\u0094\u0000\u0000\u0afc\u0afd\u0005\u012b\u0000"+
		"\u0000\u0afd\u0afe\u0005\u0002\u0000\u0000\u0afe\u0b03\u0003\u00d4j\u0000"+
		"\u0aff\u0b00\u0005\u0004\u0000\u0000\u0b00\u0b02\u0003\u00d4j\u0000\u0b01"+
		"\u0aff\u0001\u0000\u0000\u0000\u0b02\u0b05\u0001\u0000\u0000\u0000\u0b03"+
		"\u0b01\u0001\u0000\u0000\u0000\u0b03\u0b04\u0001\u0000\u0000\u0000\u0b04"+
		"\u0b06\u0001\u0000\u0000\u0000\u0b05\u0b03\u0001\u0000\u0000\u0000\u0b06"+
		"\u0b07\u0005\u0003\u0000\u0000\u0b07\u0b09\u0001\u0000\u0000\u0000\u0b08"+
		"\u0aef\u0001\u0000\u0000\u0000\u0b08\u0afb\u0001\u0000\u0000\u0000\u0b09"+
		"\u00d3\u0001\u0000\u0000\u0000\u0b0a\u0b0d\u0003\u00d2i\u0000\u0b0b\u0b0d"+
		"\u0003\u00d6k\u0000\u0b0c\u0b0a\u0001\u0000\u0000\u0000\u0b0c\u0b0b\u0001"+
		"\u0000\u0000\u0000\u0b0d\u00d5\u0001\u0000\u0000\u0000\u0b0e\u0b17\u0005"+
		"\u0002\u0000\u0000\u0b0f\u0b14\u0003\u0140\u00a0\u0000\u0b10\u0b11\u0005"+
		"\u0004\u0000\u0000\u0b11\u0b13\u0003\u0140\u00a0\u0000\u0b12\u0b10\u0001"+
		"\u0000\u0000\u0000\u0b13\u0b16\u0001\u0000\u0000\u0000\u0b14\u0b12\u0001"+
		"\u0000\u0000\u0000\u0b14\u0b15\u0001\u0000\u0000\u0000\u0b15\u0b18\u0001"+
		"\u0000\u0000\u0000\u0b16\u0b14\u0001\u0000\u0000\u0000\u0b17\u0b0f\u0001"+
		"\u0000\u0000\u0000\u0b17\u0b18\u0001\u0000\u0000\u0000\u0b18\u0b19\u0001"+
		"\u0000\u0000\u0000\u0b19\u0b1c\u0005\u0003\u0000\u0000\u0b1a\u0b1c\u0003"+
		"\u0140\u00a0\u0000\u0b1b\u0b0e\u0001\u0000\u0000\u0000\u0b1b\u0b1a\u0001"+
		"\u0000\u0000\u0000\u0b1c\u00d7\u0001\u0000\u0000\u0000\u0b1d\u0b1e\u0005"+
		"\u00f7\u0000\u0000\u0b1e\u0b1f\u0005\u0002\u0000\u0000\u0b1f\u0b20\u0003"+
		"\u0136\u009b\u0000\u0b20\u0b21\u0005\u0087\u0000\u0000\u0b21\u0b22\u0003"+
		"\u00dam\u0000\u0b22\u0b23\u0005\u00a0\u0000\u0000\u0b23\u0b24\u0005\u0002"+
		"\u0000\u0000\u0b24\u0b29\u0003\u00dcn\u0000\u0b25\u0b26\u0005\u0004\u0000"+
		"\u0000\u0b26\u0b28\u0003\u00dcn\u0000\u0b27\u0b25\u0001\u0000\u0000\u0000"+
		"\u0b28\u0b2b\u0001\u0000\u0000\u0000\u0b29\u0b27\u0001\u0000\u0000\u0000"+
		"\u0b29\u0b2a\u0001\u0000\u0000\u0000\u0b2a\u0b2c\u0001\u0000\u0000\u0000"+
		"\u0b2b\u0b29\u0001\u0000\u0000\u0000\u0b2c\u0b2d\u0005\u0003\u0000\u0000"+
		"\u0b2d\u0b2e\u0005\u0003\u0000\u0000\u0b2e\u00d9\u0001\u0000\u0000\u0000"+
		"\u0b2f\u0b3c\u0003\u01bc\u00de\u0000\u0b30\u0b31\u0005\u0002\u0000\u0000"+
		"\u0b31\u0b36\u0003\u01bc\u00de\u0000\u0b32\u0b33\u0005\u0004\u0000\u0000"+
		"\u0b33\u0b35\u0003\u01bc\u00de\u0000\u0b34\u0b32\u0001\u0000\u0000\u0000"+
		"\u0b35\u0b38\u0001\u0000\u0000\u0000\u0b36\u0b34\u0001\u0000\u0000\u0000"+
		"\u0b36\u0b37\u0001\u0000\u0000\u0000\u0b37\u0b39\u0001\u0000\u0000\u0000"+
		"\u0b38\u0b36\u0001\u0000\u0000\u0000\u0b39\u0b3a\u0005\u0003\u0000\u0000"+
		"\u0b3a\u0b3c\u0001\u0000\u0000\u0000\u0b3b\u0b2f\u0001\u0000\u0000\u0000"+
		"\u0b3b\u0b30\u0001\u0000\u0000\u0000\u0b3c\u00db\u0001\u0000\u0000\u0000"+
		"\u0b3d\u0b42\u0003\u0140\u00a0\u0000\u0b3e\u0b40\u0005\u0016\u0000\u0000"+
		"\u0b3f\u0b3e\u0001\u0000\u0000\u0000\u0b3f\u0b40\u0001\u0000\u0000\u0000"+
		"\u0b40\u0b41\u0001\u0000\u0000\u0000\u0b41\u0b43\u0003\u01bc\u00de\u0000"+
		"\u0b42\u0b3f\u0001\u0000\u0000\u0000\u0b42\u0b43\u0001\u0000\u0000\u0000"+
		"\u0b43\u00dd\u0001\u0000\u0000\u0000\u0b44\u0b46\u0005\u0167\u0000\u0000"+
		"\u0b45\u0b47\u0003\u00e0p\u0000\u0b46\u0b45\u0001\u0000\u0000\u0000\u0b46"+
		"\u0b47\u0001\u0000\u0000\u0000\u0b47\u0b48\u0001\u0000\u0000\u0000\u0b48"+
		"\u0b49\u0005\u0002\u0000\u0000\u0b49\u0b4a\u0003\u00e2q\u0000\u0b4a\u0b4f"+
		"\u0005\u0003\u0000\u0000\u0b4b\u0b4d\u0005\u0016\u0000\u0000\u0b4c\u0b4b"+
		"\u0001\u0000\u0000\u0000\u0b4c\u0b4d\u0001\u0000\u0000\u0000\u0b4d\u0b4e"+
		"\u0001\u0000\u0000\u0000\u0b4e\u0b50\u0003\u01bc\u00de\u0000\u0b4f\u0b4c"+
		"\u0001\u0000\u0000\u0000\u0b4f\u0b50\u0001\u0000\u0000\u0000\u0b50\u00df"+
		"\u0001\u0000\u0000\u0000\u0b51\u0b52\u0007\u0016\u0000\u0000\u0b52\u0b53"+
		"\u0005\u00e2\u0000\u0000\u0b53\u00e1\u0001\u0000\u0000\u0000\u0b54\u0b57"+
		"\u0003\u00e4r\u0000\u0b55\u0b57\u0003\u00e6s\u0000\u0b56\u0b54\u0001\u0000"+
		"\u0000\u0000\u0b56\u0b55\u0001\u0000\u0000\u0000\u0b57\u00e3\u0001\u0000"+
		"\u0000\u0000\u0b58\u0b59\u0003\u00eau\u0000\u0b59\u0b5a\u0005\u0087\u0000"+
		"\u0000\u0b5a\u0b5b\u0003\u00ecv\u0000\u0b5b\u0b5c\u0005\u00a0\u0000\u0000"+
		"\u0b5c\u0b5d\u0005\u0002\u0000\u0000\u0b5d\u0b62\u0003\u00eew\u0000\u0b5e"+
		"\u0b5f\u0005\u0004\u0000\u0000\u0b5f\u0b61\u0003\u00eew\u0000\u0b60\u0b5e"+
		"\u0001\u0000\u0000\u0000\u0b61\u0b64\u0001\u0000\u0000\u0000\u0b62\u0b60"+
		"\u0001\u0000\u0000\u0000\u0b62\u0b63\u0001\u0000\u0000\u0000\u0b63\u0b65"+
		"\u0001\u0000\u0000\u0000\u0b64\u0b62\u0001\u0000\u0000\u0000\u0b65\u0b66"+
		"\u0005\u0003\u0000\u0000\u0b66\u00e5\u0001\u0000\u0000\u0000\u0b67\u0b68"+
		"\u0005\u0002\u0000\u0000\u0b68\u0b6d\u0003\u00eau\u0000\u0b69\u0b6a\u0005"+
		"\u0004\u0000\u0000\u0b6a\u0b6c\u0003\u00eau\u0000\u0b6b\u0b69\u0001\u0000"+
		"\u0000\u0000\u0b6c\u0b6f\u0001\u0000\u0000\u0000\u0b6d\u0b6b\u0001\u0000"+
		"\u0000\u0000\u0b6d\u0b6e\u0001\u0000\u0000\u0000\u0b6e\u0b70\u0001\u0000"+
		"\u0000\u0000\u0b6f\u0b6d\u0001\u0000\u0000\u0000\u0b70\u0b71\u0005\u0003"+
		"\u0000\u0000\u0b71\u0b72\u0005\u0087\u0000\u0000\u0b72\u0b73\u0003\u00ec"+
		"v\u0000\u0b73\u0b74\u0005\u00a0\u0000\u0000\u0b74\u0b75\u0005\u0002\u0000"+
		"\u0000\u0b75\u0b7a\u0003\u00e8t\u0000\u0b76\u0b77\u0005\u0004\u0000\u0000"+
		"\u0b77\u0b79\u0003\u00e8t\u0000\u0b78\u0b76\u0001\u0000\u0000\u0000\u0b79"+
		"\u0b7c\u0001\u0000\u0000\u0000\u0b7a\u0b78\u0001\u0000\u0000\u0000\u0b7a"+
		"\u0b7b\u0001\u0000\u0000\u0000\u0b7b\u0b7d\u0001\u0000\u0000\u0000\u0b7c"+
		"\u0b7a\u0001\u0000\u0000\u0000\u0b7d\u0b7e\u0005\u0003\u0000\u0000\u0b7e"+
		"\u00e7\u0001\u0000\u0000\u0000\u0b7f\u0b80\u0005\u0002\u0000\u0000\u0b80"+
		"\u0b85\u0003\u00f0x\u0000\u0b81\u0b82\u0005\u0004\u0000\u0000\u0b82\u0b84"+
		"\u0003\u00f0x\u0000\u0b83\u0b81\u0001\u0000\u0000\u0000\u0b84\u0b87\u0001"+
		"\u0000\u0000\u0000\u0b85\u0b83\u0001\u0000\u0000\u0000\u0b85\u0b86\u0001"+
		"\u0000\u0000\u0000\u0b86\u0b88\u0001\u0000\u0000\u0000\u0b87\u0b85\u0001"+
		"\u0000\u0000\u0000\u0b88\u0b8a\u0005\u0003\u0000\u0000\u0b89\u0b8b\u0003"+
		"\u00f2y\u0000\u0b8a\u0b89\u0001\u0000\u0000\u0000\u0b8a\u0b8b\u0001\u0000"+
		"\u0000\u0000\u0b8b\u00e9\u0001\u0000\u0000\u0000\u0b8c\u0b8d\u0003\u01c0"+
		"\u00e0\u0000\u0b8d\u00eb\u0001\u0000\u0000\u0000\u0b8e\u0b8f\u0003\u01c0"+
		"\u00e0\u0000\u0b8f\u00ed\u0001\u0000\u0000\u0000\u0b90\u0b92\u0003\u00f0"+
		"x\u0000\u0b91\u0b93\u0003\u00f2y\u0000\u0b92\u0b91\u0001\u0000\u0000\u0000"+
		"\u0b92\u0b93\u0001\u0000\u0000\u0000\u0b93\u00ef\u0001\u0000\u0000\u0000"+
		"\u0b94\u0b95\u0003\u012a\u0095\u0000\u0b95\u00f1\u0001\u0000\u0000\u0000"+
		"\u0b96\u0b98\u0005\u0016\u0000\u0000\u0b97\u0b96\u0001\u0000\u0000\u0000"+
		"\u0b97\u0b98\u0001\u0000\u0000\u0000\u0b98\u0b99\u0001\u0000\u0000\u0000"+
		"\u0b99\u0b9a\u0003\u01bc\u00de\u0000\u0b9a\u00f3\u0001\u0000\u0000\u0000"+
		"\u0b9b\u0b9c\u0005\u00b8\u0000\u0000\u0b9c\u0b9e\u0005\u0175\u0000\u0000"+
		"\u0b9d\u0b9f\u0005\u00ed\u0000\u0000\u0b9e\u0b9d\u0001\u0000\u0000\u0000"+
		"\u0b9e\u0b9f\u0001\u0000\u0000\u0000\u0b9f\u0ba0\u0001\u0000\u0000\u0000"+
		"\u0ba0\u0ba1\u0003\u01ba\u00dd\u0000\u0ba1\u0baa\u0005\u0002\u0000\u0000"+
		"\u0ba2\u0ba7\u0003\u0140\u00a0\u0000\u0ba3\u0ba4\u0005\u0004\u0000\u0000"+
		"\u0ba4\u0ba6\u0003\u0140\u00a0\u0000\u0ba5\u0ba3\u0001\u0000\u0000\u0000"+
		"\u0ba6\u0ba9\u0001\u0000\u0000\u0000\u0ba7\u0ba5\u0001\u0000\u0000\u0000"+
		"\u0ba7\u0ba8\u0001\u0000\u0000\u0000\u0ba8\u0bab\u0001\u0000\u0000\u0000"+
		"\u0ba9\u0ba7\u0001\u0000\u0000\u0000\u0baa\u0ba2\u0001\u0000\u0000\u0000"+
		"\u0baa\u0bab\u0001\u0000\u0000\u0000\u0bab\u0bac\u0001\u0000\u0000\u0000"+
		"\u0bac\u0bad\u0005\u0003\u0000\u0000\u0bad\u0bb9\u0003\u01c0\u00e0\u0000"+
		"\u0bae\u0bb0\u0005\u0016\u0000\u0000\u0baf\u0bae\u0001\u0000\u0000\u0000"+
		"\u0baf\u0bb0\u0001\u0000\u0000\u0000\u0bb0\u0bb1\u0001\u0000\u0000\u0000"+
		"\u0bb1\u0bb6\u0003\u01c0\u00e0\u0000\u0bb2\u0bb3\u0005\u0004\u0000\u0000"+
		"\u0bb3\u0bb5\u0003\u01c0\u00e0\u0000\u0bb4\u0bb2\u0001\u0000\u0000\u0000"+
		"\u0bb5\u0bb8\u0001\u0000\u0000\u0000\u0bb6\u0bb4\u0001\u0000\u0000\u0000"+
		"\u0bb6\u0bb7\u0001\u0000\u0000\u0000\u0bb7\u0bba\u0001\u0000\u0000\u0000"+
		"\u0bb8\u0bb6\u0001\u0000\u0000\u0000\u0bb9\u0baf\u0001\u0000\u0000\u0000"+
		"\u0bb9\u0bba\u0001\u0000\u0000\u0000\u0bba\u00f5\u0001\u0000\u0000\u0000"+
		"\u0bbb\u0bbc\u0007\u0017\u0000\u0000\u0bbc\u00f7\u0001\u0000\u0000\u0000"+
		"\u0bbd\u0bbf\u0005\u00b8\u0000\u0000\u0bbe\u0bbd\u0001\u0000\u0000\u0000"+
		"\u0bbe\u0bbf\u0001\u0000\u0000\u0000\u0bbf\u0bc0\u0001\u0000\u0000\u0000"+
		"\u0bc0\u0bc4\u0003\u0112\u0089\u0000\u0bc1\u0bc3\u0003\u00fa}\u0000\u0bc2"+
		"\u0bc1\u0001\u0000\u0000\u0000\u0bc3\u0bc6\u0001\u0000\u0000\u0000\u0bc4"+
		"\u0bc2\u0001\u0000\u0000\u0000\u0bc4\u0bc5\u0001\u0000\u0000\u0000\u0bc5"+
		"\u00f9\u0001\u0000\u0000\u0000\u0bc6\u0bc4\u0001\u0000\u0000\u0000\u0bc7"+
		"\u0bcb\u0003\u00fc~\u0000\u0bc8\u0bcb\u0003\u00d8l\u0000\u0bc9\u0bcb\u0003"+
		"\u00deo\u0000\u0bca\u0bc7\u0001\u0000\u0000\u0000\u0bca\u0bc8\u0001\u0000"+
		"\u0000\u0000\u0bca\u0bc9\u0001\u0000\u0000\u0000\u0bcb\u00fb\u0001\u0000"+
		"\u0000\u0000\u0bcc\u0bcd\u0003\u00fe\u007f\u0000\u0bcd\u0bcf\u0005\u00b3"+
		"\u0000\u0000\u0bce\u0bd0\u0005\u00b8\u0000\u0000\u0bcf\u0bce\u0001\u0000"+
		"\u0000\u0000\u0bcf\u0bd0\u0001\u0000\u0000\u0000\u0bd0\u0bd1\u0001\u0000"+
		"\u0000\u0000\u0bd1\u0bd3\u0003\u0112\u0089\u0000\u0bd2\u0bd4\u0003\u0100"+
		"\u0080\u0000\u0bd3\u0bd2\u0001\u0000\u0000\u0000\u0bd3\u0bd4\u0001\u0000"+
		"\u0000\u0000\u0bd4\u0bde\u0001\u0000\u0000\u0000\u0bd5\u0bd6\u0005\u00dd"+
		"\u0000\u0000\u0bd6\u0bd7\u0003\u00fe\u007f\u0000\u0bd7\u0bd9\u0005\u00b3"+
		"\u0000\u0000\u0bd8\u0bda\u0005\u00b8\u0000\u0000\u0bd9\u0bd8\u0001\u0000"+
		"\u0000\u0000\u0bd9\u0bda\u0001\u0000\u0000\u0000\u0bda\u0bdb\u0001\u0000"+
		"\u0000\u0000\u0bdb\u0bdc\u0003\u0112\u0089\u0000\u0bdc\u0bde\u0001\u0000"+
		"\u0000\u0000\u0bdd\u0bcc\u0001\u0000\u0000\u0000\u0bdd\u0bd5\u0001\u0000"+
		"\u0000\u0000\u0bde\u00fd\u0001\u0000\u0000\u0000\u0bdf\u0be1\u0005\u00a5"+
		"\u0000\u0000\u0be0\u0bdf\u0001\u0000\u0000\u0000\u0be0\u0be1\u0001\u0000"+
		"\u0000\u0000\u0be1\u0bf8\u0001\u0000\u0000\u0000\u0be2\u0bf8\u0005G\u0000"+
		"\u0000\u0be3\u0be5\u0005\u00bc\u0000\u0000\u0be4\u0be6\u0005\u00ed\u0000"+
		"\u0000\u0be5\u0be4\u0001\u0000\u0000\u0000\u0be5\u0be6\u0001\u0000\u0000"+
		"\u0000\u0be6\u0bf8\u0001\u0000\u0000\u0000\u0be7\u0be9\u0005\u00bc\u0000"+
		"\u0000\u0be8\u0be7\u0001\u0000\u0000\u0000\u0be8\u0be9\u0001\u0000\u0000"+
		"\u0000\u0be9\u0bea\u0001\u0000\u0000\u0000\u0bea\u0bf8\u0005\u0124\u0000"+
		"\u0000\u0beb\u0bed\u0005\u0116\u0000\u0000\u0bec\u0bee\u0005\u00ed\u0000"+
		"\u0000\u0bed\u0bec\u0001\u0000\u0000\u0000\u0bed\u0bee\u0001\u0000\u0000"+
		"\u0000\u0bee\u0bf8\u0001\u0000\u0000\u0000\u0bef\u0bf1\u0005\u008d\u0000"+
		"\u0000\u0bf0\u0bf2\u0005\u00ed\u0000\u0000\u0bf1\u0bf0\u0001\u0000\u0000"+
		"\u0000\u0bf1\u0bf2\u0001\u0000\u0000\u0000\u0bf2\u0bf8\u0001\u0000\u0000"+
		"\u0000\u0bf3\u0bf5\u0005\u00bc\u0000\u0000\u0bf4\u0bf3\u0001\u0000\u0000"+
		"\u0000\u0bf4\u0bf5\u0001\u0000\u0000\u0000\u0bf5\u0bf6\u0001\u0000\u0000"+
		"\u0000\u0bf6\u0bf8\u0005\u0011\u0000\u0000\u0bf7\u0be0\u0001\u0000\u0000"+
		"\u0000\u0bf7\u0be2\u0001\u0000\u0000\u0000\u0bf7\u0be3\u0001\u0000\u0000"+
		"\u0000\u0bf7\u0be8\u0001\u0000\u0000\u0000\u0bf7\u0beb\u0001\u0000\u0000"+
		"\u0000\u0bf7\u0bef\u0001\u0000\u0000\u0000\u0bf7\u0bf4\u0001\u0000\u0000"+
		"\u0000\u0bf8\u00ff\u0001\u0000\u0000\u0000\u0bf9\u0bfa\u0005\u00e6\u0000"+
		"\u0000\u0bfa\u0bfe\u0003\u0148\u00a4\u0000\u0bfb\u0bfc\u0005\u016d\u0000"+
		"\u0000\u0bfc\u0bfe\u0003\u0106\u0083\u0000\u0bfd\u0bf9\u0001\u0000\u0000"+
		"\u0000\u0bfd\u0bfb\u0001\u0000\u0000\u0000\u0bfe\u0101\u0001\u0000\u0000"+
		"\u0000\u0bff\u0c00\u0005\u0146\u0000\u0000\u0c00\u0c02\u0005\u0002\u0000"+
		"\u0000\u0c01\u0c03\u0003\u0104\u0082\u0000\u0c02\u0c01\u0001\u0000\u0000"+
		"\u0000\u0c02\u0c03\u0001\u0000\u0000\u0000\u0c03\u0c04\u0001\u0000\u0000"+
		"\u0000\u0c04\u0c09\u0005\u0003\u0000\u0000\u0c05\u0c06\u0005\u010e\u0000"+
		"\u0000\u0c06\u0c07\u0005\u0002\u0000\u0000\u0c07\u0c08\u0005\u01a5\u0000"+
		"\u0000\u0c08\u0c0a\u0005\u0003\u0000\u0000\u0c09\u0c05\u0001\u0000\u0000"+
		"\u0000\u0c09\u0c0a\u0001\u0000\u0000\u0000\u0c0a\u0103\u0001\u0000\u0000"+
		"\u0000\u0c0b\u0c0d\u0005\u018f\u0000\u0000\u0c0c\u0c0b\u0001\u0000\u0000"+
		"\u0000\u0c0c\u0c0d\u0001\u0000\u0000\u0000\u0c0d\u0c0e\u0001\u0000\u0000"+
		"\u0000\u0c0e\u0c0f\u0007\u0018\u0000\u0000\u0c0f\u0c24\u0005\u00f6\u0000"+
		"\u0000\u0c10\u0c11\u0003\u0140\u00a0\u0000\u0c11\u0c12\u0005\u011d\u0000"+
		"\u0000\u0c12\u0c24\u0001\u0000\u0000\u0000\u0c13\u0c14\u0005!\u0000\u0000"+
		"\u0c14\u0c15\u0005\u01a5\u0000\u0000\u0c15\u0c16\u0005\u00ec\u0000\u0000"+
		"\u0c16\u0c17\u0005\u00e4\u0000\u0000\u0c17\u0c20\u0005\u01a5\u0000\u0000"+
		"\u0c18\u0c1e\u0005\u00e6\u0000\u0000\u0c19\u0c1f\u0003\u01c0\u00e0\u0000"+
		"\u0c1a\u0c1b\u0003\u01ba\u00dd\u0000\u0c1b\u0c1c\u0005\u0002\u0000\u0000"+
		"\u0c1c\u0c1d\u0005\u0003\u0000\u0000\u0c1d\u0c1f\u0001\u0000\u0000\u0000"+
		"\u0c1e\u0c19\u0001\u0000\u0000\u0000\u0c1e\u0c1a\u0001\u0000\u0000\u0000"+
		"\u0c1f\u0c21\u0001\u0000\u0000\u0000\u0c20\u0c18\u0001\u0000\u0000\u0000"+
		"\u0c20\u0c21\u0001\u0000\u0000\u0000\u0c21\u0c24\u0001\u0000\u0000\u0000"+
		"\u0c22\u0c24\u0003\u0140\u00a0\u0000\u0c23\u0c0c\u0001\u0000\u0000\u0000"+
		"\u0c23\u0c10\u0001\u0000\u0000\u0000\u0c23\u0c13\u0001\u0000\u0000\u0000"+
		"\u0c23\u0c22\u0001\u0000\u0000\u0000\u0c24\u0105\u0001\u0000\u0000\u0000"+
		"\u0c25\u0c26\u0005\u0002\u0000\u0000\u0c26\u0c27\u0003\u0108\u0084\u0000"+
		"\u0c27\u0c28\u0005\u0003\u0000\u0000\u0c28\u0107\u0001\u0000\u0000\u0000"+
		"\u0c29\u0c2e\u0003\u01bc\u00de\u0000\u0c2a\u0c2b\u0005\u0004\u0000\u0000"+
		"\u0c2b\u0c2d\u0003\u01bc\u00de\u0000\u0c2c\u0c2a\u0001\u0000\u0000\u0000"+
		"\u0c2d\u0c30\u0001\u0000\u0000\u0000\u0c2e\u0c2c\u0001\u0000\u0000\u0000"+
		"\u0c2e\u0c2f\u0001\u0000\u0000\u0000\u0c2f\u0109\u0001\u0000\u0000\u0000"+
		"\u0c30\u0c2e\u0001\u0000\u0000\u0000\u0c31\u0c32\u0005\u0002\u0000\u0000"+
		"\u0c32\u0c37\u0003\u010c\u0086\u0000\u0c33\u0c34\u0005\u0004\u0000\u0000"+
		"\u0c34\u0c36\u0003\u010c\u0086\u0000\u0c35\u0c33\u0001\u0000\u0000\u0000"+
		"\u0c36\u0c39\u0001\u0000\u0000\u0000\u0c37\u0c35\u0001\u0000\u0000\u0000"+
		"\u0c37\u0c38\u0001\u0000\u0000\u0000\u0c38\u0c3a\u0001\u0000\u0000\u0000"+
		"\u0c39\u0c37\u0001\u0000\u0000\u0000\u0c3a\u0c3b\u0005\u0003\u0000\u0000"+
		"\u0c3b\u010b\u0001\u0000\u0000\u0000\u0c3c\u0c3e\u0003\u01bc\u00de\u0000"+
		"\u0c3d\u0c3f\u0007\u0011\u0000\u0000\u0c3e\u0c3d\u0001\u0000\u0000\u0000"+
		"\u0c3e\u0c3f\u0001\u0000\u0000\u0000\u0c3f\u010d\u0001\u0000\u0000\u0000"+
		"\u0c40\u0c41\u0005\u0002\u0000\u0000\u0c41\u0c46\u0003\u0110\u0088\u0000"+
		"\u0c42\u0c43\u0005\u0004\u0000\u0000\u0c43\u0c45\u0003\u0110\u0088\u0000"+
		"\u0c44\u0c42\u0001\u0000\u0000\u0000\u0c45\u0c48\u0001\u0000\u0000\u0000"+
		"\u0c46\u0c44\u0001\u0000\u0000\u0000\u0c46\u0c47\u0001\u0000\u0000\u0000"+
		"\u0c47\u0c49\u0001\u0000\u0000\u0000\u0c48\u0c46\u0001\u0000\u0000\u0000"+
		"\u0c49\u0c4a\u0005\u0003\u0000\u0000\u0c4a\u010f\u0001\u0000\u0000\u0000"+
		"\u0c4b\u0c4d\u0003\u01c0\u00e0\u0000\u0c4c\u0c4e\u0003\\.\u0000\u0c4d"+
		"\u0c4c\u0001\u0000\u0000\u0000\u0c4d\u0c4e\u0001\u0000\u0000\u0000\u0c4e"+
		"\u0111\u0001\u0000\u0000\u0000\u0c4f\u0c51\u0003\u0096K\u0000\u0c50\u0c52"+
		"\u0003\u00ccf\u0000\u0c51\u0c50\u0001\u0000\u0000\u0000\u0c51\u0c52\u0001"+
		"\u0000\u0000\u0000\u0c52\u0c54\u0001\u0000\u0000\u0000\u0c53\u0c55\u0003"+
		"\u0114\u008a\u0000\u0c54\u0c53\u0001\u0000\u0000\u0000\u0c54\u0c55\u0001"+
		"\u0000\u0000\u0000\u0c55\u0c57\u0001\u0000\u0000\u0000\u0c56\u0c58\u0003"+
		"\u0102\u0081\u0000\u0c57\u0c56\u0001\u0000\u0000\u0000\u0c57\u0c58\u0001"+
		"\u0000\u0000\u0000\u0c58\u0c59\u0001\u0000\u0000\u0000\u0c59\u0c5a\u0003"+
		"\u0124\u0092\u0000\u0c5a\u0c6e\u0001\u0000\u0000\u0000\u0c5b\u0c5c\u0005"+
		"\u0002\u0000\u0000\u0c5c\u0c5d\u0003`0\u0000\u0c5d\u0c5f\u0005\u0003\u0000"+
		"\u0000\u0c5e\u0c60\u0003\u0102\u0081\u0000\u0c5f\u0c5e\u0001\u0000\u0000"+
		"\u0000\u0c5f\u0c60\u0001\u0000\u0000\u0000\u0c60\u0c61\u0001\u0000\u0000"+
		"\u0000\u0c61\u0c62\u0003\u0124\u0092\u0000\u0c62\u0c6e\u0001\u0000\u0000"+
		"\u0000\u0c63\u0c64\u0005\u0002\u0000\u0000\u0c64\u0c65\u0003\u00f8|\u0000"+
		"\u0c65\u0c67\u0005\u0003\u0000\u0000\u0c66\u0c68\u0003\u0102\u0081\u0000"+
		"\u0c67\u0c66\u0001\u0000\u0000\u0000\u0c67\u0c68\u0001\u0000\u0000\u0000"+
		"\u0c68\u0c69\u0001\u0000\u0000\u0000\u0c69\u0c6a\u0003\u0124\u0092\u0000"+
		"\u0c6a\u0c6e\u0001\u0000\u0000\u0000\u0c6b\u0c6e\u0003\u0116\u008b\u0000"+
		"\u0c6c\u0c6e\u0003\u0122\u0091\u0000\u0c6d\u0c4f\u0001\u0000\u0000\u0000"+
		"\u0c6d\u0c5b\u0001\u0000\u0000\u0000\u0c6d\u0c63\u0001\u0000\u0000\u0000"+
		"\u0c6d\u0c6b\u0001\u0000\u0000\u0000\u0c6d\u0c6c\u0001\u0000\u0000\u0000"+
		"\u0c6e\u0113\u0001\u0000\u0000\u0000\u0c6f\u0c70\u0005\u017e\u0000\u0000"+
		"\u0c70\u0c71\u0003|>\u0000\u0c71\u0115\u0001\u0000\u0000\u0000\u0c72\u0c73"+
		"\u0005\u016f\u0000\u0000\u0c73\u0c78\u0003\u0140\u00a0\u0000\u0c74\u0c75"+
		"\u0005\u0004\u0000\u0000\u0c75\u0c77\u0003\u0140\u00a0\u0000\u0c76\u0c74"+
		"\u0001\u0000\u0000\u0000\u0c77\u0c7a\u0001\u0000\u0000\u0000\u0c78\u0c76"+
		"\u0001\u0000\u0000\u0000\u0c78\u0c79\u0001\u0000\u0000\u0000\u0c79\u0c7b"+
		"\u0001\u0000\u0000\u0000\u0c7a\u0c78\u0001\u0000\u0000\u0000\u0c7b\u0c7c"+
		"\u0003\u0124\u0092\u0000\u0c7c\u0117\u0001\u0000\u0000\u0000\u0c7d\u0c7e"+
		"\u0005\u0144\u0000\u0000\u0c7e\u0c80\u0003\u0096K\u0000\u0c7f\u0c81\u0003"+
		"\u011a\u008d\u0000\u0c80\u0c7f\u0001\u0000\u0000\u0000\u0c80\u0c81\u0001"+
		"\u0000\u0000\u0000\u0c81\u0c91\u0001\u0000\u0000\u0000\u0c82\u0c83\u0005"+
		"\u0144\u0000\u0000\u0c83\u0c84\u0005\u0002\u0000\u0000\u0c84\u0c85\u0003"+
		"\u0096K\u0000\u0c85\u0c87\u0005\u0003\u0000\u0000\u0c86\u0c88\u0003\u011a"+
		"\u008d\u0000\u0c87\u0c86\u0001\u0000\u0000\u0000\u0c87\u0c88\u0001\u0000"+
		"\u0000\u0000\u0c88\u0c91\u0001\u0000\u0000\u0000\u0c89\u0c8a\u0005\u0144"+
		"\u0000\u0000\u0c8a\u0c8b\u0005\u0002\u0000\u0000\u0c8b\u0c8c\u0003`0\u0000"+
		"\u0c8c\u0c8e\u0005\u0003\u0000\u0000\u0c8d\u0c8f\u0003\u011a\u008d\u0000"+
		"\u0c8e\u0c8d\u0001\u0000\u0000\u0000\u0c8e\u0c8f\u0001\u0000\u0000\u0000"+
		"\u0c8f\u0c91\u0001\u0000\u0000\u0000\u0c90\u0c7d\u0001\u0000\u0000\u0000"+
		"\u0c90\u0c82\u0001\u0000\u0000\u0000\u0c90\u0c89\u0001\u0000\u0000\u0000"+
		"\u0c91\u0119\u0001\u0000\u0000\u0000\u0c92\u0c93\u0005\u017e\u0000\u0000"+
		"\u0c93\u0c94\u0005\u012e\u0000\u0000\u0c94\u0cad\u0005\u00f3\u0000\u0000"+
		"\u0c95\u0c96\u0007\u0019\u0000\u0000\u0c96\u0caa\u0005#\u0000\u0000\u0c97"+
		"\u0c98\u0005\u0002\u0000\u0000\u0c98\u0c9d\u0003\u0140\u00a0\u0000\u0c99"+
		"\u0c9a\u0005\u0004\u0000\u0000\u0c9a\u0c9c\u0003\u0140\u00a0\u0000\u0c9b"+
		"\u0c99\u0001\u0000\u0000\u0000\u0c9c\u0c9f\u0001\u0000\u0000\u0000\u0c9d"+
		"\u0c9b\u0001\u0000\u0000\u0000\u0c9d\u0c9e\u0001\u0000\u0000\u0000\u0c9e"+
		"\u0ca0\u0001\u0000\u0000\u0000\u0c9f\u0c9d\u0001\u0000\u0000\u0000\u0ca0"+
		"\u0ca1\u0005\u0003\u0000\u0000\u0ca1\u0cab\u0001\u0000\u0000\u0000\u0ca2"+
		"\u0ca5\u0003\u0140\u00a0\u0000\u0ca3\u0ca4\u0005\u0004\u0000\u0000\u0ca4"+
		"\u0ca6\u0003\u0140\u00a0\u0000\u0ca5\u0ca3\u0001\u0000\u0000\u0000\u0ca6"+
		"\u0ca7\u0001\u0000\u0000\u0000\u0ca7\u0ca5\u0001\u0000\u0000\u0000\u0ca7"+
		"\u0ca8\u0001\u0000\u0000\u0000\u0ca8\u0cab\u0001\u0000\u0000\u0000\u0ca9"+
		"\u0cab\u0003\u0140\u00a0\u0000\u0caa\u0c97\u0001\u0000\u0000\u0000\u0caa"+
		"\u0ca2\u0001\u0000\u0000\u0000\u0caa\u0ca9\u0001\u0000\u0000\u0000\u0cab"+
		"\u0cad\u0001\u0000\u0000\u0000\u0cac\u0c92\u0001\u0000\u0000\u0000\u0cac"+
		"\u0c95\u0001\u0000\u0000\u0000\u0cad\u0cc5\u0001\u0000\u0000\u0000\u0cae"+
		"\u0caf\u0007\u001a\u0000\u0000\u0caf\u0cc3\u0005#\u0000\u0000\u0cb0\u0cb1"+
		"\u0005\u0002\u0000\u0000\u0cb1\u0cb6\u0003\u00a2Q\u0000\u0cb2\u0cb3\u0005"+
		"\u0004\u0000\u0000\u0cb3\u0cb5\u0003\u00a2Q\u0000\u0cb4\u0cb2\u0001\u0000"+
		"\u0000\u0000\u0cb5\u0cb8\u0001\u0000\u0000\u0000\u0cb6\u0cb4\u0001\u0000"+
		"\u0000\u0000\u0cb6\u0cb7\u0001\u0000\u0000\u0000\u0cb7\u0cb9\u0001\u0000"+
		"\u0000\u0000\u0cb8\u0cb6\u0001\u0000\u0000\u0000\u0cb9\u0cba\u0005\u0003"+
		"\u0000\u0000\u0cba\u0cc4\u0001\u0000\u0000\u0000\u0cbb\u0cbe\u0003\u00a2"+
		"Q\u0000\u0cbc\u0cbd\u0005\u0004\u0000\u0000\u0cbd\u0cbf\u0003\u00a2Q\u0000"+
		"\u0cbe\u0cbc\u0001\u0000\u0000\u0000\u0cbf\u0cc0\u0001\u0000\u0000\u0000"+
		"\u0cc0\u0cbe\u0001\u0000\u0000\u0000\u0cc0\u0cc1\u0001\u0000\u0000\u0000"+
		"\u0cc1\u0cc4\u0001\u0000\u0000\u0000\u0cc2\u0cc4\u0003\u00a2Q\u0000\u0cc3"+
		"\u0cb0\u0001\u0000\u0000\u0000\u0cc3\u0cbb\u0001\u0000\u0000\u0000\u0cc3"+
		"\u0cc2\u0001\u0000\u0000\u0000\u0cc4\u0cc6\u0001\u0000\u0000\u0000\u0cc5"+
		"\u0cae\u0001\u0000\u0000\u0000\u0cc5\u0cc6\u0001\u0000\u0000\u0000\u0cc6"+
		"\u011b\u0001\u0000\u0000\u0000\u0cc7\u0cc8\u0003\u01c0\u00e0\u0000\u0cc8"+
		"\u0cc9\u0005\u019c\u0000\u0000\u0cc9\u0cca\u0003\u0118\u008c\u0000\u0cca"+
		"\u011d\u0001\u0000\u0000\u0000\u0ccb\u0cce\u0003\u0118\u008c\u0000\u0ccc"+
		"\u0cce\u0003\u011c\u008e\u0000\u0ccd\u0ccb\u0001\u0000\u0000\u0000\u0ccd"+
		"\u0ccc\u0001\u0000\u0000\u0000\u0cce\u011f\u0001\u0000\u0000\u0000\u0ccf"+
		"\u0cd2\u0003\u011e\u008f\u0000\u0cd0\u0cd2\u0003\u0144\u00a2\u0000\u0cd1"+
		"\u0ccf\u0001\u0000\u0000\u0000\u0cd1\u0cd0\u0001\u0000\u0000\u0000\u0cd2"+
		"\u0121\u0001\u0000\u0000\u0000\u0cd3\u0cd4\u0003\u01b8\u00dc\u0000\u0cd4"+
		"\u0cdd\u0005\u0002\u0000\u0000\u0cd5\u0cda\u0003\u0120\u0090\u0000\u0cd6"+
		"\u0cd7\u0005\u0004\u0000\u0000\u0cd7\u0cd9\u0003\u0120\u0090\u0000\u0cd8"+
		"\u0cd6\u0001\u0000\u0000\u0000\u0cd9\u0cdc\u0001\u0000\u0000\u0000\u0cda"+
		"\u0cd8\u0001\u0000\u0000\u0000\u0cda\u0cdb\u0001\u0000\u0000\u0000\u0cdb"+
		"\u0cde\u0001\u0000\u0000\u0000\u0cdc\u0cda\u0001\u0000\u0000\u0000\u0cdd"+
		"\u0cd5\u0001\u0000\u0000\u0000\u0cdd\u0cde\u0001\u0000\u0000\u0000\u0cde"+
		"\u0cdf\u0001\u0000\u0000\u0000\u0cdf\u0ce0\u0005\u0003\u0000\u0000\u0ce0"+
		"\u0ce1\u0003\u0124\u0092\u0000\u0ce1\u0123\u0001\u0000\u0000\u0000\u0ce2"+
		"\u0ce4\u0005\u0016\u0000\u0000\u0ce3\u0ce2\u0001\u0000\u0000\u0000\u0ce3"+
		"\u0ce4\u0001\u0000\u0000\u0000\u0ce4\u0ce5\u0001\u0000\u0000\u0000\u0ce5"+
		"\u0ce7\u0003\u01c2\u00e1\u0000\u0ce6\u0ce8\u0003\u0106\u0083\u0000\u0ce7"+
		"\u0ce6\u0001\u0000\u0000\u0000\u0ce7\u0ce8\u0001\u0000\u0000\u0000\u0ce8"+
		"\u0cea\u0001\u0000\u0000\u0000\u0ce9\u0ce3\u0001\u0000\u0000\u0000\u0ce9"+
		"\u0cea\u0001\u0000\u0000\u0000\u0cea\u0125\u0001\u0000\u0000\u0000\u0ceb"+
		"\u0cec\u0005\u011c\u0000\u0000\u0cec\u0ced\u0005\u0089\u0000\u0000\u0ced"+
		"\u0cee\u0005\u0126\u0000\u0000\u0cee\u0cf2\u0003\u01d0\u00e8\u0000\u0cef"+
		"\u0cf0\u0005\u017e\u0000\u0000\u0cf0\u0cf1\u0005\u0127\u0000\u0000\u0cf1"+
		"\u0cf3\u0003|>\u0000\u0cf2\u0cef\u0001\u0000\u0000\u0000\u0cf2\u0cf3\u0001"+
		"\u0000\u0000\u0000\u0cf3\u0d1d\u0001\u0000\u0000\u0000\u0cf4\u0cf5\u0005"+
		"\u011c\u0000\u0000\u0cf5\u0cf6\u0005\u0089\u0000\u0000\u0cf6\u0d00\u0005"+
		"a\u0000\u0000\u0cf7\u0cf8\u0005\u0081\u0000\u0000\u0cf8\u0cf9\u0005\u014a"+
		"\u0000\u0000\u0cf9\u0cfa\u0005#\u0000\u0000\u0cfa\u0cfe\u0003\u01d0\u00e8"+
		"\u0000\u0cfb\u0cfc\u0005r\u0000\u0000\u0cfc\u0cfd\u0005#\u0000\u0000\u0cfd"+
		"\u0cff\u0003\u01d0\u00e8\u0000\u0cfe\u0cfb\u0001\u0000\u0000\u0000\u0cfe"+
		"\u0cff\u0001\u0000\u0000\u0000\u0cff\u0d01\u0001\u0000\u0000\u0000\u0d00"+
		"\u0cf7\u0001\u0000\u0000\u0000\u0d00\u0d01\u0001\u0000\u0000\u0000\u0d01"+
		"\u0d07\u0001\u0000\u0000\u0000\u0d02\u0d03\u00057\u0000\u0000\u0d03\u0d04"+
		"\u0005\u00b1\u0000\u0000\u0d04\u0d05\u0005\u014a\u0000\u0000\u0d05\u0d06"+
		"\u0005#\u0000\u0000\u0d06\u0d08\u0003\u01d0\u00e8\u0000\u0d07\u0d02\u0001"+
		"\u0000\u0000\u0000\u0d07\u0d08\u0001\u0000\u0000\u0000\u0d08\u0d0e\u0001"+
		"\u0000\u0000\u0000\u0d09\u0d0a\u0005\u00cb\u0000\u0000\u0d0a\u0d0b\u0005"+
		"\u00b5\u0000\u0000\u0d0b\u0d0c\u0005\u014a\u0000\u0000\u0d0c\u0d0d\u0005"+
		"#\u0000\u0000\u0d0d\u0d0f\u0003\u01d0\u00e8\u0000\u0d0e\u0d09\u0001\u0000"+
		"\u0000\u0000\u0d0e\u0d0f\u0001\u0000\u0000\u0000\u0d0f\u0d14\u0001\u0000"+
		"\u0000\u0000\u0d10\u0d11\u0005\u00c0\u0000\u0000\u0d11\u0d12\u0005\u014a"+
		"\u0000\u0000\u0d12\u0d13\u0005#\u0000\u0000\u0d13\u0d15\u0003\u01d0\u00e8"+
		"\u0000\u0d14\u0d10\u0001\u0000\u0000\u0000\u0d14\u0d15\u0001\u0000\u0000"+
		"\u0000\u0d15\u0d1a\u0001\u0000\u0000\u0000\u0d16\u0d17\u0005\u00e1\u0000"+
		"\u0000\u0d17\u0d18\u0005^\u0000\u0000\u0d18\u0d19\u0005\u0016\u0000\u0000"+
		"\u0d19\u0d1b\u0003\u01d0\u00e8\u0000\u0d1a\u0d16\u0001\u0000\u0000\u0000"+
		"\u0d1a\u0d1b\u0001\u0000\u0000\u0000\u0d1b\u0d1d\u0001\u0000\u0000\u0000"+
		"\u0d1c\u0ceb\u0001\u0000\u0000\u0000\u0d1c\u0cf4\u0001\u0000\u0000\u0000"+
		"\u0d1d\u0127\u0001\u0000\u0000\u0000\u0d1e\u0d23\u0003\u012a\u0095\u0000"+
		"\u0d1f\u0d20\u0005\u0004\u0000\u0000\u0d20\u0d22\u0003\u012a\u0095\u0000"+
		"\u0d21\u0d1f\u0001\u0000\u0000\u0000\u0d22\u0d25\u0001\u0000\u0000\u0000"+
		"\u0d23\u0d21\u0001\u0000\u0000\u0000\u0d23\u0d24\u0001\u0000\u0000\u0000"+
		"\u0d24\u0129\u0001\u0000\u0000\u0000\u0d25\u0d23\u0001\u0000\u0000\u0000"+
		"\u0d26\u0d2b\u0003\u01bc\u00de\u0000\u0d27\u0d28\u0005\u0005\u0000\u0000"+
		"\u0d28\u0d2a\u0003\u01bc\u00de\u0000\u0d29\u0d27\u0001\u0000\u0000\u0000"+
		"\u0d2a\u0d2d\u0001\u0000\u0000\u0000\u0d2b\u0d29\u0001\u0000\u0000\u0000"+
		"\u0d2b\u0d2c\u0001\u0000\u0000\u0000\u0d2c\u012b\u0001\u0000\u0000\u0000"+
		"\u0d2d\u0d2b\u0001\u0000\u0000\u0000\u0d2e\u0d33\u0003\u012e\u0097\u0000"+
		"\u0d2f\u0d30\u0005\u0004\u0000\u0000\u0d30\u0d32\u0003\u012e\u0097\u0000"+
		"\u0d31\u0d2f\u0001\u0000\u0000\u0000\u0d32\u0d35\u0001\u0000\u0000\u0000"+
		"\u0d33\u0d31\u0001\u0000\u0000\u0000\u0d33\u0d34\u0001\u0000\u0000\u0000"+
		"\u0d34\u012d\u0001\u0000\u0000\u0000\u0d35\u0d33\u0001\u0000\u0000\u0000"+
		"\u0d36\u0d39\u0003\u012a\u0095\u0000\u0d37\u0d38\u0005\u00e9\u0000\u0000"+
		"\u0d38\u0d3a\u0003|>\u0000\u0d39\u0d37\u0001\u0000\u0000\u0000\u0d39\u0d3a"+
		"\u0001\u0000\u0000\u0000\u0d3a\u012f\u0001\u0000\u0000\u0000\u0d3b\u0d3c"+
		"\u0003\u01bc\u00de\u0000\u0d3c\u0d3d\u0005\u0005\u0000\u0000\u0d3d\u0d3f"+
		"\u0001\u0000\u0000\u0000\u0d3e\u0d3b\u0001\u0000\u0000\u0000\u0d3e\u0d3f"+
		"\u0001\u0000\u0000\u0000\u0d3f\u0d40\u0001\u0000\u0000\u0000\u0d40\u0d41"+
		"\u0003\u01bc\u00de\u0000\u0d41\u0131\u0001\u0000\u0000\u0000\u0d42\u0d43"+
		"\u0003\u01bc\u00de\u0000\u0d43\u0d44\u0005\u0005\u0000\u0000\u0d44\u0d46"+
		"\u0001\u0000\u0000\u0000\u0d45\u0d42\u0001\u0000\u0000\u0000\u0d45\u0d46"+
		"\u0001\u0000\u0000\u0000\u0d46\u0d47\u0001\u0000\u0000\u0000\u0d47\u0d48"+
		"\u0003\u01bc\u00de\u0000\u0d48\u0133\u0001\u0000\u0000\u0000\u0d49\u0d51"+
		"\u0003\u0140\u00a0\u0000\u0d4a\u0d4c\u0005\u0016\u0000\u0000\u0d4b\u0d4a"+
		"\u0001\u0000\u0000\u0000\u0d4b\u0d4c\u0001\u0000\u0000\u0000\u0d4c\u0d4f"+
		"\u0001\u0000\u0000\u0000\u0d4d\u0d50\u0003\u01bc\u00de\u0000\u0d4e\u0d50"+
		"\u0003\u0106\u0083\u0000\u0d4f\u0d4d\u0001\u0000\u0000\u0000\u0d4f\u0d4e"+
		"\u0001\u0000\u0000\u0000\u0d50\u0d52\u0001\u0000\u0000\u0000\u0d51\u0d4b"+
		"\u0001\u0000\u0000\u0000\u0d51\u0d52\u0001\u0000\u0000\u0000\u0d52\u0135"+
		"\u0001\u0000\u0000\u0000\u0d53\u0d58\u0003\u0134\u009a\u0000\u0d54\u0d55"+
		"\u0005\u0004\u0000\u0000\u0d55\u0d57\u0003\u0134\u009a\u0000\u0d56\u0d54"+
		"\u0001\u0000\u0000\u0000\u0d57\u0d5a\u0001\u0000\u0000\u0000\u0d58\u0d56"+
		"\u0001\u0000\u0000\u0000\u0d58\u0d59\u0001\u0000\u0000\u0000\u0d59\u0137"+
		"\u0001\u0000\u0000\u0000\u0d5a\u0d58\u0001\u0000\u0000\u0000\u0d5b\u0d5c"+
		"\u0005\u0002\u0000\u0000\u0d5c\u0d61\u0003\u013a\u009d\u0000\u0d5d\u0d5e"+
		"\u0005\u0004\u0000\u0000\u0d5e\u0d60\u0003\u013a\u009d\u0000\u0d5f\u0d5d"+
		"\u0001\u0000\u0000\u0000\u0d60\u0d63\u0001\u0000\u0000\u0000\u0d61\u0d5f"+
		"\u0001\u0000\u0000\u0000\u0d61\u0d62\u0001\u0000\u0000\u0000\u0d62\u0d64"+
		"\u0001\u0000\u0000\u0000\u0d63\u0d61\u0001\u0000\u0000\u0000\u0d64\u0d65"+
		"\u0005\u0003\u0000\u0000\u0d65\u0139\u0001\u0000\u0000\u0000\u0d66\u0d69"+
		"\u0003\u013c\u009e\u0000\u0d67\u0d69\u0003\u0188\u00c4\u0000\u0d68\u0d66"+
		"\u0001\u0000\u0000\u0000\u0d68\u0d67\u0001\u0000\u0000\u0000\u0d69\u013b"+
		"\u0001\u0000\u0000\u0000\u0d6a\u0d78\u0003\u01ba\u00dd\u0000\u0d6b\u0d6c"+
		"\u0003\u01c0\u00e0\u0000\u0d6c\u0d6d\u0005\u0002\u0000\u0000\u0d6d\u0d72"+
		"\u0003\u013e\u009f\u0000\u0d6e\u0d6f\u0005\u0004\u0000\u0000\u0d6f\u0d71"+
		"\u0003\u013e\u009f\u0000\u0d70\u0d6e\u0001\u0000\u0000\u0000\u0d71\u0d74"+
		"\u0001\u0000\u0000\u0000\u0d72\u0d70\u0001\u0000\u0000\u0000\u0d72\u0d73"+
		"\u0001\u0000\u0000\u0000\u0d73\u0d75\u0001\u0000\u0000\u0000\u0d74\u0d72"+
		"\u0001\u0000\u0000\u0000\u0d75\u0d76\u0005\u0003\u0000\u0000\u0d76\u0d78"+
		"\u0001\u0000\u0000\u0000\u0d77\u0d6a\u0001\u0000\u0000\u0000\u0d77\u0d6b"+
		"\u0001\u0000\u0000\u0000\u0d78\u013d\u0001\u0000\u0000\u0000\u0d79\u0d7c"+
		"\u0003\u01ba\u00dd\u0000\u0d7a\u0d7c\u0003\u0158\u00ac\u0000\u0d7b\u0d79"+
		"\u0001\u0000\u0000\u0000\u0d7b\u0d7a\u0001\u0000\u0000\u0000\u0d7c\u013f"+
		"\u0001\u0000\u0000\u0000\u0d7d\u0d7e\u0003\u0148\u00a4\u0000\u0d7e\u0141"+
		"\u0001\u0000\u0000\u0000\u0d7f\u0d80\u0003\u01c0\u00e0\u0000\u0d80\u0d81"+
		"\u0005\u019c\u0000\u0000\u0d81\u0d82\u0003\u0140\u00a0\u0000\u0d82\u0143"+
		"\u0001\u0000\u0000\u0000\u0d83\u0d86\u0003\u0140\u00a0\u0000\u0d84\u0d86"+
		"\u0003\u0142\u00a1\u0000\u0d85\u0d83\u0001\u0000\u0000\u0000\u0d85\u0d84"+
		"\u0001\u0000\u0000\u0000\u0d86\u0145\u0001\u0000\u0000\u0000\u0d87\u0d8c"+
		"\u0003\u0140\u00a0\u0000\u0d88\u0d89\u0005\u0004\u0000\u0000\u0d89\u0d8b"+
		"\u0003\u0140\u00a0\u0000\u0d8a\u0d88\u0001\u0000\u0000\u0000\u0d8b\u0d8e"+
		"\u0001\u0000\u0000\u0000\u0d8c\u0d8a\u0001\u0000\u0000\u0000\u0d8c\u0d8d"+
		"\u0001\u0000\u0000\u0000\u0d8d\u0147\u0001\u0000\u0000\u0000\u0d8e\u0d8c"+
		"\u0001\u0000\u0000\u0000\u0d8f\u0d90\u0006\u00a4\uffff\uffff\u0000\u0d90"+
		"\u0d91\u0007\u001b\u0000\u0000\u0d91\u0d9c\u0003\u0148\u00a4\u0005\u0d92"+
		"\u0d93\u0005w\u0000\u0000\u0d93\u0d94\u0005\u0002\u0000\u0000\u0d94\u0d95"+
		"\u0003`0\u0000\u0d95\u0d96\u0005\u0003\u0000\u0000\u0d96\u0d9c\u0001\u0000"+
		"\u0000\u0000\u0d97\u0d99\u0003\u014e\u00a7\u0000\u0d98\u0d9a\u0003\u014a"+
		"\u00a5\u0000\u0d99\u0d98\u0001\u0000\u0000\u0000\u0d99\u0d9a\u0001\u0000"+
		"\u0000\u0000\u0d9a\u0d9c\u0001\u0000\u0000\u0000\u0d9b\u0d8f\u0001\u0000"+
		"\u0000\u0000\u0d9b\u0d92\u0001\u0000\u0000\u0000\u0d9b\u0d97\u0001\u0000"+
		"\u0000\u0000\u0d9c\u0da5\u0001\u0000\u0000\u0000\u0d9d\u0d9e\n\u0002\u0000"+
		"\u0000\u0d9e\u0d9f\u0005\u0010\u0000\u0000\u0d9f\u0da4\u0003\u0148\u00a4"+
		"\u0003\u0da0\u0da1\n\u0001\u0000\u0000\u0da1\u0da2\u0005\u00ea\u0000\u0000"+
		"\u0da2\u0da4\u0003\u0148\u00a4\u0002\u0da3\u0d9d\u0001\u0000\u0000\u0000"+
		"\u0da3\u0da0\u0001\u0000\u0000\u0000\u0da4\u0da7\u0001\u0000\u0000\u0000"+
		"\u0da5\u0da3\u0001\u0000\u0000\u0000\u0da5\u0da6\u0001\u0000\u0000\u0000"+
		"\u0da6\u0149\u0001\u0000\u0000\u0000\u0da7\u0da5\u0001\u0000\u0000\u0000"+
		"\u0da8\u0daa\u0003\u014c\u00a6\u0000\u0da9\u0da8\u0001\u0000\u0000\u0000"+
		"\u0da9\u0daa\u0001\u0000\u0000\u0000\u0daa\u0dab\u0001\u0000\u0000\u0000"+
		"\u0dab\u0dac\u0005\u001b\u0000\u0000\u0dac\u0dad\u0003\u014e\u00a7\u0000"+
		"\u0dad\u0dae\u0005\u0010\u0000\u0000\u0dae\u0daf\u0003\u014e\u00a7\u0000"+
		"\u0daf\u0dfb\u0001\u0000\u0000\u0000\u0db0\u0db2\u0003\u014c\u00a6\u0000"+
		"\u0db1\u0db0\u0001\u0000\u0000\u0000\u0db1\u0db2\u0001\u0000\u0000\u0000"+
		"\u0db2\u0db3\u0001\u0000\u0000\u0000\u0db3\u0db4\u0005\u00a0\u0000\u0000"+
		"\u0db4\u0db5\u0005\u0002\u0000\u0000\u0db5\u0dba\u0003\u0140\u00a0\u0000"+
		"\u0db6\u0db7\u0005\u0004\u0000\u0000\u0db7\u0db9\u0003\u0140\u00a0\u0000"+
		"\u0db8\u0db6\u0001\u0000\u0000\u0000\u0db9\u0dbc\u0001\u0000\u0000\u0000"+
		"\u0dba\u0db8\u0001\u0000\u0000\u0000\u0dba\u0dbb\u0001\u0000\u0000\u0000"+
		"\u0dbb\u0dbd\u0001\u0000\u0000\u0000\u0dbc\u0dba\u0001\u0000\u0000\u0000"+
		"\u0dbd\u0dbe\u0005\u0003\u0000\u0000\u0dbe\u0dfb\u0001\u0000\u0000\u0000"+
		"\u0dbf\u0dc1\u0003\u014c\u00a6\u0000\u0dc0\u0dbf\u0001\u0000\u0000\u0000"+
		"\u0dc0\u0dc1\u0001\u0000\u0000\u0000\u0dc1\u0dc2\u0001\u0000\u0000\u0000"+
		"\u0dc2\u0dc3\u0005\u00a0\u0000\u0000\u0dc3\u0dc4\u0005\u0002\u0000\u0000"+
		"\u0dc4\u0dc5\u0003`0\u0000\u0dc5\u0dc6\u0005\u0003\u0000\u0000\u0dc6\u0dfb"+
		"\u0001\u0000\u0000\u0000\u0dc7\u0dc9\u0003\u014c\u00a6\u0000\u0dc8\u0dc7"+
		"\u0001\u0000\u0000\u0000\u0dc8\u0dc9\u0001\u0000\u0000\u0000\u0dc9\u0dca"+
		"\u0001\u0000\u0000\u0000\u0dca\u0dcb\u0005\u0117\u0000\u0000\u0dcb\u0dfb"+
		"\u0003\u014e\u00a7\u0000\u0dcc\u0dce\u0003\u014c\u00a6\u0000\u0dcd\u0dcc"+
		"\u0001\u0000\u0000\u0000\u0dcd\u0dce\u0001\u0000\u0000\u0000\u0dce\u0dcf"+
		"\u0001\u0000\u0000\u0000\u0dcf\u0dd0\u0007\u001c\u0000\u0000\u0dd0\u0dde"+
		"\u0007\u001d\u0000\u0000\u0dd1\u0dd2\u0005\u0002\u0000\u0000\u0dd2\u0ddf"+
		"\u0005\u0003\u0000\u0000\u0dd3\u0dd4\u0005\u0002\u0000\u0000\u0dd4\u0dd9"+
		"\u0003\u0140\u00a0\u0000\u0dd5\u0dd6\u0005\u0004\u0000\u0000\u0dd6\u0dd8"+
		"\u0003\u0140\u00a0\u0000\u0dd7\u0dd5\u0001\u0000\u0000\u0000\u0dd8\u0ddb"+
		"\u0001\u0000\u0000\u0000\u0dd9\u0dd7\u0001\u0000\u0000\u0000\u0dd9\u0dda"+
		"\u0001\u0000\u0000\u0000\u0dda\u0ddc\u0001\u0000\u0000\u0000\u0ddb\u0dd9"+
		"\u0001\u0000\u0000\u0000\u0ddc\u0ddd\u0005\u0003\u0000\u0000\u0ddd\u0ddf"+
		"\u0001\u0000\u0000\u0000\u0dde\u0dd1\u0001\u0000\u0000\u0000\u0dde\u0dd3"+
		"\u0001\u0000\u0000\u0000\u0ddf\u0dfb\u0001\u0000\u0000\u0000\u0de0\u0de2"+
		"\u0003\u014c\u00a6\u0000\u0de1\u0de0\u0001\u0000\u0000\u0000\u0de1\u0de2"+
		"\u0001\u0000\u0000\u0000\u0de2\u0de3\u0001\u0000\u0000\u0000\u0de3\u0de4"+
		"\u0007\u001c\u0000\u0000\u0de4\u0de7\u0003\u014e\u00a7\u0000\u0de5\u0de6"+
		"\u0005q\u0000\u0000\u0de6\u0de8\u0003\u01d0\u00e8\u0000\u0de7\u0de5\u0001"+
		"\u0000\u0000\u0000\u0de7\u0de8\u0001\u0000\u0000\u0000\u0de8\u0dfb\u0001"+
		"\u0000\u0000\u0000\u0de9\u0deb\u0005\u00b0\u0000\u0000\u0dea\u0dec\u0003"+
		"\u014c\u00a6\u0000\u0deb\u0dea\u0001\u0000\u0000\u0000\u0deb\u0dec\u0001"+
		"\u0000\u0000\u0000\u0dec\u0ded\u0001\u0000\u0000\u0000\u0ded\u0dfb\u0005"+
		"\u00e1\u0000\u0000\u0dee\u0df0\u0005\u00b0\u0000\u0000\u0def\u0df1\u0003"+
		"\u014c\u00a6\u0000\u0df0\u0def\u0001\u0000\u0000\u0000\u0df0\u0df1\u0001"+
		"\u0000\u0000\u0000\u0df1\u0df2\u0001\u0000\u0000\u0000\u0df2\u0dfb\u0007"+
		"\u001e\u0000\u0000\u0df3\u0df5\u0005\u00b0\u0000\u0000\u0df4\u0df6\u0003"+
		"\u014c\u00a6\u0000\u0df5\u0df4\u0001\u0000\u0000\u0000\u0df5\u0df6\u0001"+
		"\u0000\u0000\u0000\u0df6\u0df7\u0001\u0000\u0000\u0000\u0df7\u0df8\u0005"+
		"h\u0000\u0000\u0df8\u0df9\u0005\u008c\u0000\u0000\u0df9\u0dfb\u0003\u014e"+
		"\u00a7\u0000\u0dfa\u0da9\u0001\u0000\u0000\u0000\u0dfa\u0db1\u0001\u0000"+
		"\u0000\u0000\u0dfa\u0dc0\u0001\u0000\u0000\u0000\u0dfa\u0dc8\u0001\u0000"+
		"\u0000\u0000\u0dfa\u0dcd\u0001\u0000\u0000\u0000\u0dfa\u0de1\u0001\u0000"+
		"\u0000\u0000\u0dfa\u0de9\u0001\u0000\u0000\u0000\u0dfa\u0dee\u0001\u0000"+
		"\u0000\u0000\u0dfa\u0df3\u0001\u0000\u0000\u0000\u0dfb\u014b\u0001\u0000"+
		"\u0000\u0000\u0dfc\u0dfd\u0007\u001b\u0000\u0000\u0dfd\u014d\u0001\u0000"+
		"\u0000\u0000\u0dfe\u0dff\u0006\u00a7\uffff\uffff\u0000\u0dff\u0e03\u0003"+
		"\u0154\u00aa\u0000\u0e00\u0e01\u0007\u001f\u0000\u0000\u0e01\u0e03\u0003"+
		"\u014e\u00a7\b\u0e02\u0dfe\u0001\u0000\u0000\u0000\u0e02\u0e00\u0001\u0000"+
		"\u0000\u0000\u0e03\u0e1d\u0001\u0000\u0000\u0000\u0e04\u0e05\n\u0007\u0000"+
		"\u0000\u0e05\u0e06\u0007 \u0000\u0000\u0e06\u0e1c\u0003\u014e\u00a7\b"+
		"\u0e07\u0e08\n\u0006\u0000\u0000\u0e08\u0e09\u0007!\u0000\u0000\u0e09"+
		"\u0e1c\u0003\u014e\u00a7\u0007\u0e0a\u0e0b\n\u0005\u0000\u0000\u0e0b\u0e0c"+
		"\u0003\u0150\u00a8\u0000\u0e0c\u0e0d\u0003\u014e\u00a7\u0006\u0e0d\u0e1c"+
		"\u0001\u0000\u0000\u0000\u0e0e\u0e0f\n\u0004\u0000\u0000\u0e0f\u0e10\u0005"+
		"\u0194\u0000\u0000\u0e10\u0e1c\u0003\u014e\u00a7\u0005\u0e11\u0e12\n\u0003"+
		"\u0000\u0000\u0e12\u0e13\u0005\u0198\u0000\u0000\u0e13\u0e1c\u0003\u014e"+
		"\u00a7\u0004\u0e14\u0e15\n\u0002\u0000\u0000\u0e15\u0e16\u0005\u0195\u0000"+
		"\u0000\u0e16\u0e1c\u0003\u014e\u00a7\u0003\u0e17\u0e18\n\u0001\u0000\u0000"+
		"\u0e18\u0e19\u0003\u015a\u00ad\u0000\u0e19\u0e1a\u0003\u014e\u00a7\u0002"+
		"\u0e1a\u0e1c\u0001\u0000\u0000\u0000\u0e1b\u0e04\u0001\u0000\u0000\u0000"+
		"\u0e1b\u0e07\u0001\u0000\u0000\u0000\u0e1b\u0e0a\u0001\u0000\u0000\u0000"+
		"\u0e1b\u0e0e\u0001\u0000\u0000\u0000\u0e1b\u0e11\u0001\u0000\u0000\u0000"+
		"\u0e1b\u0e14\u0001\u0000\u0000\u0000\u0e1b\u0e17\u0001\u0000\u0000\u0000"+
		"\u0e1c\u0e1f\u0001\u0000\u0000\u0000\u0e1d\u0e1b\u0001\u0000\u0000\u0000"+
		"\u0e1d\u0e1e\u0001\u0000\u0000\u0000\u0e1e\u014f\u0001\u0000\u0000\u0000"+
		"\u0e1f\u0e1d\u0001\u0000\u0000\u0000\u0e20\u0e21\u0007\"\u0000\u0000\u0e21"+
		"\u0151\u0001\u0000\u0000\u0000\u0e22\u0e23\u0007#\u0000\u0000\u0e23\u0153"+
		"\u0001\u0000\u0000\u0000\u0e24\u0e25\u0006\u00aa\uffff\uffff\u0000\u0e25"+
		"\u0f18\u0007$\u0000\u0000\u0e26\u0e27\u0007%\u0000\u0000\u0e27\u0e2a\u0005"+
		"\u0002\u0000\u0000\u0e28\u0e2b\u0003\u0152\u00a9\u0000\u0e29\u0e2b\u0003"+
		"\u01d0\u00e8\u0000\u0e2a\u0e28\u0001\u0000\u0000\u0000\u0e2a\u0e29\u0001"+
		"\u0000\u0000\u0000\u0e2b\u0e2c\u0001\u0000\u0000\u0000\u0e2c\u0e2d\u0005"+
		"\u0004\u0000\u0000\u0e2d\u0e2e\u0003\u014e\u00a7\u0000\u0e2e\u0e2f\u0005"+
		"\u0004\u0000\u0000\u0e2f\u0e30\u0003\u014e\u00a7\u0000\u0e30\u0e31\u0005"+
		"\u0003\u0000\u0000\u0e31\u0f18\u0001\u0000\u0000\u0000\u0e32\u0e33\u0007"+
		"&\u0000\u0000\u0e33\u0e36\u0005\u0002\u0000\u0000\u0e34\u0e37\u0003\u0152"+
		"\u00a9\u0000\u0e35\u0e37\u0003\u01d0\u00e8\u0000\u0e36\u0e34\u0001\u0000"+
		"\u0000\u0000\u0e36\u0e35\u0001\u0000\u0000\u0000\u0e37\u0e38\u0001\u0000"+
		"\u0000\u0000\u0e38\u0e39\u0005\u0004\u0000\u0000\u0e39\u0e3a\u0003\u014e"+
		"\u00a7\u0000\u0e3a\u0e3b\u0005\u0004\u0000\u0000\u0e3b\u0e3c\u0003\u014e"+
		"\u00a7\u0000\u0e3c\u0e3d\u0005\u0003\u0000\u0000\u0e3d\u0f18\u0001\u0000"+
		"\u0000\u0000\u0e3e\u0e40\u0005)\u0000\u0000\u0e3f\u0e41\u0003\u01aa\u00d5"+
		"\u0000\u0e40\u0e3f\u0001\u0000\u0000\u0000\u0e41\u0e42\u0001\u0000\u0000"+
		"\u0000\u0e42\u0e40\u0001\u0000\u0000\u0000\u0e42\u0e43\u0001\u0000\u0000"+
		"\u0000\u0e43\u0e46\u0001\u0000\u0000\u0000\u0e44\u0e45\u0005n\u0000\u0000"+
		"\u0e45\u0e47\u0003\u0140\u00a0\u0000\u0e46\u0e44\u0001\u0000\u0000\u0000"+
		"\u0e46\u0e47\u0001\u0000\u0000\u0000\u0e47\u0e48\u0001\u0000\u0000\u0000"+
		"\u0e48\u0e49\u0005p\u0000\u0000\u0e49\u0f18\u0001\u0000\u0000\u0000\u0e4a"+
		"\u0e4b\u0005)\u0000\u0000\u0e4b\u0e4d\u0003\u0140\u00a0\u0000\u0e4c\u0e4e"+
		"\u0003\u01aa\u00d5\u0000\u0e4d\u0e4c\u0001\u0000\u0000\u0000\u0e4e\u0e4f"+
		"\u0001\u0000\u0000\u0000\u0e4f\u0e4d\u0001\u0000\u0000\u0000\u0e4f\u0e50"+
		"\u0001\u0000\u0000\u0000\u0e50\u0e53\u0001\u0000\u0000\u0000\u0e51\u0e52"+
		"\u0005n\u0000\u0000\u0e52\u0e54\u0003\u0140\u00a0\u0000\u0e53\u0e51\u0001"+
		"\u0000\u0000\u0000\u0e53\u0e54\u0001\u0000\u0000\u0000\u0e54\u0e55\u0001"+
		"\u0000\u0000\u0000\u0e55\u0e56\u0005p\u0000\u0000\u0e56\u0f18\u0001\u0000"+
		"\u0000\u0000\u0e57\u0e58\u0007\'\u0000\u0000\u0e58\u0e59\u0005\u0002\u0000"+
		"\u0000\u0e59\u0e5a\u0003\u0140\u00a0\u0000\u0e5a\u0e5b\u0005\u0016\u0000"+
		"\u0000\u0e5b\u0e5c\u0003\u017a\u00bd\u0000\u0e5c\u0e5d\u0005\u0003\u0000"+
		"\u0000\u0e5d\u0f18\u0001\u0000\u0000\u0000\u0e5e\u0e5f\u0005\u013e\u0000"+
		"\u0000\u0e5f\u0e68\u0005\u0002\u0000\u0000\u0e60\u0e65\u0003\u0134\u009a"+
		"\u0000\u0e61\u0e62\u0005\u0004\u0000\u0000\u0e62\u0e64\u0003\u0134\u009a"+
		"\u0000\u0e63\u0e61\u0001\u0000\u0000\u0000\u0e64\u0e67\u0001\u0000\u0000"+
		"\u0000\u0e65\u0e63\u0001\u0000\u0000\u0000\u0e65\u0e66\u0001\u0000\u0000"+
		"\u0000\u0e66\u0e69\u0001\u0000\u0000\u0000\u0e67\u0e65\u0001\u0000\u0000"+
		"\u0000\u0e68\u0e60\u0001\u0000\u0000\u0000\u0e68\u0e69\u0001\u0000\u0000"+
		"\u0000\u0e69\u0e6a\u0001\u0000\u0000\u0000\u0e6a\u0f18\u0005\u0003\u0000"+
		"\u0000\u0e6b\u0e6c\u0005\u0084\u0000\u0000\u0e6c\u0e6d\u0005\u0002\u0000"+
		"\u0000\u0e6d\u0e70\u0003\u0140\u00a0\u0000\u0e6e\u0e6f\u0005\u009d\u0000"+
		"\u0000\u0e6f\u0e71\u0005\u00e2\u0000\u0000\u0e70\u0e6e\u0001\u0000\u0000"+
		"\u0000\u0e70\u0e71\u0001\u0000\u0000\u0000\u0e71\u0e72\u0001\u0000\u0000"+
		"\u0000\u0e72\u0e73\u0005\u0003\u0000\u0000\u0e73\u0f18\u0001\u0000\u0000"+
		"\u0000\u0e74\u0e75\u0005\u0013\u0000\u0000\u0e75\u0e76\u0005\u0002\u0000"+
		"\u0000\u0e76\u0e79\u0003\u0140\u00a0\u0000\u0e77\u0e78\u0005\u009d\u0000"+
		"\u0000\u0e78\u0e7a\u0005\u00e2\u0000\u0000\u0e79\u0e77\u0001\u0000\u0000"+
		"\u0000\u0e79\u0e7a\u0001\u0000\u0000\u0000\u0e7a\u0e7b\u0001\u0000\u0000"+
		"\u0000\u0e7b\u0e7c\u0005\u0003\u0000\u0000\u0e7c\u0f18\u0001\u0000\u0000"+
		"\u0000\u0e7d\u0e7e\u0005\u00b7\u0000\u0000\u0e7e\u0e7f\u0005\u0002\u0000"+
		"\u0000\u0e7f\u0e82\u0003\u0140\u00a0\u0000\u0e80\u0e81\u0005\u009d\u0000"+
		"\u0000\u0e81\u0e83\u0005\u00e2\u0000\u0000\u0e82\u0e80\u0001\u0000\u0000"+
		"\u0000\u0e82\u0e83\u0001\u0000\u0000\u0000\u0e83\u0e84\u0001\u0000\u0000"+
		"\u0000\u0e84\u0e85\u0005\u0003\u0000\u0000\u0e85\u0f18\u0001\u0000\u0000"+
		"\u0000\u0e86\u0e87\u0005\u00f9\u0000\u0000\u0e87\u0e88\u0005\u0002\u0000"+
		"\u0000\u0e88\u0e89\u0003\u014e\u00a7\u0000\u0e89\u0e8a\u0005\u00a0\u0000"+
		"\u0000\u0e8a\u0e8b\u0003\u014e\u00a7\u0000\u0e8b\u0e8c\u0005\u0003\u0000"+
		"\u0000\u0e8c\u0f18\u0001\u0000\u0000\u0000\u0e8d\u0f18\u0003\u0158\u00ac"+
		"\u0000\u0e8e\u0e90\u0005\u0190\u0000\u0000\u0e8f\u0e91\u0003\u00bc^\u0000"+
		"\u0e90\u0e8f\u0001\u0000\u0000\u0000\u0e90\u0e91\u0001\u0000\u0000\u0000"+
		"\u0e91\u0f18\u0001\u0000\u0000\u0000\u0e92\u0e93\u0003\u01ba\u00dd\u0000"+
		"\u0e93\u0e94\u0005\u0005\u0000\u0000\u0e94\u0e96\u0005\u0190\u0000\u0000"+
		"\u0e95\u0e97\u0003\u00bc^\u0000\u0e96\u0e95\u0001\u0000\u0000\u0000\u0e96"+
		"\u0e97\u0001\u0000\u0000\u0000\u0e97\u0f18\u0001\u0000\u0000\u0000\u0e98"+
		"\u0e99\u0005\u0002\u0000\u0000\u0e99\u0e9c\u0003\u0134\u009a\u0000\u0e9a"+
		"\u0e9b\u0005\u0004\u0000\u0000\u0e9b\u0e9d\u0003\u0134\u009a\u0000\u0e9c"+
		"\u0e9a\u0001\u0000\u0000\u0000\u0e9d\u0e9e\u0001\u0000\u0000\u0000\u0e9e"+
		"\u0e9c\u0001\u0000\u0000\u0000\u0e9e\u0e9f\u0001\u0000\u0000\u0000\u0e9f"+
		"\u0ea0\u0001\u0000\u0000\u0000\u0ea0\u0ea1\u0005\u0003\u0000\u0000\u0ea1"+
		"\u0f18\u0001\u0000\u0000\u0000\u0ea2\u0ea3\u0005\u0002\u0000\u0000\u0ea3"+
		"\u0ea4\u0003`0\u0000\u0ea4\u0ea5\u0005\u0003\u0000\u0000\u0ea5\u0f18\u0001"+
		"\u0000\u0000\u0000\u0ea6\u0ea7\u0003\u01b8\u00dc\u0000\u0ea7\u0eb3\u0005"+
		"\u0002\u0000\u0000\u0ea8\u0eaa\u0003\u00f6{\u0000\u0ea9\u0ea8\u0001\u0000"+
		"\u0000\u0000\u0ea9\u0eaa\u0001\u0000\u0000\u0000\u0eaa\u0eab\u0001\u0000"+
		"\u0000\u0000\u0eab\u0eb0\u0003\u0144\u00a2\u0000\u0eac\u0ead\u0005\u0004"+
		"\u0000\u0000\u0ead\u0eaf\u0003\u0144\u00a2\u0000\u0eae\u0eac\u0001\u0000"+
		"\u0000\u0000\u0eaf\u0eb2\u0001\u0000\u0000\u0000\u0eb0\u0eae\u0001\u0000"+
		"\u0000\u0000\u0eb0\u0eb1\u0001\u0000\u0000\u0000\u0eb1\u0eb4\u0001\u0000"+
		"\u0000\u0000\u0eb2\u0eb0\u0001\u0000\u0000\u0000\u0eb3\u0ea9\u0001\u0000"+
		"\u0000\u0000\u0eb3\u0eb4\u0001\u0000\u0000\u0000\u0eb4\u0eb5\u0001\u0000"+
		"\u0000\u0000\u0eb5\u0ec5\u0005\u0003\u0000\u0000\u0eb6\u0eb7\u0005\u017f"+
		"\u0000\u0000\u0eb7\u0eb8\u0005\u0093\u0000\u0000\u0eb8\u0eb9\u0005\u0002"+
		"\u0000\u0000\u0eb9\u0eba\u0005\u00eb\u0000\u0000\u0eba\u0ebb\u0005#\u0000"+
		"\u0000\u0ebb\u0ec0\u0003\u00a2Q\u0000\u0ebc\u0ebd\u0005\u0004\u0000\u0000"+
		"\u0ebd\u0ebf\u0003\u00a2Q\u0000\u0ebe\u0ebc\u0001\u0000\u0000\u0000\u0ebf"+
		"\u0ec2\u0001\u0000\u0000\u0000\u0ec0\u0ebe\u0001\u0000\u0000\u0000\u0ec0"+
		"\u0ec1\u0001\u0000\u0000\u0000\u0ec1\u0ec3\u0001\u0000\u0000\u0000\u0ec2"+
		"\u0ec0\u0001\u0000\u0000\u0000\u0ec3\u0ec4\u0005\u0003\u0000\u0000\u0ec4"+
		"\u0ec6\u0001\u0000\u0000\u0000\u0ec5\u0eb6\u0001\u0000\u0000\u0000\u0ec5"+
		"\u0ec6\u0001\u0000\u0000\u0000\u0ec6\u0ecd\u0001\u0000\u0000\u0000\u0ec7"+
		"\u0ec8\u0005\u0082\u0000\u0000\u0ec8\u0ec9\u0005\u0002\u0000\u0000\u0ec9"+
		"\u0eca\u0005\u017b\u0000\u0000\u0eca\u0ecb\u0003\u0148\u00a4\u0000\u0ecb"+
		"\u0ecc\u0005\u0003\u0000\u0000\u0ecc\u0ece\u0001\u0000\u0000\u0000\u0ecd"+
		"\u0ec7\u0001\u0000\u0000\u0000\u0ecd\u0ece\u0001\u0000\u0000\u0000\u0ece"+
		"\u0ed1\u0001\u0000\u0000\u0000\u0ecf\u0ed0\u0007(\u0000\u0000\u0ed0\u0ed2"+
		"\u0005\u00e2\u0000\u0000\u0ed1\u0ecf\u0001\u0000\u0000\u0000\u0ed1\u0ed2"+
		"\u0001\u0000\u0000\u0000\u0ed2\u0ed5\u0001\u0000\u0000\u0000\u0ed3\u0ed4"+
		"\u0005\u00ef\u0000\u0000\u0ed4\u0ed6\u0003\u01b0\u00d8\u0000\u0ed5\u0ed3"+
		"\u0001\u0000\u0000\u0000\u0ed5\u0ed6\u0001\u0000\u0000\u0000\u0ed6\u0f18"+
		"\u0001\u0000\u0000\u0000\u0ed7\u0ed8\u0003\u01c0\u00e0\u0000\u0ed8\u0ed9"+
		"\u0005\u019b\u0000\u0000\u0ed9\u0eda\u0003\u0140\u00a0\u0000\u0eda\u0f18"+
		"\u0001\u0000\u0000\u0000\u0edb\u0edc\u0005\u0002\u0000\u0000\u0edc\u0edf"+
		"\u0003\u01c0\u00e0\u0000\u0edd\u0ede\u0005\u0004\u0000\u0000\u0ede\u0ee0"+
		"\u0003\u01c0\u00e0\u0000\u0edf\u0edd\u0001\u0000\u0000\u0000\u0ee0\u0ee1"+
		"\u0001\u0000\u0000\u0000\u0ee1\u0edf\u0001\u0000\u0000\u0000\u0ee1\u0ee2"+
		"\u0001\u0000\u0000\u0000\u0ee2\u0ee3\u0001\u0000\u0000\u0000\u0ee3\u0ee4"+
		"\u0005\u0003\u0000\u0000\u0ee4\u0ee5\u0005\u019b\u0000\u0000\u0ee5\u0ee6"+
		"\u0003\u0140\u00a0\u0000\u0ee6\u0f18\u0001\u0000\u0000\u0000\u0ee7\u0f18"+
		"\u0003\u01c0\u00e0\u0000\u0ee8\u0ee9\u0005\u0002\u0000\u0000\u0ee9\u0eea"+
		"\u0003\u0140\u00a0\u0000\u0eea\u0eeb\u0005\u0003\u0000\u0000\u0eeb\u0f18"+
		"\u0001\u0000\u0000\u0000\u0eec\u0eed\u0005~\u0000\u0000\u0eed\u0eee\u0005"+
		"\u0002\u0000\u0000\u0eee\u0eef\u0003\u01c0\u00e0\u0000\u0eef\u0ef0\u0005"+
		"\u008c\u0000\u0000\u0ef0\u0ef1\u0003\u014e\u00a7\u0000\u0ef1\u0ef2\u0005"+
		"\u0003\u0000\u0000\u0ef2\u0f18\u0001\u0000\u0000\u0000\u0ef3\u0ef4\u0007"+
		")\u0000\u0000\u0ef4\u0ef5\u0005\u0002\u0000\u0000\u0ef5\u0ef6\u0003\u014e"+
		"\u00a7\u0000\u0ef6\u0ef7\u0007*\u0000\u0000\u0ef7\u0efa\u0003\u014e\u00a7"+
		"\u0000\u0ef8\u0ef9\u0007+\u0000\u0000\u0ef9\u0efb\u0003\u014e\u00a7\u0000"+
		"\u0efa\u0ef8\u0001\u0000\u0000\u0000\u0efa\u0efb\u0001\u0000\u0000\u0000"+
		"\u0efb\u0efc\u0001\u0000\u0000\u0000\u0efc\u0efd\u0005\u0003\u0000\u0000"+
		"\u0efd\u0f18\u0001\u0000\u0000\u0000\u0efe\u0eff\u0005\u015b\u0000\u0000"+
		"\u0eff\u0f01\u0005\u0002\u0000\u0000\u0f00\u0f02\u0007,\u0000\u0000\u0f01"+
		"\u0f00\u0001\u0000\u0000\u0000\u0f01\u0f02\u0001\u0000\u0000\u0000\u0f02"+
		"\u0f04\u0001\u0000\u0000\u0000\u0f03\u0f05\u0003\u014e\u00a7\u0000\u0f04"+
		"\u0f03\u0001\u0000\u0000\u0000\u0f04\u0f05\u0001\u0000\u0000\u0000\u0f05"+
		"\u0f06\u0001\u0000\u0000\u0000\u0f06\u0f07\u0005\u008c\u0000\u0000\u0f07"+
		"\u0f08\u0003\u014e\u00a7\u0000\u0f08\u0f09\u0005\u0003\u0000\u0000\u0f09"+
		"\u0f18\u0001\u0000\u0000\u0000\u0f0a\u0f0b\u0005\u00f1\u0000\u0000\u0f0b"+
		"\u0f0c\u0005\u0002\u0000\u0000\u0f0c\u0f0d\u0003\u014e\u00a7\u0000\u0f0d"+
		"\u0f0e\u0005\u00f8\u0000\u0000\u0f0e\u0f0f\u0003\u014e\u00a7\u0000\u0f0f"+
		"\u0f10\u0005\u008c\u0000\u0000\u0f10\u0f13\u0003\u014e\u00a7\u0000\u0f11"+
		"\u0f12\u0005\u0087\u0000\u0000\u0f12\u0f14\u0003\u014e\u00a7\u0000\u0f13"+
		"\u0f11\u0001\u0000\u0000\u0000\u0f13\u0f14\u0001\u0000\u0000\u0000\u0f14"+
		"\u0f15\u0001\u0000\u0000\u0000\u0f15\u0f16\u0005\u0003\u0000\u0000\u0f16"+
		"\u0f18\u0001\u0000\u0000\u0000\u0f17\u0e24\u0001\u0000\u0000\u0000\u0f17"+
		"\u0e26\u0001\u0000\u0000\u0000\u0f17\u0e32\u0001\u0000\u0000\u0000\u0f17"+
		"\u0e3e\u0001\u0000\u0000\u0000\u0f17\u0e4a\u0001\u0000\u0000\u0000\u0f17"+
		"\u0e57\u0001\u0000\u0000\u0000\u0f17\u0e5e\u0001\u0000\u0000\u0000\u0f17"+
		"\u0e6b\u0001\u0000\u0000\u0000\u0f17\u0e74\u0001\u0000\u0000\u0000\u0f17"+
		"\u0e7d\u0001\u0000\u0000\u0000\u0f17\u0e86\u0001\u0000\u0000\u0000\u0f17"+
		"\u0e8d\u0001\u0000\u0000\u0000\u0f17\u0e8e\u0001\u0000\u0000\u0000\u0f17"+
		"\u0e92\u0001\u0000\u0000\u0000\u0f17\u0e98\u0001\u0000\u0000\u0000\u0f17"+
		"\u0ea2\u0001\u0000\u0000\u0000\u0f17\u0ea6\u0001\u0000\u0000\u0000\u0f17"+
		"\u0ed7\u0001\u0000\u0000\u0000\u0f17\u0edb\u0001\u0000\u0000\u0000\u0f17"+
		"\u0ee7\u0001\u0000\u0000\u0000\u0f17\u0ee8\u0001\u0000\u0000\u0000\u0f17"+
		"\u0eec\u0001\u0000\u0000\u0000\u0f17\u0ef3\u0001\u0000\u0000\u0000\u0f17"+
		"\u0efe\u0001\u0000\u0000\u0000\u0f17\u0f0a\u0001\u0000\u0000\u0000\u0f18"+
		"\u0f28\u0001\u0000\u0000\u0000\u0f19\u0f1a\n\u0017\u0000\u0000\u0f1a\u0f27"+
		"\u0003\u0176\u00bb\u0000\u0f1b\u0f1c\n\u0016\u0000\u0000\u0f1c\u0f1d\u0005"+
		"\u019a\u0000\u0000\u0f1d\u0f27\u0003\u017a\u00bd\u0000\u0f1e\u0f1f\n\b"+
		"\u0000\u0000\u0f1f\u0f20\u0005\u0006\u0000\u0000\u0f20\u0f21\u0003\u014e"+
		"\u00a7\u0000\u0f21\u0f22\u0005\u0007\u0000\u0000\u0f22\u0f27\u0001\u0000"+
		"\u0000\u0000\u0f23\u0f24\n\u0006\u0000\u0000\u0f24\u0f25\u0005\u0005\u0000"+
		"\u0000\u0f25\u0f27\u0003\u01c0\u00e0\u0000\u0f26\u0f19\u0001\u0000\u0000"+
		"\u0000\u0f26\u0f1b\u0001\u0000\u0000\u0000\u0f26\u0f1e\u0001\u0000\u0000"+
		"\u0000\u0f26\u0f23\u0001\u0000\u0000\u0000\u0f27\u0f2a\u0001\u0000\u0000"+
		"\u0000\u0f28\u0f26\u0001\u0000\u0000\u0000\u0f28\u0f29\u0001\u0000\u0000"+
		"\u0000\u0f29\u0155\u0001\u0000\u0000\u0000\u0f2a\u0f28\u0001\u0000\u0000"+
		"\u0000\u0f2b\u0f33\u0005R\u0000\u0000\u0f2c\u0f33\u0005\u014e\u0000\u0000"+
		"\u0f2d\u0f33\u0005\u014f\u0000\u0000\u0f2e\u0f33\u0005\u0150\u0000\u0000"+
		"\u0f2f\u0f33\u0005\u00ab\u0000\u0000\u0f30\u0f33\u0005\u0097\u0000\u0000"+
		"\u0f31\u0f33\u0003\u01c0\u00e0\u0000\u0f32\u0f2b\u0001\u0000\u0000\u0000"+
		"\u0f32\u0f2c\u0001\u0000\u0000\u0000\u0f32\u0f2d\u0001\u0000\u0000\u0000"+
		"\u0f32\u0f2e\u0001\u0000\u0000\u0000\u0f32\u0f2f\u0001\u0000\u0000\u0000"+
		"\u0f32\u0f30\u0001\u0000\u0000\u0000\u0f32\u0f31\u0001\u0000\u0000\u0000"+
		"\u0f33\u0157\u0001\u0000\u0000\u0000\u0f34\u0f44\u0005\u00e1\u0000\u0000"+
		"\u0f35\u0f44\u0005\u019f\u0000\u0000\u0f36\u0f37\u0005\u0199\u0000\u0000"+
		"\u0f37\u0f44\u0003\u01c0\u00e0\u0000\u0f38\u0f44\u0003\u0162\u00b1\u0000"+
		"\u0f39\u0f3a\u0003\u0156\u00ab\u0000\u0f3a\u0f3b\u0003\u01d0\u00e8\u0000"+
		"\u0f3b\u0f44\u0001\u0000\u0000\u0000\u0f3c\u0f44\u0003\u01c8\u00e4\u0000"+
		"\u0f3d\u0f44\u0003\u0160\u00b0\u0000\u0f3e\u0f40\u0003\u01d0\u00e8\u0000"+
		"\u0f3f\u0f3e\u0001\u0000\u0000\u0000\u0f40\u0f41\u0001\u0000\u0000\u0000"+
		"\u0f41\u0f3f\u0001\u0000\u0000\u0000\u0f41\u0f42\u0001\u0000\u0000\u0000"+
		"\u0f42\u0f44\u0001\u0000\u0000\u0000\u0f43\u0f34\u0001\u0000\u0000\u0000"+
		"\u0f43\u0f35\u0001\u0000\u0000\u0000\u0f43\u0f36\u0001\u0000\u0000\u0000"+
		"\u0f43\u0f38\u0001\u0000\u0000\u0000\u0f43\u0f39\u0001\u0000\u0000\u0000"+
		"\u0f43\u0f3c\u0001\u0000\u0000\u0000\u0f43\u0f3d\u0001\u0000\u0000\u0000"+
		"\u0f43\u0f3f\u0001\u0000\u0000\u0000\u0f44\u0159\u0001\u0000\u0000\u0000"+
		"\u0f45\u0f46\u0007-\u0000\u0000\u0f46\u015b\u0001\u0000\u0000\u0000\u0f47"+
		"\u0f48\u0007.\u0000\u0000\u0f48\u015d\u0001\u0000\u0000\u0000\u0f49\u0f4a"+
		"\u0007/\u0000\u0000\u0f4a\u015f\u0001\u0000\u0000\u0000\u0f4b\u0f4c\u0007"+
		"0\u0000\u0000\u0f4c\u0161\u0001\u0000\u0000\u0000\u0f4d\u0f50\u0005\u00ab"+
		"\u0000\u0000\u0f4e\u0f51\u0003\u0164\u00b2\u0000\u0f4f\u0f51\u0003\u0168"+
		"\u00b4\u0000\u0f50\u0f4e\u0001\u0000\u0000\u0000\u0f50\u0f4f\u0001\u0000"+
		"\u0000\u0000\u0f51\u0163\u0001\u0000\u0000\u0000\u0f52\u0f54\u0003\u0166"+
		"\u00b3\u0000\u0f53\u0f55\u0003\u016a\u00b5\u0000\u0f54\u0f53\u0001\u0000"+
		"\u0000\u0000\u0f54\u0f55\u0001\u0000\u0000\u0000\u0f55\u0165\u0001\u0000"+
		"\u0000\u0000\u0f56\u0f57\u0003\u016c\u00b6\u0000\u0f57\u0f58\u0003\u016e"+
		"\u00b7\u0000\u0f58\u0f5a\u0001\u0000\u0000\u0000\u0f59\u0f56\u0001\u0000"+
		"\u0000\u0000\u0f5a\u0f5b\u0001\u0000\u0000\u0000\u0f5b\u0f59\u0001\u0000"+
		"\u0000\u0000\u0f5b\u0f5c\u0001\u0000\u0000\u0000\u0f5c\u0167\u0001\u0000"+
		"\u0000\u0000\u0f5d\u0f60\u0003\u016a\u00b5\u0000\u0f5e\u0f61\u0003\u0166"+
		"\u00b3\u0000\u0f5f\u0f61\u0003\u016a\u00b5\u0000\u0f60\u0f5e\u0001\u0000"+
		"\u0000\u0000\u0f60\u0f5f\u0001\u0000\u0000\u0000\u0f60\u0f61\u0001\u0000"+
		"\u0000\u0000\u0f61\u0169\u0001\u0000\u0000\u0000\u0f62\u0f63\u0003\u016c"+
		"\u00b6\u0000\u0f63\u0f64\u0003\u0170\u00b8\u0000\u0f64\u0f65\u0005\u0154"+
		"\u0000\u0000\u0f65\u0f66\u0003\u0170\u00b8\u0000\u0f66\u016b\u0001\u0000"+
		"\u0000\u0000\u0f67\u0f69\u00071\u0000\u0000\u0f68\u0f67\u0001\u0000\u0000"+
		"\u0000\u0f68\u0f69\u0001\u0000\u0000\u0000\u0f69\u0f6d\u0001\u0000\u0000"+
		"\u0000\u0f6a\u0f6e\u0005\u01a5\u0000\u0000\u0f6b\u0f6e\u0005\u01a7\u0000"+
		"\u0000\u0f6c\u0f6e\u0003\u01d0\u00e8\u0000\u0f6d\u0f6a\u0001\u0000\u0000"+
		"\u0000\u0f6d\u0f6b\u0001\u0000\u0000\u0000\u0f6d\u0f6c\u0001\u0000\u0000"+
		"\u0000\u0f6e\u016d\u0001\u0000\u0000\u0000\u0f6f\u0f70\u00072\u0000\u0000"+
		"\u0f70\u016f\u0001\u0000\u0000\u0000\u0f71\u0f72\u00073\u0000\u0000\u0f72"+
		"\u0171\u0001\u0000\u0000\u0000\u0f73\u0f77\u0005\u0084\u0000\u0000\u0f74"+
		"\u0f75\u0005\n\u0000\u0000\u0f75\u0f77\u0003\u01bc\u00de\u0000\u0f76\u0f73"+
		"\u0001\u0000\u0000\u0000\u0f76\u0f74\u0001\u0000\u0000\u0000\u0f77\u0173"+
		"\u0001\u0000\u0000\u0000\u0f78\u0f79\u0005]\u0000\u0000\u0f79\u0f7a\u0005"+
		"6\u0000\u0000\u0f7a\u0f7b\u0003\u01c0\u00e0\u0000\u0f7b\u0175\u0001\u0000"+
		"\u0000\u0000\u0f7c\u0f7d\u00055\u0000\u0000\u0f7d\u0f7e\u0003\u012a\u0095"+
		"\u0000\u0f7e\u0177\u0001\u0000\u0000\u0000\u0f7f\u0fa2\u0005\u001f\u0000"+
		"\u0000\u0f80\u0fa2\u0005\u0153\u0000\u0000\u0f81\u0fa2\u0005$\u0000\u0000"+
		"\u0f82\u0fa2\u0005\u0130\u0000\u0000\u0f83\u0fa2\u0005\u012c\u0000\u0000"+
		"\u0f84\u0fa2\u0005\u00ac\u0000\u0000\u0f85\u0fa2\u0005\u00ad\u0000\u0000"+
		"\u0f86\u0fa2\u0005\u001c\u0000\u0000\u0f87\u0fa2\u0005\u00c8\u0000\u0000"+
		"\u0f88\u0fa2\u0005\u0085\u0000\u0000\u0f89\u0fa2\u0005\u0103\u0000\u0000"+
		"\u0f8a\u0fa2\u0005l\u0000\u0000\u0f8b\u0fa2\u0005R\u0000\u0000\u0f8c\u0fa2"+
		"\u0005\u014e\u0000\u0000\u0f8d\u0fa2\u0005\u0150\u0000\u0000\u0f8e\u0fa2"+
		"\u0005\u014f\u0000\u0000\u0f8f\u0f91\u0005\u013d\u0000\u0000\u0f90\u0f92"+
		"\u0003\u0176\u00bb\u0000\u0f91\u0f90\u0001\u0000\u0000\u0000\u0f91\u0f92"+
		"\u0001\u0000\u0000\u0000\u0f92\u0fa2\u0001\u0000\u0000\u0000\u0f93\u0fa2"+
		"\u0005/\u0000\u0000\u0f94\u0fa2\u0005.\u0000\u0000\u0f95\u0fa2\u0005\u0170"+
		"\u0000\u0000\u0f96\u0fa2\u0005\u001d\u0000\u0000\u0f97\u0fa2\u0005[\u0000"+
		"\u0000\u0f98\u0fa2\u0005Z\u0000\u0000\u0f99\u0fa2\u0005\u00e3\u0000\u0000"+
		"\u0f9a\u0fa2\u0005\u0177\u0000\u0000\u0f9b\u0fa2\u0005\u00ab\u0000\u0000"+
		"\u0f9c\u0fa2\u0005\u0173\u0000\u0000\u0f9d\u0fa2\u0005\u0015\u0000\u0000"+
		"\u0f9e\u0fa2\u0005\u013e\u0000\u0000\u0f9f\u0fa2\u0005\u00cb\u0000\u0000"+
		"\u0fa0\u0fa2\u0003\u01c0\u00e0\u0000\u0fa1\u0f7f\u0001\u0000\u0000\u0000"+
		"\u0fa1\u0f80\u0001\u0000\u0000\u0000\u0fa1\u0f81\u0001\u0000\u0000\u0000"+
		"\u0fa1\u0f82\u0001\u0000\u0000\u0000\u0fa1\u0f83\u0001\u0000\u0000\u0000"+
		"\u0fa1\u0f84\u0001\u0000\u0000\u0000\u0fa1\u0f85\u0001\u0000\u0000\u0000"+
		"\u0fa1\u0f86\u0001\u0000\u0000\u0000\u0fa1\u0f87\u0001\u0000\u0000\u0000"+
		"\u0fa1\u0f88\u0001\u0000\u0000\u0000\u0fa1\u0f89\u0001\u0000\u0000\u0000"+
		"\u0fa1\u0f8a\u0001\u0000\u0000\u0000\u0fa1\u0f8b\u0001\u0000\u0000\u0000"+
		"\u0fa1\u0f8c\u0001\u0000\u0000\u0000\u0fa1\u0f8d\u0001\u0000\u0000\u0000"+
		"\u0fa1\u0f8e\u0001\u0000\u0000\u0000\u0fa1\u0f8f\u0001\u0000\u0000\u0000"+
		"\u0fa1\u0f93\u0001\u0000\u0000\u0000\u0fa1\u0f94\u0001\u0000\u0000\u0000"+
		"\u0fa1\u0f95\u0001\u0000\u0000\u0000\u0fa1\u0f96\u0001\u0000\u0000\u0000"+
		"\u0fa1\u0f97\u0001\u0000\u0000\u0000\u0fa1\u0f98\u0001\u0000\u0000\u0000"+
		"\u0fa1\u0f99\u0001\u0000\u0000\u0000\u0fa1\u0f9a\u0001\u0000\u0000\u0000"+
		"\u0fa1\u0f9b\u0001\u0000\u0000\u0000\u0fa1\u0f9c\u0001\u0000\u0000\u0000"+
		"\u0fa1\u0f9d\u0001\u0000\u0000\u0000\u0fa1\u0f9e\u0001\u0000\u0000\u0000"+
		"\u0fa1\u0f9f\u0001\u0000\u0000\u0000\u0fa1\u0fa0\u0001\u0000\u0000\u0000"+
		"\u0fa2\u0179\u0001\u0000\u0000\u0000\u0fa3\u0fa4\u0005\u0015\u0000\u0000"+
		"\u0fa4\u0fa5\u0005\u0187\u0000\u0000\u0fa5\u0fa6\u0003\u017a\u00bd\u0000"+
		"\u0fa6\u0fa7\u0005\u0189\u0000\u0000\u0fa7\u0fd2\u0001\u0000\u0000\u0000"+
		"\u0fa8\u0fa9\u0005\u00cb\u0000\u0000\u0fa9\u0faa\u0005\u0187\u0000\u0000"+
		"\u0faa\u0fab\u0003\u017a\u00bd\u0000\u0fab\u0fac\u0005\u0004\u0000\u0000"+
		"\u0fac\u0fad\u0003\u017a\u00bd\u0000\u0fad\u0fae\u0005\u0189\u0000\u0000"+
		"\u0fae\u0fd2\u0001\u0000\u0000\u0000\u0faf\u0fb6\u0005\u013e\u0000\u0000"+
		"\u0fb0\u0fb2\u0005\u0187\u0000\u0000\u0fb1\u0fb3\u0003\u0198\u00cc\u0000"+
		"\u0fb2\u0fb1\u0001\u0000\u0000\u0000\u0fb2\u0fb3\u0001\u0000\u0000\u0000"+
		"\u0fb3\u0fb4\u0001\u0000\u0000\u0000\u0fb4\u0fb7\u0005\u0189\u0000\u0000"+
		"\u0fb5\u0fb7\u0005\u0185\u0000\u0000\u0fb6\u0fb0\u0001\u0000\u0000\u0000"+
		"\u0fb6\u0fb5\u0001\u0000\u0000\u0000\u0fb7\u0fd2\u0001\u0000\u0000\u0000"+
		"\u0fb8\u0fb9\u0005\u00ab\u0000\u0000\u0fb9\u0fbc\u00074\u0000\u0000\u0fba"+
		"\u0fbb\u0005\u0154\u0000\u0000\u0fbb\u0fbd\u0005\u00d5\u0000\u0000\u0fbc"+
		"\u0fba\u0001\u0000\u0000\u0000\u0fbc\u0fbd\u0001\u0000\u0000\u0000\u0fbd"+
		"\u0fd2\u0001\u0000\u0000\u0000\u0fbe\u0fbf\u0005\u00ab\u0000\u0000\u0fbf"+
		"\u0fc2\u00075\u0000\u0000\u0fc0\u0fc1\u0005\u0154\u0000\u0000\u0fc1\u0fc3"+
		"\u00076\u0000\u0000\u0fc2\u0fc0\u0001\u0000\u0000\u0000\u0fc2\u0fc3\u0001"+
		"\u0000\u0000\u0000\u0fc3\u0fd2\u0001\u0000\u0000\u0000\u0fc4\u0fcf\u0003"+
		"\u0178\u00bc\u0000\u0fc5\u0fc6\u0005\u0002\u0000\u0000\u0fc6\u0fcb\u0005"+
		"\u01a5\u0000\u0000\u0fc7\u0fc8\u0005\u0004\u0000\u0000\u0fc8\u0fca\u0005"+
		"\u01a5\u0000\u0000\u0fc9\u0fc7\u0001\u0000\u0000\u0000\u0fca\u0fcd\u0001"+
		"\u0000\u0000\u0000\u0fcb\u0fc9\u0001\u0000\u0000\u0000\u0fcb\u0fcc\u0001"+
		"\u0000\u0000\u0000\u0fcc\u0fce\u0001\u0000\u0000\u0000\u0fcd\u0fcb\u0001"+
		"\u0000\u0000\u0000\u0fce\u0fd0\u0005\u0003\u0000\u0000\u0fcf\u0fc5\u0001"+
		"\u0000\u0000\u0000\u0fcf\u0fd0\u0001\u0000\u0000\u0000\u0fd0\u0fd2\u0001"+
		"\u0000\u0000\u0000\u0fd1\u0fa3\u0001\u0000\u0000\u0000\u0fd1\u0fa8\u0001"+
		"\u0000\u0000\u0000\u0fd1\u0faf\u0001\u0000\u0000\u0000\u0fd1\u0fb8\u0001"+
		"\u0000\u0000\u0000\u0fd1\u0fbe\u0001\u0000\u0000\u0000\u0fd1\u0fc4\u0001"+
		"\u0000\u0000\u0000\u0fd2\u017b\u0001\u0000\u0000\u0000\u0fd3\u0fd8\u0003"+
		"\u017e\u00bf\u0000\u0fd4\u0fd5\u0005\u0004\u0000\u0000\u0fd5\u0fd7\u0003"+
		"\u017e\u00bf\u0000\u0fd6\u0fd4\u0001\u0000\u0000\u0000\u0fd7\u0fda\u0001"+
		"\u0000\u0000\u0000\u0fd8\u0fd6\u0001\u0000\u0000\u0000\u0fd8\u0fd9\u0001"+
		"\u0000\u0000\u0000\u0fd9\u017d\u0001\u0000\u0000\u0000\u0fda\u0fd8\u0001"+
		"\u0000\u0000\u0000\u0fdb\u0fdc\u0003\u012a\u0095\u0000\u0fdc\u0fe0\u0003"+
		"\u017a\u00bd\u0000\u0fdd\u0fdf\u0003\u0180\u00c0\u0000\u0fde\u0fdd\u0001"+
		"\u0000\u0000\u0000\u0fdf\u0fe2\u0001\u0000\u0000\u0000\u0fe0\u0fde\u0001"+
		"\u0000\u0000\u0000\u0fe0\u0fe1\u0001\u0000\u0000\u0000\u0fe1\u017f\u0001"+
		"\u0000\u0000\u0000\u0fe2\u0fe0\u0001\u0000\u0000\u0000\u0fe3\u0fe4\u0003"+
		"\u014c\u00a6\u0000\u0fe4\u0fe5\u0005\u00e1\u0000\u0000\u0fe5\u0fea\u0001"+
		"\u0000\u0000\u0000\u0fe6\u0fea\u0003\u0182\u00c1\u0000\u0fe7\u0fea\u0003"+
		"\\.\u0000\u0fe8\u0fea\u0003\u0172\u00b9\u0000\u0fe9\u0fe3\u0001\u0000"+
		"\u0000\u0000\u0fe9\u0fe6\u0001\u0000\u0000\u0000\u0fe9\u0fe7\u0001\u0000"+
		"\u0000\u0000\u0fe9\u0fe8\u0001\u0000\u0000\u0000\u0fea\u0181\u0001\u0000"+
		"\u0000\u0000\u0feb\u0fec\u0005]\u0000\u0000\u0fec\u0fed\u0003\u0140\u00a0"+
		"\u0000\u0fed\u0183\u0001\u0000\u0000\u0000\u0fee\u0fef\u00077\u0000\u0000"+
		"\u0fef\u0ff0\u0003\u0140\u00a0\u0000\u0ff0\u0185\u0001\u0000\u0000\u0000"+
		"\u0ff1\u0ff6\u0003\u0188\u00c4\u0000\u0ff2\u0ff3\u0005\u0004\u0000\u0000"+
		"\u0ff3\u0ff5\u0003\u0188\u00c4\u0000\u0ff4\u0ff2\u0001\u0000\u0000\u0000"+
		"\u0ff5\u0ff8\u0001\u0000\u0000\u0000\u0ff6\u0ff4\u0001\u0000\u0000\u0000"+
		"\u0ff6\u0ff7\u0001\u0000\u0000\u0000\u0ff7\u0187\u0001\u0000\u0000\u0000"+
		"\u0ff8\u0ff6\u0001\u0000\u0000\u0000\u0ff9\u0ffa\u0003\u01bc\u00de\u0000"+
		"\u0ffa\u0ffe\u0003\u017a\u00bd\u0000\u0ffb\u0ffc\u0003\u014c\u00a6\u0000"+
		"\u0ffc\u0ffd\u0005\u00e1\u0000\u0000\u0ffd\u0fff\u0001\u0000\u0000\u0000"+
		"\u0ffe\u0ffb\u0001\u0000\u0000\u0000\u0ffe\u0fff\u0001\u0000\u0000\u0000"+
		"\u0fff\u1001\u0001\u0000\u0000\u0000\u1000\u1002\u0003\\.\u0000\u1001"+
		"\u1000\u0001\u0000\u0000\u0000\u1001\u1002\u0001\u0000\u0000\u0000\u1002"+
		"\u0189\u0001\u0000\u0000\u0000\u1003\u1008\u0003\u018c\u00c6\u0000\u1004"+
		"\u1005\u0005\u0004\u0000\u0000\u1005\u1007\u0003\u018c\u00c6\u0000\u1006"+
		"\u1004\u0001\u0000\u0000\u0000\u1007\u100a\u0001\u0000\u0000\u0000\u1008"+
		"\u1006\u0001\u0000\u0000\u0000\u1008\u1009\u0001\u0000\u0000\u0000\u1009"+
		"\u018b\u0001\u0000\u0000\u0000\u100a\u1008\u0001\u0000\u0000\u0000\u100b"+
		"\u100c\u0003\u01bc\u00de\u0000\u100c\u1010\u0003\u017a\u00bd\u0000\u100d"+
		"\u100f\u0003\u018e\u00c7\u0000\u100e\u100d\u0001\u0000\u0000\u0000\u100f"+
		"\u1012\u0001\u0000\u0000\u0000\u1010\u100e\u0001\u0000\u0000\u0000\u1010"+
		"\u1011\u0001\u0000\u0000\u0000\u1011\u018d\u0001\u0000\u0000\u0000\u1012"+
		"\u1010\u0001\u0000\u0000\u0000\u1013\u1014\u0003\u014c\u00a6\u0000\u1014"+
		"\u1015\u0005\u00e1\u0000\u0000\u1015\u101a\u0001\u0000\u0000\u0000\u1016"+
		"\u101a\u0003\u0182\u00c1\u0000\u1017\u101a\u0003\u0190\u00c8\u0000\u1018"+
		"\u101a\u0003\\.\u0000\u1019\u1013\u0001\u0000\u0000\u0000\u1019\u1016"+
		"\u0001\u0000\u0000\u0000\u1019\u1017\u0001\u0000\u0000\u0000\u1019\u1018"+
		"\u0001\u0000\u0000\u0000\u101a\u018f\u0001\u0000\u0000\u0000\u101b\u101c"+
		"\u0005\u0090\u0000\u0000\u101c\u101d\u0005\u000e\u0000\u0000\u101d\u101e"+
		"\u0005\u0016\u0000\u0000\u101e\u101f\u0005\u0002\u0000\u0000\u101f\u1020"+
		"\u0003\u0140\u00a0\u0000\u1020\u1021\u0005\u0003\u0000\u0000\u1021\u102e"+
		"\u0001\u0000\u0000\u0000\u1022\u1026\u0005\u0090\u0000\u0000\u1023\u1027"+
		"\u0005\u000e\u0000\u0000\u1024\u1025\u0005#\u0000\u0000\u1025\u1027\u0005"+
		"]\u0000\u0000\u1026\u1023\u0001\u0000\u0000\u0000\u1026\u1024\u0001\u0000"+
		"\u0000\u0000\u1027\u1028\u0001\u0000\u0000\u0000\u1028\u1029\u0005\u0016"+
		"\u0000\u0000\u1029\u102b\u0005\u009b\u0000\u0000\u102a\u102c\u0003\u0192"+
		"\u00c9\u0000\u102b\u102a\u0001\u0000\u0000\u0000\u102b\u102c\u0001\u0000"+
		"\u0000\u0000\u102c\u102e\u0001\u0000\u0000\u0000\u102d\u101b\u0001\u0000"+
		"\u0000\u0000\u102d\u1022\u0001\u0000\u0000\u0000\u102e\u0191\u0001\u0000"+
		"\u0000\u0000\u102f\u1033\u0005\u0002\u0000\u0000\u1030\u1032\u0003\u0194"+
		"\u00ca\u0000\u1031\u1030\u0001\u0000\u0000\u0000\u1032\u1035\u0001\u0000"+
		"\u0000\u0000\u1033\u1031\u0001\u0000\u0000\u0000\u1033\u1034\u0001\u0000"+
		"\u0000\u0000\u1034\u1036\u0001\u0000\u0000\u0000\u1035\u1033\u0001\u0000"+
		"\u0000\u0000\u1036\u1037\u0005\u0003\u0000\u0000\u1037\u0193\u0001\u0000"+
		"\u0000\u0000\u1038\u1039\u0005\u0139\u0000\u0000\u1039\u103a\u0005\u017e"+
		"\u0000\u0000\u103a\u103f\u0003\u0196\u00cb\u0000\u103b\u103c\u0005\u00a2"+
		"\u0000\u0000\u103c\u103d\u0005#\u0000\u0000\u103d\u103f\u0003\u0196\u00cb"+
		"\u0000\u103e\u1038\u0001\u0000\u0000\u0000\u103e\u103b\u0001\u0000\u0000"+
		"\u0000\u103f\u0195\u0001\u0000\u0000\u0000\u1040\u1042\u0005\u018f\u0000"+
		"\u0000\u1041\u1040\u0001\u0000\u0000\u0000\u1041\u1042\u0001\u0000\u0000"+
		"\u0000\u1042\u1043\u0001\u0000\u0000\u0000\u1043\u1049\u0005\u01a5\u0000"+
		"\u0000\u1044\u1046\u0005\u018f\u0000\u0000\u1045\u1044\u0001\u0000\u0000"+
		"\u0000\u1045\u1046\u0001\u0000\u0000\u0000\u1046\u1047\u0001\u0000\u0000"+
		"\u0000\u1047\u1049\u0005\u01a2\u0000\u0000\u1048\u1041\u0001\u0000\u0000"+
		"\u0000\u1048\u1045\u0001\u0000\u0000\u0000\u1049\u0197\u0001\u0000\u0000"+
		"\u0000\u104a\u104f\u0003\u019a\u00cd\u0000\u104b\u104c\u0005\u0004\u0000"+
		"\u0000\u104c\u104e\u0003\u019a\u00cd\u0000\u104d\u104b\u0001\u0000\u0000"+
		"\u0000\u104e\u1051\u0001\u0000\u0000\u0000\u104f\u104d\u0001\u0000\u0000"+
		"\u0000\u104f\u1050\u0001\u0000\u0000\u0000\u1050\u0199\u0001\u0000\u0000"+
		"\u0000\u1051\u104f\u0001\u0000\u0000\u0000\u1052\u1054\u0003\u01bc\u00de"+
		"\u0000\u1053\u1055\u0005\u0199\u0000\u0000\u1054\u1053\u0001\u0000\u0000"+
		"\u0000\u1054\u1055\u0001\u0000\u0000\u0000\u1055\u1056\u0001\u0000\u0000"+
		"\u0000\u1056\u105a\u0003\u017a\u00bd\u0000\u1057\u1058\u0003\u014c\u00a6"+
		"\u0000\u1058\u1059\u0005\u00e1\u0000\u0000\u1059\u105b\u0001\u0000\u0000"+
		"\u0000\u105a\u1057\u0001\u0000\u0000\u0000\u105a\u105b\u0001\u0000\u0000"+
		"\u0000\u105b\u105d\u0001\u0000\u0000\u0000\u105c\u105e\u0003\\.\u0000"+
		"\u105d\u105c\u0001\u0000\u0000\u0000\u105d\u105e\u0001\u0000\u0000\u0000"+
		"\u105e\u019b\u0001\u0000\u0000\u0000\u105f\u1067\u0003\u019e\u00cf\u0000"+
		"\u1060\u1067\u0003\u01a0\u00d0\u0000\u1061\u1067\u0003\u01a2\u00d1\u0000"+
		"\u1062\u1067\u0003\u01a4\u00d2\u0000\u1063\u1067\u0003\u01a6\u00d3\u0000"+
		"\u1064\u1067\u0003\\.\u0000\u1065\u1067\u0003\u01a8\u00d4\u0000\u1066"+
		"\u105f\u0001\u0000\u0000\u0000\u1066\u1060\u0001\u0000\u0000\u0000\u1066"+
		"\u1061\u0001\u0000\u0000\u0000\u1066\u1062\u0001\u0000\u0000\u0000\u1066"+
		"\u1063\u0001\u0000\u0000\u0000\u1066\u1064\u0001\u0000\u0000\u0000\u1066"+
		"\u1065\u0001\u0000\u0000\u0000\u1067\u106a\u0001\u0000\u0000\u0000\u1068"+
		"\u1066\u0001\u0000\u0000\u0000\u1068\u1069\u0001\u0000\u0000\u0000\u1069"+
		"\u019d\u0001\u0000\u0000\u0000\u106a\u1068\u0001\u0000\u0000\u0000\u106b"+
		"\u106c\u0005\u00b6\u0000\u0000\u106c\u106d\u00078\u0000\u0000\u106d\u019f"+
		"\u0001\u0000\u0000\u0000\u106e\u106f\u0005\u0135\u0000\u0000\u106f\u1070"+
		"\u0003\u01bc\u00de\u0000\u1070\u01a1\u0001\u0000\u0000\u0000\u1071\u1076"+
		"\u0005d\u0000\u0000\u1072\u1073\u0003\u014c\u00a6\u0000\u1073\u1074\u0005"+
		"d\u0000\u0000\u1074\u1076\u0001\u0000\u0000\u0000\u1075\u1071\u0001\u0000"+
		"\u0000\u0000\u1075\u1072\u0001\u0000\u0000\u0000\u1076\u01a3\u0001\u0000"+
		"\u0000\u0000\u1077\u1078\u0005\u00de\u0000\u0000\u1078\u1082\u0005\u0136"+
		"\u0000\u0000\u1079\u107a\u0005C\u0000\u0000\u107a\u1082\u0005\u0136\u0000"+
		"\u0000\u107b\u107c\u0005\u0102\u0000\u0000\u107c\u107d\u0005\u0136\u0000"+
		"\u0000\u107d\u1082\u0005Q\u0000\u0000\u107e\u107f\u0005\u00d4\u0000\u0000"+
		"\u107f\u1080\u0005\u0136\u0000\u0000\u1080\u1082\u0005Q\u0000\u0000\u1081"+
		"\u1077\u0001\u0000\u0000\u0000\u1081\u1079\u0001\u0000\u0000\u0000\u1081"+
		"\u107b\u0001\u0000\u0000\u0000\u1081\u107e\u0001\u0000\u0000\u0000\u1082"+
		"\u01a5\u0001\u0000\u0000\u0000\u1083\u1084\u0005\u0114\u0000\u0000\u1084"+
		"\u1085\u0005\u00e1\u0000\u0000\u1085\u1086\u0005\u00e6\u0000\u0000\u1086"+
		"\u1087\u0005\u00e1\u0000\u0000\u1087\u108d\u0005\u00a7\u0000\u0000\u1088"+
		"\u1089\u0005\'\u0000\u0000\u1089\u108a\u0005\u00e6\u0000\u0000\u108a\u108b"+
		"\u0005\u00e1\u0000\u0000\u108b\u108d\u0005\u00a7\u0000\u0000\u108c\u1083"+
		"\u0001\u0000\u0000\u0000\u108c\u1088\u0001\u0000\u0000\u0000\u108d\u01a7"+
		"\u0001\u0000\u0000\u0000\u108e\u108f\u0005\u0136\u0000\u0000\u108f\u1090"+
		"\u0005\u0122\u0000\u0000\u1090\u1095\u0005\u00af\u0000\u0000\u1091\u1092"+
		"\u0005\u0136\u0000\u0000\u1092\u1093\u0005\u0122\u0000\u0000\u1093\u1095"+
		"\u0005_\u0000\u0000\u1094\u108e\u0001\u0000\u0000\u0000\u1094\u1091\u0001"+
		"\u0000\u0000\u0000\u1095\u01a9\u0001\u0000\u0000\u0000\u1096\u1097\u0005"+
		"\u017a\u0000\u0000\u1097\u1098\u0003\u0140\u00a0\u0000\u1098\u1099\u0005"+
		"\u014b\u0000\u0000\u1099\u109a\u0003\u0140\u00a0\u0000\u109a\u01ab\u0001"+
		"\u0000\u0000\u0000\u109b\u109c\u0005\u017d\u0000\u0000\u109c\u10a1\u0003"+
		"\u01ae\u00d7\u0000\u109d\u109e\u0005\u0004\u0000\u0000\u109e\u10a0\u0003"+
		"\u01ae\u00d7\u0000\u109f\u109d\u0001\u0000\u0000\u0000\u10a0\u10a3\u0001"+
		"\u0000\u0000\u0000\u10a1\u109f\u0001\u0000\u0000\u0000\u10a1\u10a2\u0001"+
		"\u0000\u0000\u0000\u10a2\u01ad\u0001\u0000\u0000\u0000\u10a3\u10a1\u0001"+
		"\u0000\u0000\u0000\u10a4\u10a5\u0003\u01bc\u00de\u0000\u10a5\u10a6\u0005"+
		"\u0016\u0000\u0000\u10a6\u10a7\u0003\u01b0\u00d8\u0000\u10a7\u01af\u0001"+
		"\u0000\u0000\u0000\u10a8\u10d7\u0003\u01bc\u00de\u0000\u10a9\u10aa\u0005"+
		"\u0002\u0000\u0000\u10aa\u10ab\u0003\u01bc\u00de\u0000\u10ab\u10ac\u0005"+
		"\u0003\u0000\u0000\u10ac\u10d7\u0001\u0000\u0000\u0000\u10ad\u10d0\u0005"+
		"\u0002\u0000\u0000\u10ae\u10af\u00052\u0000\u0000\u10af\u10b0\u0005#\u0000"+
		"\u0000\u10b0\u10b5\u0003\u0140\u00a0\u0000\u10b1\u10b2\u0005\u0004\u0000"+
		"\u0000\u10b2\u10b4\u0003\u0140\u00a0\u0000\u10b3\u10b1\u0001\u0000\u0000"+
		"\u0000\u10b4\u10b7\u0001\u0000\u0000\u0000\u10b5\u10b3\u0001\u0000\u0000"+
		"\u0000\u10b5\u10b6\u0001\u0000\u0000\u0000\u10b6\u10d1\u0001\u0000\u0000"+
		"\u0000\u10b7\u10b5\u0001\u0000\u0000\u0000\u10b8\u10b9\u0007\u0019\u0000"+
		"\u0000\u10b9\u10ba\u0005#\u0000\u0000\u10ba\u10bf\u0003\u0140\u00a0\u0000"+
		"\u10bb\u10bc\u0005\u0004\u0000\u0000\u10bc\u10be\u0003\u0140\u00a0\u0000"+
		"\u10bd\u10bb\u0001\u0000\u0000\u0000\u10be\u10c1\u0001\u0000\u0000\u0000"+
		"\u10bf\u10bd\u0001\u0000\u0000\u0000\u10bf\u10c0\u0001\u0000\u0000\u0000"+
		"\u10c0\u10c3\u0001\u0000\u0000\u0000\u10c1\u10bf\u0001\u0000\u0000\u0000"+
		"\u10c2\u10b8\u0001\u0000\u0000\u0000\u10c2\u10c3\u0001\u0000\u0000\u0000"+
		"\u10c3\u10ce\u0001\u0000\u0000\u0000\u10c4\u10c5\u0007\u001a\u0000\u0000"+
		"\u10c5\u10c6\u0005#\u0000\u0000\u10c6\u10cb\u0003\u00a2Q\u0000\u10c7\u10c8"+
		"\u0005\u0004\u0000\u0000\u10c8\u10ca\u0003\u00a2Q\u0000\u10c9\u10c7\u0001"+
		"\u0000\u0000\u0000\u10ca\u10cd\u0001\u0000\u0000\u0000\u10cb\u10c9\u0001"+
		"\u0000\u0000\u0000\u10cb\u10cc\u0001\u0000\u0000\u0000\u10cc\u10cf\u0001"+
		"\u0000\u0000\u0000\u10cd\u10cb\u0001\u0000\u0000\u0000\u10ce\u10c4\u0001"+
		"\u0000\u0000\u0000\u10ce\u10cf\u0001\u0000\u0000\u0000\u10cf\u10d1\u0001"+
		"\u0000\u0000\u0000\u10d0\u10ae\u0001\u0000\u0000\u0000\u10d0\u10c2\u0001"+
		"\u0000\u0000\u0000\u10d1\u10d3\u0001\u0000\u0000\u0000\u10d2\u10d4\u0003"+
		"\u01b2\u00d9\u0000\u10d3\u10d2\u0001\u0000\u0000\u0000\u10d3\u10d4\u0001"+
		"\u0000\u0000\u0000\u10d4\u10d5\u0001\u0000\u0000\u0000\u10d5\u10d7\u0005"+
		"\u0003\u0000\u0000\u10d6\u10a8\u0001\u0000\u0000\u0000\u10d6\u10a9\u0001"+
		"\u0000\u0000\u0000\u10d6\u10ad\u0001\u0000\u0000\u0000\u10d7\u01b1\u0001"+
		"\u0000\u0000\u0000\u10d8\u10d9\u0005\u0101\u0000\u0000\u10d9\u10e9\u0003"+
		"\u01b4\u00da\u0000\u10da\u10db\u0005\u011d\u0000\u0000\u10db\u10e9\u0003"+
		"\u01b4\u00da\u0000\u10dc\u10dd\u0005\u0101\u0000\u0000\u10dd\u10de\u0005"+
		"\u001b\u0000\u0000\u10de\u10df\u0003\u01b4\u00da\u0000\u10df\u10e0\u0005"+
		"\u0010\u0000\u0000\u10e0\u10e1\u0003\u01b4\u00da\u0000\u10e1\u10e9\u0001"+
		"\u0000\u0000\u0000\u10e2\u10e3\u0005\u011d\u0000\u0000\u10e3\u10e4\u0005"+
		"\u001b\u0000\u0000\u10e4\u10e5\u0003\u01b4\u00da\u0000\u10e5\u10e6\u0005"+
		"\u0010\u0000\u0000\u10e6\u10e7\u0003\u01b4\u00da\u0000\u10e7\u10e9\u0001"+
		"\u0000\u0000\u0000\u10e8\u10d8\u0001\u0000\u0000\u0000\u10e8\u10da\u0001"+
		"\u0000\u0000\u0000\u10e8\u10dc\u0001\u0000\u0000\u0000\u10e8\u10e2\u0001"+
		"\u0000\u0000\u0000\u10e9\u01b3\u0001\u0000\u0000\u0000\u10ea\u10eb\u0005"+
		"\u0161\u0000\u0000\u10eb\u10f2\u00079\u0000\u0000\u10ec\u10ed\u0005I\u0000"+
		"\u0000\u10ed\u10f2\u0005\u011c\u0000\u0000\u10ee\u10ef\u0003\u0140\u00a0"+
		"\u0000\u10ef\u10f0\u00079\u0000\u0000\u10f0\u10f2\u0001\u0000\u0000\u0000"+
		"\u10f1\u10ea\u0001\u0000\u0000\u0000\u10f1\u10ec\u0001\u0000\u0000\u0000"+
		"\u10f1\u10ee\u0001\u0000\u0000\u0000\u10f2\u01b5\u0001\u0000\u0000\u0000"+
		"\u10f3\u10f8\u0003\u01ba\u00dd\u0000\u10f4\u10f5\u0005\u0004\u0000\u0000"+
		"\u10f5\u10f7\u0003\u01ba\u00dd\u0000\u10f6\u10f4\u0001\u0000\u0000\u0000"+
		"\u10f7\u10fa\u0001\u0000\u0000\u0000\u10f8\u10f6\u0001\u0000\u0000\u0000"+
		"\u10f8\u10f9\u0001\u0000\u0000\u0000\u10f9\u01b7\u0001\u0000\u0000\u0000"+
		"\u10fa\u10f8\u0001\u0000\u0000\u0000\u10fb\u10fc\u0005\u009a\u0000\u0000"+
		"\u10fc\u10fd\u0005\u0002\u0000\u0000\u10fd\u10fe\u0003\u0140\u00a0\u0000"+
		"\u10fe\u10ff\u0005\u0003\u0000\u0000\u10ff\u1106\u0001\u0000\u0000\u0000"+
		"\u1100\u1106\u0005\u009a\u0000\u0000\u1101\u1106\u0003\u01ba\u00dd\u0000"+
		"\u1102\u1106\u0005\u0082\u0000\u0000\u1103\u1106\u0005\u00bc\u0000\u0000"+
		"\u1104\u1106\u0005\u0116\u0000\u0000\u1105\u10fb\u0001\u0000\u0000\u0000"+
		"\u1105\u1100\u0001\u0000\u0000\u0000\u1105\u1101\u0001\u0000\u0000\u0000"+
		"\u1105\u1102\u0001\u0000\u0000\u0000\u1105\u1103\u0001\u0000\u0000\u0000"+
		"\u1105\u1104\u0001\u0000\u0000\u0000\u1106\u01b9\u0001\u0000\u0000\u0000"+
		"\u1107\u110c\u0003\u01c0\u00e0\u0000\u1108\u1109\u0005\u0005\u0000\u0000"+
		"\u1109\u110b\u0003\u01c0\u00e0\u0000\u110a\u1108\u0001\u0000\u0000\u0000"+
		"\u110b\u110e\u0001\u0000\u0000\u0000\u110c\u110a\u0001\u0000\u0000\u0000"+
		"\u110c\u110d\u0001\u0000\u0000\u0000\u110d\u01bb\u0001\u0000\u0000\u0000"+
		"\u110e\u110c\u0001\u0000\u0000\u0000\u110f\u1110\u0003\u01c0\u00e0\u0000"+
		"\u1110\u1111\u0003\u01be\u00df\u0000\u1111\u01bd\u0001\u0000\u0000\u0000"+
		"\u1112\u1113\u0005\u018f\u0000\u0000\u1113\u1115\u0003\u01c0\u00e0\u0000"+
		"\u1114\u1112\u0001\u0000\u0000\u0000\u1115\u1116\u0001\u0000\u0000\u0000"+
		"\u1116\u1114\u0001\u0000\u0000\u0000\u1116\u1117\u0001\u0000\u0000\u0000"+
		"\u1117\u111a\u0001\u0000\u0000\u0000\u1118\u111a\u0001\u0000\u0000\u0000"+
		"\u1119\u1114\u0001\u0000\u0000\u0000\u1119\u1118\u0001\u0000\u0000\u0000"+
		"\u111a\u01bf\u0001\u0000\u0000\u0000\u111b\u111f\u0003\u01c2\u00e1\u0000"+
		"\u111c\u111d\u0004\u00e0\u0014\u0000\u111d\u111f\u0003\u01dc\u00ee\u0000"+
		"\u111e\u111b\u0001\u0000\u0000\u0000\u111e\u111c\u0001\u0000\u0000\u0000"+
		"\u111f\u01c1\u0001\u0000\u0000\u0000\u1120\u1127\u0005\u01ab\u0000\u0000"+
		"\u1121\u1127\u0003\u01c4\u00e2\u0000\u1122\u1123\u0004\u00e1\u0015\u0000"+
		"\u1123\u1127\u0003\u01da\u00ed\u0000\u1124\u1125\u0004\u00e1\u0016\u0000"+
		"\u1125\u1127\u0003\u01de\u00ef\u0000\u1126\u1120\u0001\u0000\u0000\u0000"+
		"\u1126\u1121\u0001\u0000\u0000\u0000\u1126\u1122\u0001\u0000\u0000\u0000"+
		"\u1126\u1124\u0001\u0000\u0000\u0000\u1127\u01c3\u0001\u0000\u0000\u0000"+
		"\u1128\u112c\u0005\u01ac\u0000\u0000\u1129\u112a\u0004\u00e2\u0017\u0000"+
		"\u112a\u112c\u0005\u01a1\u0000\u0000\u112b\u1128\u0001\u0000\u0000\u0000"+
		"\u112b\u1129\u0001\u0000\u0000\u0000\u112c\u01c5\u0001\u0000\u0000\u0000"+
		"\u112d\u112e\u0005\u01ac\u0000\u0000\u112e\u01c7\u0001\u0000\u0000\u0000"+
		"\u112f\u1131\u0004\u00e4\u0018\u0000\u1130\u1132\u0005\u018f\u0000\u0000"+
		"\u1131\u1130\u0001\u0000\u0000\u0000\u1131\u1132\u0001\u0000\u0000\u0000"+
		"\u1132\u1133\u0001\u0000\u0000\u0000\u1133\u115b\u0005\u01a6\u0000\u0000"+
		"\u1134\u1136\u0004\u00e4\u0019\u0000\u1135\u1137\u0005\u018f\u0000\u0000"+
		"\u1136\u1135\u0001\u0000\u0000\u0000\u1136\u1137\u0001\u0000\u0000\u0000"+
		"\u1137\u1138\u0001\u0000\u0000\u0000\u1138\u115b\u0005\u01a7\u0000\u0000"+
		"\u1139\u113b\u0004\u00e4\u001a\u0000\u113a\u113c\u0005\u018f\u0000\u0000"+
		"\u113b\u113a\u0001\u0000\u0000\u0000\u113b\u113c\u0001\u0000\u0000\u0000"+
		"\u113c\u113d\u0001\u0000\u0000\u0000\u113d\u115b\u0007:\u0000\u0000\u113e"+
		"\u1140\u0005\u018f\u0000\u0000\u113f\u113e\u0001\u0000\u0000\u0000\u113f"+
		"\u1140\u0001\u0000\u0000\u0000\u1140\u1141\u0001\u0000\u0000\u0000\u1141"+
		"\u115b\u0005\u01a5\u0000\u0000\u1142\u1144\u0005\u018f\u0000\u0000\u1143"+
		"\u1142\u0001\u0000\u0000\u0000\u1143\u1144\u0001\u0000\u0000\u0000\u1144"+
		"\u1145\u0001\u0000\u0000\u0000\u1145\u115b\u0005\u01a2\u0000\u0000\u1146"+
		"\u1148\u0005\u018f\u0000\u0000\u1147\u1146\u0001\u0000\u0000\u0000\u1147"+
		"\u1148\u0001\u0000\u0000\u0000\u1148\u1149\u0001\u0000\u0000\u0000\u1149"+
		"\u115b\u0005\u01a3\u0000\u0000\u114a\u114c\u0005\u018f\u0000\u0000\u114b"+
		"\u114a\u0001\u0000\u0000\u0000\u114b\u114c\u0001\u0000\u0000\u0000\u114c"+
		"\u114d\u0001\u0000\u0000\u0000\u114d\u115b\u0005\u01a4\u0000\u0000\u114e"+
		"\u1150\u0005\u018f\u0000\u0000\u114f\u114e\u0001\u0000\u0000\u0000\u114f"+
		"\u1150\u0001\u0000\u0000\u0000\u1150\u1151\u0001\u0000\u0000\u0000\u1151"+
		"\u115b\u0005\u01a9\u0000\u0000\u1152\u1154\u0005\u018f\u0000\u0000\u1153"+
		"\u1152\u0001\u0000\u0000\u0000\u1153\u1154\u0001\u0000\u0000\u0000\u1154"+
		"\u1155\u0001\u0000\u0000\u0000\u1155\u115b\u0005\u01a8\u0000\u0000\u1156"+
		"\u1158\u0005\u018f\u0000\u0000\u1157\u1156\u0001\u0000\u0000\u0000\u1157"+
		"\u1158\u0001\u0000\u0000\u0000\u1158\u1159\u0001\u0000\u0000\u0000\u1159"+
		"\u115b\u0005\u01aa\u0000\u0000\u115a\u112f\u0001\u0000\u0000\u0000\u115a"+
		"\u1134\u0001\u0000\u0000\u0000\u115a\u1139\u0001\u0000\u0000\u0000\u115a"+
		"\u113f\u0001\u0000\u0000\u0000\u115a\u1143\u0001\u0000\u0000\u0000\u115a"+
		"\u1147\u0001\u0000\u0000\u0000\u115a\u114b\u0001\u0000\u0000\u0000\u115a"+
		"\u114f\u0001\u0000\u0000\u0000\u115a\u1153\u0001\u0000\u0000\u0000\u115a"+
		"\u1157\u0001\u0000\u0000\u0000\u115b\u01c9\u0001\u0000\u0000\u0000\u115c"+
		"\u1161\u0003\u01cc\u00e6\u0000\u115d\u115e\u0005\u0004\u0000\u0000\u115e"+
		"\u1160\u0003\u01cc\u00e6\u0000\u115f\u115d\u0001\u0000\u0000\u0000\u1160"+
		"\u1163\u0001\u0000\u0000\u0000\u1161\u115f\u0001\u0000\u0000\u0000\u1161"+
		"\u1162\u0001\u0000\u0000\u0000\u1162\u01cb\u0001\u0000\u0000\u0000\u1163"+
		"\u1161\u0001\u0000\u0000\u0000\u1164\u1166\u0003\u012a\u0095\u0000\u1165"+
		"\u1167\u0003\u01ce\u00e7\u0000\u1166\u1165\u0001\u0000\u0000\u0000\u1166"+
		"\u1167\u0001\u0000\u0000\u0000\u1167\u01cd\u0001\u0000\u0000\u0000\u1168"+
		"\u1169\u0005\u015f\u0000\u0000\u1169\u1175\u0003\u017a\u00bd\u0000\u116a"+
		"\u1175\u0003\\.\u0000\u116b\u1175\u0003\u0172\u00b9\u0000\u116c\u116d"+
		"\u0007;\u0000\u0000\u116d\u116e\u0003\u014c\u00a6\u0000\u116e\u116f\u0005"+
		"\u00e1\u0000\u0000\u116f\u1175\u0001\u0000\u0000\u0000\u1170\u1171\u0005"+
		"\u0129\u0000\u0000\u1171\u1175\u0003\u0182\u00c1\u0000\u1172\u1173\u0005"+
		"m\u0000\u0000\u1173\u1175\u0005]\u0000\u0000\u1174\u1168\u0001\u0000\u0000"+
		"\u0000\u1174\u116a\u0001\u0000\u0000\u0000\u1174\u116b\u0001\u0000\u0000"+
		"\u0000\u1174\u116c\u0001\u0000\u0000\u0000\u1174\u1170\u0001\u0000\u0000"+
		"\u0000\u1174\u1172\u0001\u0000\u0000\u0000\u1175\u01cf\u0001\u0000\u0000"+
		"\u0000\u1176\u117a\u0005\u01a0\u0000\u0000\u1177\u1178\u0004\u00e8\u001b"+
		"\u0000\u1178\u117a\u0005\u01a1\u0000\u0000\u1179\u1176\u0001\u0000\u0000"+
		"\u0000\u1179\u1177\u0001\u0000\u0000\u0000\u117a\u01d1\u0001\u0000\u0000"+
		"\u0000\u117b\u117e\u0003\u01d0\u00e8\u0000\u117c\u117e\u0005\u00e1\u0000"+
		"\u0000\u117d\u117b\u0001\u0000\u0000\u0000\u117d\u117c\u0001\u0000\u0000"+
		"\u0000\u117e\u01d3\u0001\u0000\u0000\u0000\u117f\u1182\u0005\u01a5\u0000"+
		"\u0000\u1180\u1182\u0003\u01d0\u00e8\u0000\u1181\u117f\u0001\u0000\u0000"+
		"\u0000\u1181\u1180\u0001\u0000\u0000\u0000\u1182\u01d5\u0001\u0000\u0000"+
		"\u0000\u1183\u1185\u0003\u00acV\u0000\u1184\u1186\u0003\u01ac\u00d6\u0000"+
		"\u1185\u1184\u0001\u0000\u0000\u0000\u1185\u1186\u0001\u0000\u0000\u0000"+
		"\u1186\u11ab\u0001\u0000\u0000\u0000\u1187\u1188\u0005{\u0000\u0000\u1188"+
		"\u11ab\u0003\u0136\u009b\u0000\u1189\u118a\u0005\u0129\u0000\u0000\u118a"+
		"\u11ab\u0003\u01d8\u00ec\u0000\u118b\u118c\u0005m\u0000\u0000\u118c\u11ab"+
		"\u0003\u0108\u0084\u0000\u118d\u118e\u0005\u0016\u0000\u0000\u118e\u11ab"+
		"\u0003\u01bc\u00de\u0000\u118f\u1191\u0003\u00c2a\u0000\u1190\u1192\u0003"+
		"\u01ac\u00d6\u0000\u1191\u1190\u0001\u0000\u0000\u0000\u1191\u1192\u0001"+
		"\u0000\u0000\u0000\u1192\u11ab\u0001\u0000\u0000\u0000\u1193\u1195\u0003"+
		"\u00d8l\u0000\u1194\u1196\u0003\u00deo\u0000\u1195\u1194\u0001\u0000\u0000"+
		"\u0000\u1195\u1196\u0001\u0000\u0000\u0000\u1196\u11ab\u0001\u0000\u0000"+
		"\u0000\u1197\u1199\u0003\u00deo\u0000\u1198\u119a\u0003\u00d8l\u0000\u1199"+
		"\u1198\u0001\u0000\u0000\u0000\u1199\u119a\u0001\u0000\u0000\u0000\u119a"+
		"\u11ab\u0001\u0000\u0000\u0000\u119b\u11ab\u0003\u0102\u0081\u0000\u119c"+
		"\u11ab\u0003\u00fc~\u0000\u119d\u119f\u0007\u000f\u0000\u0000\u119e\u11a0"+
		"\u0003\u00f6{\u0000\u119f\u119e\u0001\u0000\u0000\u0000\u119f\u11a0\u0001"+
		"\u0000\u0000\u0000\u11a0\u11a1\u0001\u0000\u0000\u0000\u11a1\u11ab\u0003"+
		"\u00a0P\u0000\u11a2\u11ab\u0003\u009aM\u0000\u11a3\u11a5\u0005\u000b\u0000"+
		"\u0000\u11a4\u11a6\u0003\u0136\u009b\u0000\u11a5\u11a4\u0001\u0000\u0000"+
		"\u0000\u11a5\u11a6\u0001\u0000\u0000\u0000\u11a6\u11a8\u0001\u0000\u0000"+
		"\u0000\u11a7\u11a9\u0003\u00ceg\u0000\u11a8\u11a7\u0001\u0000\u0000\u0000"+
		"\u11a8\u11a9\u0001\u0000\u0000\u0000\u11a9\u11ab\u0001\u0000\u0000\u0000"+
		"\u11aa\u1183\u0001\u0000\u0000\u0000\u11aa\u1187\u0001\u0000\u0000\u0000"+
		"\u11aa\u1189\u0001\u0000\u0000\u0000\u11aa\u118b\u0001\u0000\u0000\u0000"+
		"\u11aa\u118d\u0001\u0000\u0000\u0000\u11aa\u118f\u0001\u0000\u0000\u0000"+
		"\u11aa\u1193\u0001\u0000\u0000\u0000\u11aa\u1197\u0001\u0000\u0000\u0000"+
		"\u11aa\u119b\u0001\u0000\u0000\u0000\u11aa\u119c\u0001\u0000\u0000\u0000"+
		"\u11aa\u119d\u0001\u0000\u0000\u0000\u11aa\u11a2\u0001\u0000\u0000\u0000"+
		"\u11aa\u11a3\u0001\u0000\u0000\u0000\u11ab\u01d7\u0001\u0000\u0000\u0000"+
		"\u11ac\u11b1\u0003\u01bc\u00de\u0000\u11ad\u11ae\u0005\u0005\u0000\u0000"+
		"\u11ae\u11b0\u0003\u01bc\u00de\u0000\u11af\u11ad\u0001\u0000\u0000\u0000"+
		"\u11b0\u11b3\u0001\u0000\u0000\u0000\u11b1\u11af\u0001\u0000\u0000\u0000"+
		"\u11b1\u11b2\u0001\u0000\u0000\u0000\u11b2\u11b4\u0001\u0000\u0000\u0000"+
		"\u11b3\u11b1\u0001\u0000\u0000\u0000\u11b4\u11b5\u0005\u0183\u0000\u0000"+
		"\u11b5\u11c4\u0003\u0140\u00a0\u0000\u11b6\u11b7\u0005\u0004\u0000\u0000"+
		"\u11b7\u11bc\u0003\u01bc\u00de\u0000\u11b8\u11b9\u0005\u0005\u0000\u0000"+
		"\u11b9\u11bb\u0003\u01bc\u00de\u0000\u11ba\u11b8\u0001\u0000\u0000\u0000"+
		"\u11bb\u11be\u0001\u0000\u0000\u0000\u11bc\u11ba\u0001\u0000\u0000\u0000"+
		"\u11bc\u11bd\u0001\u0000\u0000\u0000\u11bd\u11bf\u0001\u0000\u0000\u0000"+
		"\u11be\u11bc\u0001\u0000\u0000\u0000\u11bf\u11c0\u0005\u0183\u0000\u0000"+
		"\u11c0\u11c1\u0003\u0140\u00a0\u0000\u11c1\u11c3\u0001\u0000\u0000\u0000"+
		"\u11c2\u11b6\u0001\u0000\u0000\u0000\u11c3\u11c6\u0001\u0000\u0000\u0000"+
		"\u11c4\u11c2\u0001\u0000\u0000\u0000\u11c4\u11c5\u0001\u0000\u0000\u0000"+
		"\u11c5\u01d9\u0001\u0000\u0000\u0000\u11c6\u11c4\u0001\u0000\u0000\u0000"+
		"\u11c7\u11c8\u0007<\u0000\u0000\u11c8\u01db\u0001\u0000\u0000\u0000\u11c9"+
		"\u11ca\u0007=\u0000\u0000\u11ca\u01dd\u0001\u0000\u0000\u0000\u11cb\u11cc"+
		"\u0007>\u0000\u0000\u11cc\u01df\u0001\u0000\u0000\u0000\u0247\u01e2\u01e6"+
		"\u01ea\u01ef\u01f3\u01f7\u01fe\u020d\u0211\u0216\u0220\u022a\u022d\u0231"+
		"\u0238\u023f\u024a\u024d\u0256\u0263\u0268\u026e\u0277\u0287\u028b\u0299"+
		"\u029d\u02a2\u02a5\u02ac\u02af\u02b5\u02bd\u02c1\u02c6\u02e5\u02f7\u02ff"+
		"\u0301\u031c\u0320\u0326\u0329\u032c\u0333\u0336\u033a\u033d\u0345\u0350"+
		"\u0352\u035a\u035d\u0361\u0364\u036a\u0375\u037b\u0380\u03a2\u03af\u03c8"+
		"\u03d1\u03d9\u03dd\u03e2\u03e8\u03f4\u03fc\u0402\u0410\u0415\u0425\u042c"+
		"\u0430\u0436\u0448\u0453\u0457\u045d\u0463\u0466\u0469\u0470\u0474\u047e"+
		"\u0480\u0489\u048c\u0495\u049a\u04a0\u04ac\u04af\u04b6\u04c1\u04c4\u04c9"+
		"\u04cc\u04d3\u04d8\u04e2\u04e4\u04ea\u04ee\u04f3\u04f9\u04fc\u0500\u0503"+
		"\u050a\u0510\u0514\u051a\u051d\u0520\u0527\u052c\u0535\u053d\u0543\u0546"+
		"\u0549\u054f\u0553\u0558\u055b\u055f\u0561\u0569\u0571\u0574\u0579\u057f"+
		"\u0585\u0588\u058c\u058f\u0593\u0597\u05b3\u05b6\u05ba\u05c0\u05c3\u05c6"+
		"\u05cc\u05d4\u05d9\u05df\u05e5\u05e8\u05ef\u05f6\u05ff\u0604\u0609\u0610"+
		"\u0616\u061b\u0627\u062a\u0632\u0635\u063c\u064d\u0669\u066c\u0672\u067b"+
		"\u0684\u0687\u068e\u0691\u069a\u069e\u06a2\u06a6\u06ad\u06b2\u06be\u06c2"+
		"\u06c9\u073d\u0745\u074d\u0756\u0760\u0764\u0767\u076e\u0774\u0786\u0792"+
		"\u0797\u07a3\u07ac\u07b4\u07b8\u07bf\u07c1\u07c6\u07cb\u07cf\u07d2\u07d8"+
		"\u07dd\u07e2\u07e6\u07ee\u07f3\u07f6\u07fb\u07ff\u0804\u0806\u080a\u0813"+
		"\u081b\u0821\u0830\u0837\u083c\u0843\u0848\u084b\u0863\u0865\u086e\u0875"+
		"\u0878\u087f\u0883\u0889\u0891\u0898\u089b\u08a3\u08ae\u08b9\u08c1\u08c7"+
		"\u08d3\u08da\u08e1\u08e7\u08f2\u08fa\u0900\u0906\u0909\u0911\u091a\u0923"+
		"\u0926\u092f\u0932\u093b\u093e\u0947\u094a\u094d\u0952\u0954\u0958\u0964"+
		"\u096b\u0972\u0978\u097a\u0986\u098a\u098e\u0994\u0999\u09a1\u09a5\u09a8"+
		"\u09ab\u09ae\u09b2\u09b6\u09bb\u09bf\u09c2\u09c5\u09c8\u09cc\u09d1\u09d5"+
		"\u09d8\u09db\u09de\u09e0\u09e6\u09ed\u09f2\u09f5\u09f8\u09fc\u0a06\u0a0a"+
		"\u0a0c\u0a0f\u0a13\u0a19\u0a1d\u0a28\u0a32\u0a36\u0a42\u0a4e\u0a5d\u0a62"+
		"\u0a68\u0a74\u0a84\u0a89\u0a96\u0a9b\u0aa3\u0aa9\u0aad\u0ab0\u0ab3\u0aba"+
		"\u0ac0\u0ac9\u0ad3\u0ae2\u0ae7\u0ae9\u0aed\u0af6\u0b03\u0b08\u0b0c\u0b14"+
		"\u0b17\u0b1b\u0b29\u0b36\u0b3b\u0b3f\u0b42\u0b46\u0b4c\u0b4f\u0b56\u0b62"+
		"\u0b6d\u0b7a\u0b85\u0b8a\u0b92\u0b97\u0b9e\u0ba7\u0baa\u0baf\u0bb6\u0bb9"+
		"\u0bbe\u0bc4\u0bca\u0bcf\u0bd3\u0bd9\u0bdd\u0be0\u0be5\u0be8\u0bed\u0bf1"+
		"\u0bf4\u0bf7\u0bfd\u0c02\u0c09\u0c0c\u0c1e\u0c20\u0c23\u0c2e\u0c37\u0c3e"+
		"\u0c46\u0c4d\u0c51\u0c54\u0c57\u0c5f\u0c67\u0c6d\u0c78\u0c80\u0c87\u0c8e"+
		"\u0c90\u0c9d\u0ca7\u0caa\u0cac\u0cb6\u0cc0\u0cc3\u0cc5\u0ccd\u0cd1\u0cda"+
		"\u0cdd\u0ce3\u0ce7\u0ce9\u0cf2\u0cfe\u0d00\u0d07\u0d0e\u0d14\u0d1a\u0d1c"+
		"\u0d23\u0d2b\u0d33\u0d39\u0d3e\u0d45\u0d4b\u0d4f\u0d51\u0d58\u0d61\u0d68"+
		"\u0d72\u0d77\u0d7b\u0d85\u0d8c\u0d99\u0d9b\u0da3\u0da5\u0da9\u0db1\u0dba"+
		"\u0dc0\u0dc8\u0dcd\u0dd9\u0dde\u0de1\u0de7\u0deb\u0df0\u0df5\u0dfa\u0e02"+
		"\u0e1b\u0e1d\u0e2a\u0e36\u0e42\u0e46\u0e4f\u0e53\u0e65\u0e68\u0e70\u0e79"+
		"\u0e82\u0e90\u0e96\u0e9e\u0ea9\u0eb0\u0eb3\u0ec0\u0ec5\u0ecd\u0ed1\u0ed5"+
		"\u0ee1\u0efa\u0f01\u0f04\u0f13\u0f17\u0f26\u0f28\u0f32\u0f41\u0f43\u0f50"+
		"\u0f54\u0f5b\u0f60\u0f68\u0f6d\u0f76\u0f91\u0fa1\u0fb2\u0fb6\u0fbc\u0fc2"+
		"\u0fcb\u0fcf\u0fd1\u0fd8\u0fe0\u0fe9\u0ff6\u0ffe\u1001\u1008\u1010\u1019"+
		"\u1026\u102b\u102d\u1033\u103e\u1041\u1045\u1048\u104f\u1054\u105a\u105d"+
		"\u1066\u1068\u1075\u1081\u108c\u1094\u10a1\u10b5\u10bf\u10c2\u10cb\u10ce"+
		"\u10d0\u10d3\u10d6\u10e8\u10f1\u10f8\u1105\u110c\u1116\u1119\u111e\u1126"+
		"\u112b\u1131\u1136\u113b\u113f\u1143\u1147\u114b\u114f\u1153\u1157\u115a"+
		"\u1161\u1166\u1174\u1179\u117d\u1181\u1185\u1191\u1195\u1199\u119f\u11a5"+
		"\u11a8\u11aa\u11b1\u11bc\u11c4";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}